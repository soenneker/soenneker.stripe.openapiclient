// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models.Checkout
{
    /// <summary>
    /// A Checkout Session represents your customer&apos;s session as they pay forone-time purchases or subscriptions through [Checkout](https://stripe.com/docs/payments/checkout)or [Payment Links](https://stripe.com/docs/payments/payment-links). We recommend creating anew Session each time your customer attempts to pay.Once payment is successful, the Checkout Session will contain a referenceto the [Customer](https://stripe.com/docs/api/customers), and either the successful[PaymentIntent](https://stripe.com/docs/api/payment_intents) or an active[Subscription](https://stripe.com/docs/api/subscriptions).You can create a Checkout Session on your server and redirect to its URLto begin Checkout.Related guide: [Checkout quickstart](https://stripe.com/docs/checkout/quickstart)
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Session : IAdditionalDataHolder, IParsable
    {
        /// <summary>Settings for price localization with [Adaptive Pricing](https://docs.stripe.com/payments/checkout/adaptive-pricing).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_adaptive_pricing? AdaptivePricing { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_adaptive_pricing AdaptivePricing { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>When set, provides configuration for actions to take if this Checkout Session expires.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_after_expiration? AfterExpiration { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_after_expiration AfterExpiration { get; set; }
#endif
        /// <summary>Enables user redeemable promotion codes.</summary>
        public bool? AllowPromotionCodes { get; set; }
        /// <summary>Total of all items before discounts or taxes are applied.</summary>
        public int? AmountSubtotal { get; set; }
        /// <summary>Total of all items after discounts and taxes are applied.</summary>
        public int? AmountTotal { get; set; }
        /// <summary>The automatic_tax property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_automatic_tax? AutomaticTax { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_automatic_tax AutomaticTax { get; set; }
#endif
        /// <summary>Describes whether Checkout should collect the customer&apos;s billing address. Defaults to `auto`.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_billing_address_collection? BillingAddressCollection { get; set; }
        /// <summary>If set, Checkout displays a back button and customers will be directed to this URL if they decide to cancel payment and return to your website.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CancelUrl { get; set; }
#nullable restore
#else
        public string CancelUrl { get; set; }
#endif
        /// <summary>A unique string to reference the Checkout Session. This can be acustomer ID, a cart ID, or similar, and can be used to reconcile theSession with your internal systems.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientReferenceId { get; set; }
#nullable restore
#else
        public string ClientReferenceId { get; set; }
#endif
        /// <summary>The client secret of your Checkout Session. Applies to Checkout Sessions with `ui_mode: embedded` or `ui_mode: custom`. For `ui_mode: embedded`, the client secret is to be used when initializing Stripe.js embedded checkout. For `ui_mode: custom`, use the client secret with [initCheckout](https://stripe.com/docs/js/custom_checkout/init) on your front end.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientSecret { get; set; }
#nullable restore
#else
        public string ClientSecret { get; set; }
#endif
        /// <summary>Information about the customer collected within the Checkout Session.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_collected_information? CollectedInformation { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_collected_information CollectedInformation { get; set; }
#endif
        /// <summary>Results of `consent_collection` for this session.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_consent? Consent { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_consent Consent { get; set; }
#endif
        /// <summary>When set, provides configuration for the Checkout Session to gather active consent from customers.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_consent_collection? ConsentCollection { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_consent_collection ConsentCollection { get; set; }
#endif
        /// <summary>Time at which the object was created. Measured in seconds since the Unix epoch.</summary>
        public int? Created { get; set; }
        /// <summary>Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>Currency conversion details for [Adaptive Pricing](https://docs.stripe.com/payments/checkout/adaptive-pricing) sessions created before 2025-03-31.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_currency_conversion? CurrencyConversion { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_currency_conversion CurrencyConversion { get; set; }
#endif
        /// <summary>The ID of the customer for this Session.For Checkout Sessions in `subscription` mode or Checkout Sessions with `customer_creation` set as `always` in `payment` mode, Checkoutwill create a new customer object based on information providedduring the payment flow unless an existing customer was provided whenthe Session was created.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_customer? Customer { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_customer Customer { get; set; }
#endif
        /// <summary>Configure whether a Checkout Session creates a Customer when the Checkout Session completes.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_customer_creation? CustomerCreation { get; set; }
        /// <summary>The customer details including the customer&apos;s tax exempt status and the customer&apos;s tax IDs. Customer&apos;s address details are not present on Sessions in `setup` mode.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_customer_details? CustomerDetails { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_customer_details CustomerDetails { get; set; }
#endif
        /// <summary>If provided, this value will be used when the Customer object is created.If not provided, customers will be asked to enter their email address.Use this parameter to prefill customer data if you already have an emailon file. To access information about the customer once the payment flow iscomplete, use the `customer` attribute.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomerEmail { get; set; }
#nullable restore
#else
        public string CustomerEmail { get; set; }
#endif
        /// <summary>Collect additional information from your customer using custom fields. Up to 3 fields are supported.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_custom_fields>? CustomFields { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_custom_fields> CustomFields { get; set; }
#endif
        /// <summary>The custom_text property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_custom_text? CustomText { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_custom_text CustomText { get; set; }
#endif
        /// <summary>List of coupons and promotion codes attached to the Checkout Session.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_discount>? Discounts { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_discount> Discounts { get; set; }
#endif
        /// <summary>The timestamp at which the Checkout Session will expire.</summary>
        public int? ExpiresAt { get; set; }
        /// <summary>Unique identifier for the object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>ID of the invoice created by the Checkout Session, if it exists.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_invoice? Invoice { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_invoice Invoice { get; set; }
#endif
        /// <summary>Details on the state of invoice creation for the Checkout Session.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_invoice_creation? InvoiceCreation { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_invoice_creation InvoiceCreation { get; set; }
#endif
        /// <summary>The line items purchased by the customer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_line_items? LineItems { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_line_items LineItems { get; set; }
#endif
        /// <summary>Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.</summary>
        public bool? Livemode { get; set; }
        /// <summary>The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser&apos;s locale is used.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_locale? Locale { get; set; }
        /// <summary>Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_metadata? Metadata { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_metadata Metadata { get; set; }
#endif
        /// <summary>The mode of the Checkout Session.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_mode? Mode { get; set; }
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_object? Object { get; set; }
        /// <summary>The optional items presented to the customer at checkout.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_optional_item>? OptionalItems { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_optional_item> OptionalItems { get; set; }
#endif
        /// <summary>Where the user is coming from. This informs the optimizations that are applied to the session.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_origin_context? OriginContext { get; set; }
        /// <summary>The ID of the PaymentIntent for Checkout Sessions in `payment` mode. You can&apos;t confirm or cancel the PaymentIntent for a Checkout Session. To cancel, [expire the Checkout Session](https://stripe.com/docs/api/checkout/sessions/expire) instead.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_payment_intent? PaymentIntent { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_payment_intent PaymentIntent { get; set; }
#endif
        /// <summary>The ID of the Payment Link that created this Session.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_payment_link? PaymentLink { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_payment_link PaymentLink { get; set; }
#endif
        /// <summary>Configure whether a Checkout Session should collect a payment method. Defaults to `always`.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_payment_method_collection? PaymentMethodCollection { get; set; }
        /// <summary>Information about the payment method configuration used for this Checkout session if using dynamic payment methods.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_config_biz_payment_method_configuration_details? PaymentMethodConfigurationDetails { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_config_biz_payment_method_configuration_details PaymentMethodConfigurationDetails { get; set; }
#endif
        /// <summary>Payment-method-specific configuration for the PaymentIntent or SetupIntent of this CheckoutSession.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout_session_payment_method_options? PaymentMethodOptions { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout_session_payment_method_options PaymentMethodOptions { get; set; }
#endif
        /// <summary>A list of the types of payment methods (e.g. card) this CheckoutSession is allowed to accept.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? PaymentMethodTypes { get; set; }
#nullable restore
#else
        public List<string> PaymentMethodTypes { get; set; }
#endif
        /// <summary>The payment status of the Checkout Session, one of `paid`, `unpaid`, or `no_payment_required`.You can use this value to decide when to fulfill your customer&apos;s order.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_payment_status? PaymentStatus { get; set; }
        /// <summary>This property is used to set up permissions for various actions (e.g., update) on the CheckoutSession object.For specific permissions, please refer to their dedicated subsections, such as `permissions.update_shipping_details`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_permissions? Permissions { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_permissions Permissions { get; set; }
#endif
        /// <summary>The phone_number_collection property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_phone_number_collection? PhoneNumberCollection { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_phone_number_collection PhoneNumberCollection { get; set; }
#endif
        /// <summary>The presentment_details property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_payment_intent_presentment_details? PresentmentDetails { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_payment_intent_presentment_details PresentmentDetails { get; set; }
#endif
        /// <summary>The ID of the original expired Checkout Session that triggered the recovery flow.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RecoveredFrom { get; set; }
#nullable restore
#else
        public string RecoveredFrom { get; set; }
#endif
        /// <summary>This parameter applies to `ui_mode: embedded`. Learn more about the [redirect behavior](https://stripe.com/docs/payments/checkout/custom-success-page?payment-ui=embedded-form) of embedded sessions. Defaults to `always`.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_redirect_on_completion? RedirectOnCompletion { get; set; }
        /// <summary>Applies to Checkout Sessions with `ui_mode: embedded` or `ui_mode: custom`. The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method&apos;s app or site.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReturnUrl { get; set; }
#nullable restore
#else
        public string ReturnUrl { get; set; }
#endif
        /// <summary>Controls saved payment method settings for the session. Only available in `payment` and `subscription` mode.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_saved_payment_method_options? SavedPaymentMethodOptions { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_saved_payment_method_options SavedPaymentMethodOptions { get; set; }
#endif
        /// <summary>The ID of the SetupIntent for Checkout Sessions in `setup` mode. You can&apos;t confirm or cancel the SetupIntent for a Checkout Session. To cancel, [expire the Checkout Session](https://stripe.com/docs/api/checkout/sessions/expire) instead.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_setup_intent? SetupIntent { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_setup_intent SetupIntent { get; set; }
#endif
        /// <summary>When set, provides configuration for Checkout to collect a shipping address from a customer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_shipping_address_collection? ShippingAddressCollection { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_shipping_address_collection ShippingAddressCollection { get; set; }
#endif
        /// <summary>The details of the customer cost of shipping, including the customer chosen ShippingRate.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_shipping_cost? ShippingCost { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_shipping_cost ShippingCost { get; set; }
#endif
        /// <summary>The shipping rate options applied to this Session.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_shipping_option>? ShippingOptions { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_shipping_option> ShippingOptions { get; set; }
#endif
        /// <summary>The status of the Checkout Session, one of `open`, `complete`, or `expired`.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_status? Status { get; set; }
        /// <summary>Describes the type of transaction being performed by Checkout in order to customizerelevant text on the page, such as the submit button. `submit_type` can only bespecified on Checkout Sessions in `payment` mode. If blank or `auto`, `pay` is used.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_submit_type? SubmitType { get; set; }
        /// <summary>The ID of the [Subscription](https://stripe.com/docs/api/subscriptions) for Checkout Sessions in `subscription` mode.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_subscription? Subscription { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_subscription Subscription { get; set; }
#endif
        /// <summary>The URL the customer will be directed to after the payment orsubscription creation is successful.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SuccessUrl { get; set; }
#nullable restore
#else
        public string SuccessUrl { get; set; }
#endif
        /// <summary>The tax_id_collection property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_tax_id_collection? TaxIdCollection { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_tax_id_collection TaxIdCollection { get; set; }
#endif
        /// <summary>Tax and discount details for the computed total amount.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_total_details? TotalDetails { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_total_details TotalDetails { get; set; }
#endif
        /// <summary>The UI mode of the Session. Defaults to `hosted`.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_ui_mode? UiMode { get; set; }
        /// <summary>The URL to the Checkout Session. Applies to Checkout Sessions with `ui_mode: hosted`. Redirect customers to this URL to take them to Checkout. If you’re using [Custom Domains](https://stripe.com/docs/payments/checkout/custom-domains), the URL will use your subdomain. Otherwise, it’ll use `checkout.stripe.com.`This value is only present when the session is active.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>Wallet-specific configuration for this Checkout Session.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout_session_wallet_options? WalletOptions { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout_session_wallet_options WalletOptions { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session"/> and sets the default values.
        /// </summary>
        public Session()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "adaptive_pricing", n => { AdaptivePricing = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_adaptive_pricing>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_adaptive_pricing.CreateFromDiscriminatorValue); } },
                { "after_expiration", n => { AfterExpiration = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_after_expiration>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_after_expiration.CreateFromDiscriminatorValue); } },
                { "allow_promotion_codes", n => { AllowPromotionCodes = n.GetBoolValue(); } },
                { "amount_subtotal", n => { AmountSubtotal = n.GetIntValue(); } },
                { "amount_total", n => { AmountTotal = n.GetIntValue(); } },
                { "automatic_tax", n => { AutomaticTax = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_automatic_tax>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_automatic_tax.CreateFromDiscriminatorValue); } },
                { "billing_address_collection", n => { BillingAddressCollection = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_billing_address_collection>(); } },
                { "cancel_url", n => { CancelUrl = n.GetStringValue(); } },
                { "client_reference_id", n => { ClientReferenceId = n.GetStringValue(); } },
                { "client_secret", n => { ClientSecret = n.GetStringValue(); } },
                { "collected_information", n => { CollectedInformation = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_collected_information>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_collected_information.CreateFromDiscriminatorValue); } },
                { "consent", n => { Consent = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_consent>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_consent.CreateFromDiscriminatorValue); } },
                { "consent_collection", n => { ConsentCollection = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_consent_collection>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_consent_collection.CreateFromDiscriminatorValue); } },
                { "created", n => { Created = n.GetIntValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "currency_conversion", n => { CurrencyConversion = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_currency_conversion>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_currency_conversion.CreateFromDiscriminatorValue); } },
                { "custom_fields", n => { CustomFields = n.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_custom_fields>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_custom_fields.CreateFromDiscriminatorValue)?.AsList(); } },
                { "custom_text", n => { CustomText = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_custom_text>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_custom_text.CreateFromDiscriminatorValue); } },
                { "customer", n => { Customer = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_customer>(global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_customer.CreateFromDiscriminatorValue); } },
                { "customer_creation", n => { CustomerCreation = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_customer_creation>(); } },
                { "customer_details", n => { CustomerDetails = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_customer_details>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_customer_details.CreateFromDiscriminatorValue); } },
                { "customer_email", n => { CustomerEmail = n.GetStringValue(); } },
                { "discounts", n => { Discounts = n.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_discount>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_discount.CreateFromDiscriminatorValue)?.AsList(); } },
                { "expires_at", n => { ExpiresAt = n.GetIntValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "invoice", n => { Invoice = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_invoice>(global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_invoice.CreateFromDiscriminatorValue); } },
                { "invoice_creation", n => { InvoiceCreation = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_invoice_creation>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_invoice_creation.CreateFromDiscriminatorValue); } },
                { "line_items", n => { LineItems = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_line_items>(global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_line_items.CreateFromDiscriminatorValue); } },
                { "livemode", n => { Livemode = n.GetBoolValue(); } },
                { "locale", n => { Locale = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_locale>(); } },
                { "metadata", n => { Metadata = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_metadata>(global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_metadata.CreateFromDiscriminatorValue); } },
                { "mode", n => { Mode = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_mode>(); } },
                { "object", n => { Object = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_object>(); } },
                { "optional_items", n => { OptionalItems = n.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_optional_item>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_optional_item.CreateFromDiscriminatorValue)?.AsList(); } },
                { "origin_context", n => { OriginContext = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_origin_context>(); } },
                { "payment_intent", n => { PaymentIntent = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_payment_intent>(global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_payment_intent.CreateFromDiscriminatorValue); } },
                { "payment_link", n => { PaymentLink = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_payment_link>(global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_payment_link.CreateFromDiscriminatorValue); } },
                { "payment_method_collection", n => { PaymentMethodCollection = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_payment_method_collection>(); } },
                { "payment_method_configuration_details", n => { PaymentMethodConfigurationDetails = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_config_biz_payment_method_configuration_details>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_config_biz_payment_method_configuration_details.CreateFromDiscriminatorValue); } },
                { "payment_method_options", n => { PaymentMethodOptions = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout_session_payment_method_options>(global::Soenneker.Stripe.OpenApiClient.Models.Checkout_session_payment_method_options.CreateFromDiscriminatorValue); } },
                { "payment_method_types", n => { PaymentMethodTypes = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "payment_status", n => { PaymentStatus = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_payment_status>(); } },
                { "permissions", n => { Permissions = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_permissions>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_permissions.CreateFromDiscriminatorValue); } },
                { "phone_number_collection", n => { PhoneNumberCollection = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_phone_number_collection>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_phone_number_collection.CreateFromDiscriminatorValue); } },
                { "presentment_details", n => { PresentmentDetails = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_payment_intent_presentment_details>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_payment_intent_presentment_details.CreateFromDiscriminatorValue); } },
                { "recovered_from", n => { RecoveredFrom = n.GetStringValue(); } },
                { "redirect_on_completion", n => { RedirectOnCompletion = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_redirect_on_completion>(); } },
                { "return_url", n => { ReturnUrl = n.GetStringValue(); } },
                { "saved_payment_method_options", n => { SavedPaymentMethodOptions = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_saved_payment_method_options>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_saved_payment_method_options.CreateFromDiscriminatorValue); } },
                { "setup_intent", n => { SetupIntent = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_setup_intent>(global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_setup_intent.CreateFromDiscriminatorValue); } },
                { "shipping_address_collection", n => { ShippingAddressCollection = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_shipping_address_collection>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_shipping_address_collection.CreateFromDiscriminatorValue); } },
                { "shipping_cost", n => { ShippingCost = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_shipping_cost>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_shipping_cost.CreateFromDiscriminatorValue); } },
                { "shipping_options", n => { ShippingOptions = n.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_shipping_option>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_shipping_option.CreateFromDiscriminatorValue)?.AsList(); } },
                { "status", n => { Status = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_status>(); } },
                { "submit_type", n => { SubmitType = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_submit_type>(); } },
                { "subscription", n => { Subscription = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_subscription>(global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_subscription.CreateFromDiscriminatorValue); } },
                { "success_url", n => { SuccessUrl = n.GetStringValue(); } },
                { "tax_id_collection", n => { TaxIdCollection = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_tax_id_collection>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_tax_id_collection.CreateFromDiscriminatorValue); } },
                { "total_details", n => { TotalDetails = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_total_details>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_total_details.CreateFromDiscriminatorValue); } },
                { "ui_mode", n => { UiMode = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_ui_mode>(); } },
                { "url", n => { Url = n.GetStringValue(); } },
                { "wallet_options", n => { WalletOptions = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout_session_wallet_options>(global::Soenneker.Stripe.OpenApiClient.Models.Checkout_session_wallet_options.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_adaptive_pricing>("adaptive_pricing", AdaptivePricing);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_after_expiration>("after_expiration", AfterExpiration);
            writer.WriteBoolValue("allow_promotion_codes", AllowPromotionCodes);
            writer.WriteIntValue("amount_subtotal", AmountSubtotal);
            writer.WriteIntValue("amount_total", AmountTotal);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_automatic_tax>("automatic_tax", AutomaticTax);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_billing_address_collection>("billing_address_collection", BillingAddressCollection);
            writer.WriteStringValue("cancel_url", CancelUrl);
            writer.WriteStringValue("client_reference_id", ClientReferenceId);
            writer.WriteStringValue("client_secret", ClientSecret);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_collected_information>("collected_information", CollectedInformation);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_consent>("consent", Consent);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_consent_collection>("consent_collection", ConsentCollection);
            writer.WriteIntValue("created", Created);
            writer.WriteStringValue("currency", Currency);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_currency_conversion>("currency_conversion", CurrencyConversion);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_customer>("customer", Customer);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_customer_creation>("customer_creation", CustomerCreation);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_customer_details>("customer_details", CustomerDetails);
            writer.WriteStringValue("customer_email", CustomerEmail);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_custom_fields>("custom_fields", CustomFields);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_custom_text>("custom_text", CustomText);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_discount>("discounts", Discounts);
            writer.WriteIntValue("expires_at", ExpiresAt);
            writer.WriteStringValue("id", Id);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_invoice>("invoice", Invoice);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_invoice_creation>("invoice_creation", InvoiceCreation);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_line_items>("line_items", LineItems);
            writer.WriteBoolValue("livemode", Livemode);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_locale>("locale", Locale);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_metadata>("metadata", Metadata);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_mode>("mode", Mode);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_object>("object", Object);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_optional_item>("optional_items", OptionalItems);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_origin_context>("origin_context", OriginContext);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_payment_intent>("payment_intent", PaymentIntent);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_payment_link>("payment_link", PaymentLink);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_payment_method_collection>("payment_method_collection", PaymentMethodCollection);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_config_biz_payment_method_configuration_details>("payment_method_configuration_details", PaymentMethodConfigurationDetails);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout_session_payment_method_options>("payment_method_options", PaymentMethodOptions);
            writer.WriteCollectionOfPrimitiveValues<string>("payment_method_types", PaymentMethodTypes);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_payment_status>("payment_status", PaymentStatus);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_permissions>("permissions", Permissions);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_phone_number_collection>("phone_number_collection", PhoneNumberCollection);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_payment_intent_presentment_details>("presentment_details", PresentmentDetails);
            writer.WriteStringValue("recovered_from", RecoveredFrom);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_redirect_on_completion>("redirect_on_completion", RedirectOnCompletion);
            writer.WriteStringValue("return_url", ReturnUrl);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_saved_payment_method_options>("saved_payment_method_options", SavedPaymentMethodOptions);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_setup_intent>("setup_intent", SetupIntent);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_shipping_address_collection>("shipping_address_collection", ShippingAddressCollection);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_shipping_cost>("shipping_cost", ShippingCost);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_shipping_option>("shipping_options", ShippingOptions);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_status>("status", Status);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_submit_type>("submit_type", SubmitType);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_subscription>("subscription", Subscription);
            writer.WriteStringValue("success_url", SuccessUrl);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_tax_id_collection>("tax_id_collection", TaxIdCollection);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_total_details>("total_details", TotalDetails);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session_ui_mode>("ui_mode", UiMode);
            writer.WriteStringValue("url", Url);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout_session_wallet_options>("wallet_options", WalletOptions);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Customer"/>, <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Deleted_customer"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Session_customer : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Customer"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Customer? Customer { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Customer Customer { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Deleted_customer"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Deleted_customer? DeletedCustomer { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Deleted_customer DeletedCustomer { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_customer"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_customer CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_customer();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.Customer = new global::Soenneker.Stripe.OpenApiClient.Models.Customer();
                    result.DeletedCustomer = new global::Soenneker.Stripe.OpenApiClient.Models.Deleted_customer();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(Customer != null || DeletedCustomer != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(Customer, DeletedCustomer);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Customer>(null, Customer, DeletedCustomer);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Invoice"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Session_invoice : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Invoice"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Invoice? Invoice { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Invoice Invoice { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_invoice"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_invoice CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_invoice();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.Invoice = new global::Soenneker.Stripe.OpenApiClient.Models.Invoice();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(Invoice != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(Invoice);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Invoice>(null, Invoice);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Session_payment_intent : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent? PaymentIntent { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent PaymentIntent { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_payment_intent"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_payment_intent CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_payment_intent();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.PaymentIntent = new global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(PaymentIntent != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(PaymentIntent);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent>(null, PaymentIntent);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Payment_link"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Session_payment_link : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Payment_link"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Payment_link? PaymentLink { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Payment_link PaymentLink { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_payment_link"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_payment_link CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_payment_link();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.PaymentLink = new global::Soenneker.Stripe.OpenApiClient.Models.Payment_link();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(PaymentLink != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(PaymentLink);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_link>(null, PaymentLink);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Setup_intent"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Session_setup_intent : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Setup_intent"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Setup_intent? SetupIntent { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Setup_intent SetupIntent { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_setup_intent"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_setup_intent CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_setup_intent();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.SetupIntent = new global::Soenneker.Stripe.OpenApiClient.Models.Setup_intent();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(SetupIntent != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(SetupIntent);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Setup_intent>(null, SetupIntent);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Subscription"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Session_subscription : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Subscription"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Subscription? Subscription { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Subscription Subscription { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_subscription"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_subscription CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Checkout.Session.Session_subscription();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.Subscription = new global::Soenneker.Stripe.OpenApiClient.Models.Subscription();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(Subscription != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(Subscription);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription>(null, Subscription);
                }
            }
        }
    }
}
#pragma warning restore CS0618
