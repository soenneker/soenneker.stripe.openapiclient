// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    /// <summary>
    /// Pending Updates store the changes pending from a previous update that will be appliedto the Subscription upon successful payment.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Subscriptions_resource_pending_update : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>If the update is applied, determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. The timestamp is in UTC format.</summary>
        public int? BillingCycleAnchor { get; set; }
        /// <summary>The point after which the changes reflected by this update will be discarded and no longer applied.</summary>
        public int? ExpiresAt { get; set; }
        /// <summary>List of subscription items, each with an attached plan, that will be set if the update is applied.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_item>? SubscriptionItems { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_item> SubscriptionItems { get; set; }
#endif
        /// <summary>Unix timestamp representing the end of the trial period the customer will get before being charged for the first time, if the update is applied.</summary>
        public int? TrialEnd { get; set; }
        /// <summary>Indicates if a plan&apos;s `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.</summary>
        public bool? TrialFromPlan { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Subscriptions_resource_pending_update"/> and sets the default values.
        /// </summary>
        public Subscriptions_resource_pending_update()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Subscriptions_resource_pending_update"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Subscriptions_resource_pending_update CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Subscriptions_resource_pending_update();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "billing_cycle_anchor", n => { BillingCycleAnchor = n.GetIntValue(); } },
                { "expires_at", n => { ExpiresAt = n.GetIntValue(); } },
                { "subscription_items", n => { SubscriptionItems = n.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_item>(global::Soenneker.Stripe.OpenApiClient.Models.Subscription_item.CreateFromDiscriminatorValue)?.AsList(); } },
                { "trial_end", n => { TrialEnd = n.GetIntValue(); } },
                { "trial_from_plan", n => { TrialFromPlan = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("billing_cycle_anchor", BillingCycleAnchor);
            writer.WriteIntValue("expires_at", ExpiresAt);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_item>("subscription_items", SubscriptionItems);
            writer.WriteIntValue("trial_end", TrialEnd);
            writer.WriteBoolValue("trial_from_plan", TrialFromPlan);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
