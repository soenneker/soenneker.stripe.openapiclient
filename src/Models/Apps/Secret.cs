// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models.Apps
{
    /// <summary>
    /// Secret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.The primary resource in Secret Store is a `secret`. Other apps can&apos;t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.All Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don&apos;t change per-user, like a third-party API key.A `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.Related guide: [Store data between page reloads](https://stripe.com/docs/stripe-apps/store-auth-data-custom-objects)
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Secret : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Time at which the object was created. Measured in seconds since the Unix epoch.</summary>
        public int? Created { get; set; }
        /// <summary>If true, indicates that this secret has been deleted</summary>
        public bool? Deleted { get; set; }
        /// <summary>The Unix timestamp for the expiry time of the secret, after which the secret deletes.</summary>
        public int? ExpiresAt { get; set; }
        /// <summary>Unique identifier for the object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.</summary>
        public bool? Livemode { get; set; }
        /// <summary>A name for the secret that&apos;s unique within the scope.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Apps.Secret_object? Object { get; set; }
        /// <summary>The plaintext secret value to be stored.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Payload { get; set; }
#nullable restore
#else
        public string Payload { get; set; }
#endif
        /// <summary>The scope property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Secret_service_resource_scope? Scope { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Secret_service_resource_scope Scope { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Apps.Secret"/> and sets the default values.
        /// </summary>
        public Secret()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Apps.Secret"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Apps.Secret CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Apps.Secret();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "created", n => { Created = n.GetIntValue(); } },
                { "deleted", n => { Deleted = n.GetBoolValue(); } },
                { "expires_at", n => { ExpiresAt = n.GetIntValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "livemode", n => { Livemode = n.GetBoolValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "object", n => { Object = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Apps.Secret_object>(); } },
                { "payload", n => { Payload = n.GetStringValue(); } },
                { "scope", n => { Scope = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Secret_service_resource_scope>(global::Soenneker.Stripe.OpenApiClient.Models.Secret_service_resource_scope.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("created", Created);
            writer.WriteBoolValue("deleted", Deleted);
            writer.WriteIntValue("expires_at", ExpiresAt);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("livemode", Livemode);
            writer.WriteStringValue("name", Name);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Apps.Secret_object>("object", Object);
            writer.WriteStringValue("payload", Payload);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Secret_service_resource_scope>("scope", Scope);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
