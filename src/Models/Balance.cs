// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    /// <summary>
    /// This is an object representing your Stripe balance. You can retrieve it to seethe balance currently on your Stripe account.You can also retrieve the balance history, which contains a list of[transactions](https://stripe.com/docs/reporting/balance-transaction-types) that contributed to the balance(charges, payouts, and so forth).The available and pending amounts for each currency are broken down further bypayment source types.Related guide: [Understanding Connect account balances](https://stripe.com/docs/connect/account-balances)
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Balance : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Available funds that you can transfer or pay out automatically by Stripe or explicitly through the [Transfers API](https://stripe.com/docs/api#transfers) or [Payouts API](https://stripe.com/docs/api#payouts). You can find the available balance for each currency and payment type in the `source_types` property.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Balance_amount>? Available { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Balance_amount> Available { get; set; }
#endif
        /// <summary>Funds held due to negative balances on connected accounts where [account.controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts. You can find the connect reserve balance for each currency and payment type in the `source_types` property.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Balance_amount>? ConnectReserved { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Balance_amount> ConnectReserved { get; set; }
#endif
        /// <summary>Funds that you can pay out using Instant Payouts.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Balance_amount_net>? InstantAvailable { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Balance_amount_net> InstantAvailable { get; set; }
#endif
        /// <summary>The issuing property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Balance_detail? Issuing { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Balance_detail Issuing { get; set; }
#endif
        /// <summary>Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.</summary>
        public bool? Livemode { get; set; }
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Balance_object? Object { get; set; }
        /// <summary>Funds that aren&apos;t available in the balance yet. You can find the pending balance for each currency and each payment type in the `source_types` property.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Balance_amount>? Pending { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Balance_amount> Pending { get; set; }
#endif
        /// <summary>The refund_and_dispute_prefunding property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Balance_detail_ungated? RefundAndDisputePrefunding { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Balance_detail_ungated RefundAndDisputePrefunding { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Balance"/> and sets the default values.
        /// </summary>
        public Balance()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Balance"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Balance CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Balance();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "available", n => { Available = n.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Balance_amount>(global::Soenneker.Stripe.OpenApiClient.Models.Balance_amount.CreateFromDiscriminatorValue)?.AsList(); } },
                { "connect_reserved", n => { ConnectReserved = n.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Balance_amount>(global::Soenneker.Stripe.OpenApiClient.Models.Balance_amount.CreateFromDiscriminatorValue)?.AsList(); } },
                { "instant_available", n => { InstantAvailable = n.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Balance_amount_net>(global::Soenneker.Stripe.OpenApiClient.Models.Balance_amount_net.CreateFromDiscriminatorValue)?.AsList(); } },
                { "issuing", n => { Issuing = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Balance_detail>(global::Soenneker.Stripe.OpenApiClient.Models.Balance_detail.CreateFromDiscriminatorValue); } },
                { "livemode", n => { Livemode = n.GetBoolValue(); } },
                { "object", n => { Object = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Balance_object>(); } },
                { "pending", n => { Pending = n.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Balance_amount>(global::Soenneker.Stripe.OpenApiClient.Models.Balance_amount.CreateFromDiscriminatorValue)?.AsList(); } },
                { "refund_and_dispute_prefunding", n => { RefundAndDisputePrefunding = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Balance_detail_ungated>(global::Soenneker.Stripe.OpenApiClient.Models.Balance_detail_ungated.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Balance_amount>("available", Available);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Balance_amount>("connect_reserved", ConnectReserved);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Balance_amount_net>("instant_available", InstantAvailable);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Balance_detail>("issuing", Issuing);
            writer.WriteBoolValue("livemode", Livemode);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Balance_object>("object", Object);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Balance_amount>("pending", Pending);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Balance_detail_ungated>("refund_and_dispute_prefunding", RefundAndDisputePrefunding);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
