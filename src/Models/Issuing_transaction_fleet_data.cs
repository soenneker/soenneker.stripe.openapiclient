// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Issuing_transaction_fleet_data : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Answers to prompts presented to cardholder at point of sale.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_transaction_fleet_cardholder_prompt_data? CardholderPromptData { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_transaction_fleet_cardholder_prompt_data CardholderPromptData { get; set; }
#endif
        /// <summary>The type of purchase. One of `fuel_purchase`, `non_fuel_purchase`, or `fuel_and_non_fuel_purchase`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PurchaseType { get; set; }
#nullable restore
#else
        public string PurchaseType { get; set; }
#endif
        /// <summary>More information about the total amount. This information is not guaranteed to be accurate as some merchants may provide unreliable data.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_transaction_fleet_reported_breakdown? ReportedBreakdown { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_transaction_fleet_reported_breakdown ReportedBreakdown { get; set; }
#endif
        /// <summary>The type of fuel service. One of `non_fuel_transaction`, `full_service`, or `self_service`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ServiceType { get; set; }
#nullable restore
#else
        public string ServiceType { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing_transaction_fleet_data"/> and sets the default values.
        /// </summary>
        public Issuing_transaction_fleet_data()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing_transaction_fleet_data"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Issuing_transaction_fleet_data CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Issuing_transaction_fleet_data();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "cardholder_prompt_data", n => { CardholderPromptData = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_transaction_fleet_cardholder_prompt_data>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing_transaction_fleet_cardholder_prompt_data.CreateFromDiscriminatorValue); } },
                { "purchase_type", n => { PurchaseType = n.GetStringValue(); } },
                { "reported_breakdown", n => { ReportedBreakdown = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_transaction_fleet_reported_breakdown>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing_transaction_fleet_reported_breakdown.CreateFromDiscriminatorValue); } },
                { "service_type", n => { ServiceType = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_transaction_fleet_cardholder_prompt_data>("cardholder_prompt_data", CardholderPromptData);
            writer.WriteStringValue("purchase_type", PurchaseType);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_transaction_fleet_reported_breakdown>("reported_breakdown", ReportedBreakdown);
            writer.WriteStringValue("service_type", ServiceType);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
