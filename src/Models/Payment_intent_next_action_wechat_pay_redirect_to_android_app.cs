// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Payment_intent_next_action_wechat_pay_redirect_to_android_app : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>app_id is the APP ID registered on WeChat open platform</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AppId { get; set; }
#nullable restore
#else
        public string AppId { get; set; }
#endif
        /// <summary>nonce_str is a random string</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NonceStr { get; set; }
#nullable restore
#else
        public string NonceStr { get; set; }
#endif
        /// <summary>package is static value</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Package { get; set; }
#nullable restore
#else
        public string Package { get; set; }
#endif
        /// <summary>an unique merchant ID assigned by WeChat Pay</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PartnerId { get; set; }
#nullable restore
#else
        public string PartnerId { get; set; }
#endif
        /// <summary>an unique trading ID assigned by WeChat Pay</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PrepayId { get; set; }
#nullable restore
#else
        public string PrepayId { get; set; }
#endif
        /// <summary>A signature</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Sign { get; set; }
#nullable restore
#else
        public string Sign { get; set; }
#endif
        /// <summary>Specifies the current time in epoch format</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Timestamp { get; set; }
#nullable restore
#else
        public string Timestamp { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent_next_action_wechat_pay_redirect_to_android_app"/> and sets the default values.
        /// </summary>
        public Payment_intent_next_action_wechat_pay_redirect_to_android_app()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent_next_action_wechat_pay_redirect_to_android_app"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent_next_action_wechat_pay_redirect_to_android_app CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent_next_action_wechat_pay_redirect_to_android_app();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "app_id", n => { AppId = n.GetStringValue(); } },
                { "nonce_str", n => { NonceStr = n.GetStringValue(); } },
                { "package", n => { Package = n.GetStringValue(); } },
                { "partner_id", n => { PartnerId = n.GetStringValue(); } },
                { "prepay_id", n => { PrepayId = n.GetStringValue(); } },
                { "sign", n => { Sign = n.GetStringValue(); } },
                { "timestamp", n => { Timestamp = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("app_id", AppId);
            writer.WriteStringValue("nonce_str", NonceStr);
            writer.WriteStringValue("package", Package);
            writer.WriteStringValue("partner_id", PartnerId);
            writer.WriteStringValue("prepay_id", PrepayId);
            writer.WriteStringValue("sign", Sign);
            writer.WriteStringValue("timestamp", Timestamp);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
