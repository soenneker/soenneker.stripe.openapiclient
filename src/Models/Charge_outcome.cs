// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Charge_outcome : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>An enumerated value providing a more detailed explanation on [how to proceed with an error](https://stripe.com/docs/declines#retrying-issuer-declines).</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Charge_outcome_advice_code? AdviceCode { get; set; }
        /// <summary>For charges declined by the network, a 2 digit code which indicates the advice returned by the network on how to proceed with an error.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NetworkAdviceCode { get; set; }
#nullable restore
#else
        public string NetworkAdviceCode { get; set; }
#endif
        /// <summary>For charges declined by the network, a brand specific 2, 3, or 4 digit code which indicates the reason the authorization failed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NetworkDeclineCode { get; set; }
#nullable restore
#else
        public string NetworkDeclineCode { get; set; }
#endif
        /// <summary>Possible values are `approved_by_network`, `declined_by_network`, `not_sent_to_network`, and `reversed_after_approval`. The value `reversed_after_approval` indicates the payment was [blocked by Stripe](https://stripe.com/docs/declines#blocked-payments) after bank authorization, and may temporarily appear as &quot;pending&quot; on a cardholder&apos;s statement.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NetworkStatus { get; set; }
#nullable restore
#else
        public string NetworkStatus { get; set; }
#endif
        /// <summary>An enumerated value providing a more detailed explanation of the outcome&apos;s `type`. Charges blocked by Radar&apos;s default block rule have the value `highest_risk_level`. Charges placed in review by Radar&apos;s default review rule have the value `elevated_risk_level`. Charges authorized, blocked, or placed in review by custom rules have the value `rule`. See [understanding declines](https://stripe.com/docs/declines) for more details.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Reason { get; set; }
#nullable restore
#else
        public string Reason { get; set; }
#endif
        /// <summary>Stripe Radar&apos;s evaluation of the riskiness of the payment. Possible values for evaluated payments are `normal`, `elevated`, `highest`. For non-card payments, and card-based payments predating the public assignment of risk levels, this field will have the value `not_assessed`. In the event of an error in the evaluation, this field will have the value `unknown`. This field is only available with Radar.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RiskLevel { get; set; }
#nullable restore
#else
        public string RiskLevel { get; set; }
#endif
        /// <summary>Stripe Radar&apos;s evaluation of the riskiness of the payment. Possible values for evaluated payments are between 0 and 100. For non-card payments, card-based payments predating the public assignment of risk scores, or in the event of an error during evaluation, this field will not be present. This field is only available with Radar for Fraud Teams.</summary>
        public int? RiskScore { get; set; }
        /// <summary>The ID of the Radar rule that matched the payment, if applicable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Charge_outcome.Charge_outcome_rule? Rule { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Charge_outcome.Charge_outcome_rule Rule { get; set; }
#endif
        /// <summary>A human-readable description of the outcome type and reason, designed for you (the recipient of the payment), not your customer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SellerMessage { get; set; }
#nullable restore
#else
        public string SellerMessage { get; set; }
#endif
        /// <summary>Possible values are `authorized`, `manual_review`, `issuer_declined`, `blocked`, and `invalid`. See [understanding declines](https://stripe.com/docs/declines) and [Radar reviews](https://stripe.com/docs/radar/reviews) for details.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Charge_outcome"/> and sets the default values.
        /// </summary>
        public Charge_outcome()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Charge_outcome"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Charge_outcome CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Charge_outcome();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "advice_code", n => { AdviceCode = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Charge_outcome_advice_code>(); } },
                { "network_advice_code", n => { NetworkAdviceCode = n.GetStringValue(); } },
                { "network_decline_code", n => { NetworkDeclineCode = n.GetStringValue(); } },
                { "network_status", n => { NetworkStatus = n.GetStringValue(); } },
                { "reason", n => { Reason = n.GetStringValue(); } },
                { "risk_level", n => { RiskLevel = n.GetStringValue(); } },
                { "risk_score", n => { RiskScore = n.GetIntValue(); } },
                { "rule", n => { Rule = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Charge_outcome.Charge_outcome_rule>(global::Soenneker.Stripe.OpenApiClient.Models.Charge_outcome.Charge_outcome_rule.CreateFromDiscriminatorValue); } },
                { "seller_message", n => { SellerMessage = n.GetStringValue(); } },
                { "type", n => { Type = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Charge_outcome_advice_code>("advice_code", AdviceCode);
            writer.WriteStringValue("network_advice_code", NetworkAdviceCode);
            writer.WriteStringValue("network_decline_code", NetworkDeclineCode);
            writer.WriteStringValue("network_status", NetworkStatus);
            writer.WriteStringValue("reason", Reason);
            writer.WriteStringValue("risk_level", RiskLevel);
            writer.WriteIntValue("risk_score", RiskScore);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Charge_outcome.Charge_outcome_rule>("rule", Rule);
            writer.WriteStringValue("seller_message", SellerMessage);
            writer.WriteStringValue("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Rule"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Charge_outcome_rule : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Rule"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Rule? Rule { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Rule Rule { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Charge_outcome.Charge_outcome_rule"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Charge_outcome.Charge_outcome_rule CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Charge_outcome.Charge_outcome_rule();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.Rule = new global::Soenneker.Stripe.OpenApiClient.Models.Rule();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(Rule != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(Rule);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Rule>(null, Rule);
                }
            }
        }
    }
}
#pragma warning restore CS0618
