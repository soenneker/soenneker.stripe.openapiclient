// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    /// <summary>
    /// Stripe needs to collect certain pieces of information about each accountcreated. These requirements can differ depending on the account&apos;s country. TheCountry Specs API makes these rules available to your integration.You can also view the information from this API call as [an onlineguide](/docs/connect/required-verification-information).
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Country_spec : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The default currency for this country. This applies to both payment methods and bank accounts.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DefaultCurrency { get; set; }
#nullable restore
#else
        public string DefaultCurrency { get; set; }
#endif
        /// <summary>Unique identifier for the object. Represented as the ISO country code for this country.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Country_spec_object? Object { get; set; }
        /// <summary>Currencies that can be accepted in the specific country (for transfers).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Country_spec_supported_bank_account_currencies? SupportedBankAccountCurrencies { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Country_spec_supported_bank_account_currencies SupportedBankAccountCurrencies { get; set; }
#endif
        /// <summary>Currencies that can be accepted in the specified country (for payments).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? SupportedPaymentCurrencies { get; set; }
#nullable restore
#else
        public List<string> SupportedPaymentCurrencies { get; set; }
#endif
        /// <summary>Payment methods available in the specified country. You may need to enable some payment methods (e.g., [ACH](https://stripe.com/docs/ach)) on your account before they appear in this list. The `stripe` payment method refers to [charging through your platform](https://stripe.com/docs/connect/destination-charges).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? SupportedPaymentMethods { get; set; }
#nullable restore
#else
        public List<string> SupportedPaymentMethods { get; set; }
#endif
        /// <summary>Countries that can accept transfers from the specified country.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? SupportedTransferCountries { get; set; }
#nullable restore
#else
        public List<string> SupportedTransferCountries { get; set; }
#endif
        /// <summary>The verification_fields property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Country_spec_verification_fields? VerificationFields { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Country_spec_verification_fields VerificationFields { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Country_spec"/> and sets the default values.
        /// </summary>
        public Country_spec()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Country_spec"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Country_spec CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Country_spec();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "default_currency", n => { DefaultCurrency = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "object", n => { Object = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Country_spec_object>(); } },
                { "supported_bank_account_currencies", n => { SupportedBankAccountCurrencies = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Country_spec_supported_bank_account_currencies>(global::Soenneker.Stripe.OpenApiClient.Models.Country_spec_supported_bank_account_currencies.CreateFromDiscriminatorValue); } },
                { "supported_payment_currencies", n => { SupportedPaymentCurrencies = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "supported_payment_methods", n => { SupportedPaymentMethods = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "supported_transfer_countries", n => { SupportedTransferCountries = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "verification_fields", n => { VerificationFields = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Country_spec_verification_fields>(global::Soenneker.Stripe.OpenApiClient.Models.Country_spec_verification_fields.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("default_currency", DefaultCurrency);
            writer.WriteStringValue("id", Id);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Country_spec_object>("object", Object);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Country_spec_supported_bank_account_currencies>("supported_bank_account_currencies", SupportedBankAccountCurrencies);
            writer.WriteCollectionOfPrimitiveValues<string>("supported_payment_currencies", SupportedPaymentCurrencies);
            writer.WriteCollectionOfPrimitiveValues<string>("supported_payment_methods", SupportedPaymentMethods);
            writer.WriteCollectionOfPrimitiveValues<string>("supported_transfer_countries", SupportedTransferCountries);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Country_spec_verification_fields>("verification_fields", VerificationFields);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
