// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Issuing_cardholder_authorization_controls : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_cardholder_authorization_controls_allowed_categories?>? AllowedCategories { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_cardholder_authorization_controls_allowed_categories?> AllowedCategories { get; set; }
#endif
        /// <summary>Array of strings containing representing countries from which authorizations will be allowed. Authorizations from merchants in all other countries will be declined. Country codes should be ISO 3166 alpha-2 country codes (e.g. `US`). Cannot be set with `blocked_merchant_countries`. Provide an empty value to unset this control.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AllowedMerchantCountries { get; set; }
#nullable restore
#else
        public List<string> AllowedMerchantCountries { get; set; }
#endif
        /// <summary>Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_cardholder_authorization_controls_blocked_categories?>? BlockedCategories { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_cardholder_authorization_controls_blocked_categories?> BlockedCategories { get; set; }
#endif
        /// <summary>Array of strings containing representing countries from which authorizations will be declined. Country codes should be ISO 3166 alpha-2 country codes (e.g. `US`). Cannot be set with `allowed_merchant_countries`. Provide an empty value to unset this control.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? BlockedMerchantCountries { get; set; }
#nullable restore
#else
        public List<string> BlockedMerchantCountries { get; set; }
#endif
        /// <summary>Limit spending with amount-based rules that apply across this cardholder&apos;s cards.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_cardholder_spending_limit>? SpendingLimits { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_cardholder_spending_limit> SpendingLimits { get; set; }
#endif
        /// <summary>Currency of the amounts within `spending_limits`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SpendingLimitsCurrency { get; set; }
#nullable restore
#else
        public string SpendingLimitsCurrency { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing_cardholder_authorization_controls"/> and sets the default values.
        /// </summary>
        public Issuing_cardholder_authorization_controls()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing_cardholder_authorization_controls"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Issuing_cardholder_authorization_controls CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Issuing_cardholder_authorization_controls();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "allowed_categories", n => { AllowedCategories = n.GetCollectionOfEnumValues<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_cardholder_authorization_controls_allowed_categories>()?.AsList(); } },
                { "allowed_merchant_countries", n => { AllowedMerchantCountries = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "blocked_categories", n => { BlockedCategories = n.GetCollectionOfEnumValues<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_cardholder_authorization_controls_blocked_categories>()?.AsList(); } },
                { "blocked_merchant_countries", n => { BlockedMerchantCountries = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "spending_limits", n => { SpendingLimits = n.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_cardholder_spending_limit>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing_cardholder_spending_limit.CreateFromDiscriminatorValue)?.AsList(); } },
                { "spending_limits_currency", n => { SpendingLimitsCurrency = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfEnumValues<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_cardholder_authorization_controls_allowed_categories>("allowed_categories", AllowedCategories);
            writer.WriteCollectionOfPrimitiveValues<string>("allowed_merchant_countries", AllowedMerchantCountries);
            writer.WriteCollectionOfEnumValues<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_cardholder_authorization_controls_blocked_categories>("blocked_categories", BlockedCategories);
            writer.WriteCollectionOfPrimitiveValues<string>("blocked_merchant_countries", BlockedMerchantCountries);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_cardholder_spending_limit>("spending_limits", SpendingLimits);
            writer.WriteStringValue("spending_limits_currency", SpendingLimitsCurrency);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
