// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    /// <summary>
    /// Source mandate notifications should be created when a notification related toa source mandate must be sent to the payer. They will trigger a webhook ordeliver an email to the customer.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Source_mandate_notification : IAdditionalDataHolder, IParsable
    {
        /// <summary>The acss_debit property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_mandate_notification_acss_debit_data? AcssDebit { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_mandate_notification_acss_debit_data AcssDebit { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for Â¥1, Japanese Yen being a zero-decimal currency) representing the amount associated with the mandate notification. The amount is expressed in the currency of the underlying source. Required if the notification type is `debit_initiated`.</summary>
        public int? Amount { get; set; }
        /// <summary>The bacs_debit property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_mandate_notification_bacs_debit_data? BacsDebit { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_mandate_notification_bacs_debit_data BacsDebit { get; set; }
#endif
        /// <summary>Time at which the object was created. Measured in seconds since the Unix epoch.</summary>
        public int? Created { get; set; }
        /// <summary>Unique identifier for the object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.</summary>
        public bool? Livemode { get; set; }
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_mandate_notification_object? Object { get; set; }
        /// <summary>The reason of the mandate notification. Valid reasons are `mandate_confirmed` or `debit_initiated`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Reason { get; set; }
#nullable restore
#else
        public string Reason { get; set; }
#endif
        /// <summary>The sepa_debit property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_mandate_notification_sepa_debit_data? SepaDebit { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_mandate_notification_sepa_debit_data SepaDebit { get; set; }
#endif
        /// <summary>`Source` objects allow you to accept a variety of payment methods. Theyrepresent a customer&apos;s payment instrument, and can be used with the Stripe APIjust like a `Card` object: once chargeable, they can be charged, or can beattached to customers.Stripe doesn&apos;t recommend using the deprecated [Sources API](https://stripe.com/docs/api/sources).We recommend that you adopt the [PaymentMethods API](https://stripe.com/docs/api/payment_methods).This newer API provides access to our latest features and payment method types.Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources &amp; Customers](https://stripe.com/docs/sources/customers).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source? Source { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source Source { get; set; }
#endif
        /// <summary>The status of the mandate notification. Valid statuses are `pending` or `submitted`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>The type of source this mandate notification is attached to. Should be the source type identifier code for the payment method, such as `three_d_secure`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Source_mandate_notification"/> and sets the default values.
        /// </summary>
        public Source_mandate_notification()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Source_mandate_notification"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Source_mandate_notification CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Source_mandate_notification();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "acss_debit", n => { AcssDebit = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_mandate_notification_acss_debit_data>(global::Soenneker.Stripe.OpenApiClient.Models.Source_mandate_notification_acss_debit_data.CreateFromDiscriminatorValue); } },
                { "amount", n => { Amount = n.GetIntValue(); } },
                { "bacs_debit", n => { BacsDebit = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_mandate_notification_bacs_debit_data>(global::Soenneker.Stripe.OpenApiClient.Models.Source_mandate_notification_bacs_debit_data.CreateFromDiscriminatorValue); } },
                { "created", n => { Created = n.GetIntValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "livemode", n => { Livemode = n.GetBoolValue(); } },
                { "object", n => { Object = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_mandate_notification_object>(); } },
                { "reason", n => { Reason = n.GetStringValue(); } },
                { "sepa_debit", n => { SepaDebit = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_mandate_notification_sepa_debit_data>(global::Soenneker.Stripe.OpenApiClient.Models.Source_mandate_notification_sepa_debit_data.CreateFromDiscriminatorValue); } },
                { "source", n => { Source = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source>(global::Soenneker.Stripe.OpenApiClient.Models.Source.CreateFromDiscriminatorValue); } },
                { "status", n => { Status = n.GetStringValue(); } },
                { "type", n => { Type = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_mandate_notification_acss_debit_data>("acss_debit", AcssDebit);
            writer.WriteIntValue("amount", Amount);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_mandate_notification_bacs_debit_data>("bacs_debit", BacsDebit);
            writer.WriteIntValue("created", Created);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("livemode", Livemode);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_mandate_notification_object>("object", Object);
            writer.WriteStringValue("reason", Reason);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_mandate_notification_sepa_debit_data>("sepa_debit", SepaDebit);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source>("source", Source);
            writer.WriteStringValue("status", Status);
            writer.WriteStringValue("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
