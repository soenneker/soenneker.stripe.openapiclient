// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    /// <summary>
    /// ConfirmationTokens help transport client side data collected by Stripe JS overto your server for confirming a PaymentIntent or SetupIntent. If the confirmationis successful, values present on the ConfirmationToken are written onto the Intent.To learn more about how to use ConfirmationToken, visit the related guides:- [Finalize payments on the server](https://stripe.com/docs/payments/finalize-payments-on-the-server)- [Build two-step confirmation](https://stripe.com/docs/payments/build-a-two-step-confirmation).
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Confirmation_token : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Time at which the object was created. Measured in seconds since the Unix epoch.</summary>
        public int? Created { get; set; }
        /// <summary>Time at which this ConfirmationToken expires and can no longer be used to confirm a PaymentIntent or SetupIntent.</summary>
        public int? ExpiresAt { get; set; }
        /// <summary>Unique identifier for the object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.</summary>
        public bool? Livemode { get; set; }
        /// <summary>Data used for generating a Mandate.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Confirmation_tokens_resource_mandate_data? MandateData { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Confirmation_tokens_resource_mandate_data MandateData { get; set; }
#endif
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Confirmation_token_object? Object { get; set; }
        /// <summary>ID of the PaymentIntent that this ConfirmationToken was used to confirm, or null if this ConfirmationToken has not yet been used.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PaymentIntent { get; set; }
#nullable restore
#else
        public string PaymentIntent { get; set; }
#endif
        /// <summary>Payment-method-specific configuration for this ConfirmationToken.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Confirmation_tokens_resource_payment_method_options? PaymentMethodOptions { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Confirmation_tokens_resource_payment_method_options PaymentMethodOptions { get; set; }
#endif
        /// <summary>Payment details collected by the Payment Element, used to create a PaymentMethod when a PaymentIntent or SetupIntent is confirmed with this ConfirmationToken.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Confirmation_tokens_resource_payment_method_preview? PaymentMethodPreview { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Confirmation_tokens_resource_payment_method_preview PaymentMethodPreview { get; set; }
#endif
        /// <summary>Return URL used to confirm the Intent.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReturnUrl { get; set; }
#nullable restore
#else
        public string ReturnUrl { get; set; }
#endif
        /// <summary>Indicates that you intend to make future payments with this ConfirmationToken&apos;s payment method.The presence of this property will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent&apos;s Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Confirmation_token_setup_future_usage? SetupFutureUsage { get; set; }
        /// <summary>ID of the SetupIntent that this ConfirmationToken was used to confirm, or null if this ConfirmationToken has not yet been used.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SetupIntent { get; set; }
#nullable restore
#else
        public string SetupIntent { get; set; }
#endif
        /// <summary>Shipping information collected on this ConfirmationToken.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Confirmation_tokens_resource_shipping? Shipping { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Confirmation_tokens_resource_shipping Shipping { get; set; }
#endif
        /// <summary>Indicates whether the Stripe SDK is used to handle confirmation flow. Defaults to `true` on ConfirmationToken.</summary>
        public bool? UseStripeSdk { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Confirmation_token"/> and sets the default values.
        /// </summary>
        public Confirmation_token()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Confirmation_token"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Confirmation_token CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Confirmation_token();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "created", n => { Created = n.GetIntValue(); } },
                { "expires_at", n => { ExpiresAt = n.GetIntValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "livemode", n => { Livemode = n.GetBoolValue(); } },
                { "mandate_data", n => { MandateData = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Confirmation_tokens_resource_mandate_data>(global::Soenneker.Stripe.OpenApiClient.Models.Confirmation_tokens_resource_mandate_data.CreateFromDiscriminatorValue); } },
                { "object", n => { Object = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Confirmation_token_object>(); } },
                { "payment_intent", n => { PaymentIntent = n.GetStringValue(); } },
                { "payment_method_options", n => { PaymentMethodOptions = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Confirmation_tokens_resource_payment_method_options>(global::Soenneker.Stripe.OpenApiClient.Models.Confirmation_tokens_resource_payment_method_options.CreateFromDiscriminatorValue); } },
                { "payment_method_preview", n => { PaymentMethodPreview = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Confirmation_tokens_resource_payment_method_preview>(global::Soenneker.Stripe.OpenApiClient.Models.Confirmation_tokens_resource_payment_method_preview.CreateFromDiscriminatorValue); } },
                { "return_url", n => { ReturnUrl = n.GetStringValue(); } },
                { "setup_future_usage", n => { SetupFutureUsage = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Confirmation_token_setup_future_usage>(); } },
                { "setup_intent", n => { SetupIntent = n.GetStringValue(); } },
                { "shipping", n => { Shipping = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Confirmation_tokens_resource_shipping>(global::Soenneker.Stripe.OpenApiClient.Models.Confirmation_tokens_resource_shipping.CreateFromDiscriminatorValue); } },
                { "use_stripe_sdk", n => { UseStripeSdk = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("created", Created);
            writer.WriteIntValue("expires_at", ExpiresAt);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("livemode", Livemode);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Confirmation_tokens_resource_mandate_data>("mandate_data", MandateData);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Confirmation_token_object>("object", Object);
            writer.WriteStringValue("payment_intent", PaymentIntent);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Confirmation_tokens_resource_payment_method_options>("payment_method_options", PaymentMethodOptions);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Confirmation_tokens_resource_payment_method_preview>("payment_method_preview", PaymentMethodPreview);
            writer.WriteStringValue("return_url", ReturnUrl);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Confirmation_token_setup_future_usage>("setup_future_usage", SetupFutureUsage);
            writer.WriteStringValue("setup_intent", SetupIntent);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Confirmation_tokens_resource_shipping>("shipping", Shipping);
            writer.WriteBoolValue("use_stripe_sdk", UseStripeSdk);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
