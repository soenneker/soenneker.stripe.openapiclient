// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    /// <summary>
    /// Some payment methods have no required amount that a customer must send.Customers can be instructed to send any amount, and it can be made up ofmultiple transactions. As such, sources can have multiple associatedtransactions.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Source_transaction : IAdditionalDataHolder, IParsable
    {
        /// <summary>The ach_credit_transfer property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_transaction_ach_credit_transfer_data? AchCreditTransfer { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_transaction_ach_credit_transfer_data AchCreditTransfer { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for Â¥1, Japanese Yen being a zero-decimal currency) representing the amount your customer has pushed to the receiver.</summary>
        public int? Amount { get; set; }
        /// <summary>The chf_credit_transfer property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_transaction_chf_credit_transfer_data? ChfCreditTransfer { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_transaction_chf_credit_transfer_data ChfCreditTransfer { get; set; }
#endif
        /// <summary>Time at which the object was created. Measured in seconds since the Unix epoch.</summary>
        public int? Created { get; set; }
        /// <summary>Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>The gbp_credit_transfer property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_transaction_gbp_credit_transfer_data? GbpCreditTransfer { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_transaction_gbp_credit_transfer_data GbpCreditTransfer { get; set; }
#endif
        /// <summary>Unique identifier for the object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.</summary>
        public bool? Livemode { get; set; }
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_transaction_object? Object { get; set; }
        /// <summary>The paper_check property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_transaction_paper_check_data? PaperCheck { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_transaction_paper_check_data PaperCheck { get; set; }
#endif
        /// <summary>The sepa_credit_transfer property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_transaction_sepa_credit_transfer_data? SepaCreditTransfer { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_transaction_sepa_credit_transfer_data SepaCreditTransfer { get; set; }
#endif
        /// <summary>The ID of the source this transaction is attached to.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Source { get; set; }
#nullable restore
#else
        public string Source { get; set; }
#endif
        /// <summary>The status of the transaction, one of `succeeded`, `pending`, or `failed`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>The type of source this transaction is attached to.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_transaction_type? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Source_transaction"/> and sets the default values.
        /// </summary>
        public Source_transaction()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Source_transaction"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Source_transaction CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Source_transaction();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "ach_credit_transfer", n => { AchCreditTransfer = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_transaction_ach_credit_transfer_data>(global::Soenneker.Stripe.OpenApiClient.Models.Source_transaction_ach_credit_transfer_data.CreateFromDiscriminatorValue); } },
                { "amount", n => { Amount = n.GetIntValue(); } },
                { "chf_credit_transfer", n => { ChfCreditTransfer = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_transaction_chf_credit_transfer_data>(global::Soenneker.Stripe.OpenApiClient.Models.Source_transaction_chf_credit_transfer_data.CreateFromDiscriminatorValue); } },
                { "created", n => { Created = n.GetIntValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "gbp_credit_transfer", n => { GbpCreditTransfer = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_transaction_gbp_credit_transfer_data>(global::Soenneker.Stripe.OpenApiClient.Models.Source_transaction_gbp_credit_transfer_data.CreateFromDiscriminatorValue); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "livemode", n => { Livemode = n.GetBoolValue(); } },
                { "object", n => { Object = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_transaction_object>(); } },
                { "paper_check", n => { PaperCheck = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_transaction_paper_check_data>(global::Soenneker.Stripe.OpenApiClient.Models.Source_transaction_paper_check_data.CreateFromDiscriminatorValue); } },
                { "sepa_credit_transfer", n => { SepaCreditTransfer = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_transaction_sepa_credit_transfer_data>(global::Soenneker.Stripe.OpenApiClient.Models.Source_transaction_sepa_credit_transfer_data.CreateFromDiscriminatorValue); } },
                { "source", n => { Source = n.GetStringValue(); } },
                { "status", n => { Status = n.GetStringValue(); } },
                { "type", n => { Type = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_transaction_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_transaction_ach_credit_transfer_data>("ach_credit_transfer", AchCreditTransfer);
            writer.WriteIntValue("amount", Amount);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_transaction_chf_credit_transfer_data>("chf_credit_transfer", ChfCreditTransfer);
            writer.WriteIntValue("created", Created);
            writer.WriteStringValue("currency", Currency);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_transaction_gbp_credit_transfer_data>("gbp_credit_transfer", GbpCreditTransfer);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("livemode", Livemode);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_transaction_object>("object", Object);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_transaction_paper_check_data>("paper_check", PaperCheck);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_transaction_sepa_credit_transfer_data>("sepa_credit_transfer", SepaCreditTransfer);
            writer.WriteStringValue("source", Source);
            writer.WriteStringValue("status", Status);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_transaction_type>("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
