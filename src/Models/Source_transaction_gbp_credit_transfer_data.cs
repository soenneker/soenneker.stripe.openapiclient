// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Source_transaction_gbp_credit_transfer_data : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Bank account fingerprint associated with the Stripe owned bank account receiving the transfer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Fingerprint { get; set; }
#nullable restore
#else
        public string Fingerprint { get; set; }
#endif
        /// <summary>The credit transfer rails the sender used to push this transfer. The possible rails are: Faster Payments, BACS, CHAPS, and wire transfers. Currently only Faster Payments is supported.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FundingMethod { get; set; }
#nullable restore
#else
        public string FundingMethod { get; set; }
#endif
        /// <summary>Last 4 digits of sender account number associated with the transfer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Last4 { get; set; }
#nullable restore
#else
        public string Last4 { get; set; }
#endif
        /// <summary>Sender entered arbitrary information about the transfer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Reference { get; set; }
#nullable restore
#else
        public string Reference { get; set; }
#endif
        /// <summary>Sender account number associated with the transfer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SenderAccountNumber { get; set; }
#nullable restore
#else
        public string SenderAccountNumber { get; set; }
#endif
        /// <summary>Sender name associated with the transfer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SenderName { get; set; }
#nullable restore
#else
        public string SenderName { get; set; }
#endif
        /// <summary>Sender sort code associated with the transfer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SenderSortCode { get; set; }
#nullable restore
#else
        public string SenderSortCode { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Source_transaction_gbp_credit_transfer_data"/> and sets the default values.
        /// </summary>
        public Source_transaction_gbp_credit_transfer_data()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Source_transaction_gbp_credit_transfer_data"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Source_transaction_gbp_credit_transfer_data CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Source_transaction_gbp_credit_transfer_data();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "fingerprint", n => { Fingerprint = n.GetStringValue(); } },
                { "funding_method", n => { FundingMethod = n.GetStringValue(); } },
                { "last4", n => { Last4 = n.GetStringValue(); } },
                { "reference", n => { Reference = n.GetStringValue(); } },
                { "sender_account_number", n => { SenderAccountNumber = n.GetStringValue(); } },
                { "sender_name", n => { SenderName = n.GetStringValue(); } },
                { "sender_sort_code", n => { SenderSortCode = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("fingerprint", Fingerprint);
            writer.WriteStringValue("funding_method", FundingMethod);
            writer.WriteStringValue("last4", Last4);
            writer.WriteStringValue("reference", Reference);
            writer.WriteStringValue("sender_account_number", SenderAccountNumber);
            writer.WriteStringValue("sender_name", SenderName);
            writer.WriteStringValue("sender_sort_code", SenderSortCode);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
