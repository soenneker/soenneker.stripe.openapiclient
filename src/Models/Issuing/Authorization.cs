// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models.Issuing
{
    /// <summary>
    /// When an [issued card](https://stripe.com/docs/issuing) is used to make a purchase, an Issuing `Authorization`object is created. [Authorizations](https://stripe.com/docs/issuing/purchases/authorizations) must be approved for thepurchase to be completed successfully.Related guide: [Issued card authorizations](https://stripe.com/docs/issuing/purchases/authorizations)
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Authorization : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The total amount that was authorized or rejected. This amount is in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). `amount` should be the same as `merchant_amount`, unless `currency` and `merchant_currency` are different.</summary>
        public int? Amount { get; set; }
        /// <summary>Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_amount_details? AmountDetails { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_amount_details AmountDetails { get; set; }
#endif
        /// <summary>Whether the authorization has been approved.</summary>
        public bool? Approved { get; set; }
        /// <summary>How the card details were provided.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Authorization_authorization_method? AuthorizationMethod { get; set; }
        /// <summary>List of balance transactions associated with this authorization.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction>? BalanceTransactions { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction> BalanceTransactions { get; set; }
#endif
        /// <summary>You can [create physical or virtual cards](https://stripe.com/docs/issuing) that are issued to cardholders.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card? Card { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card Card { get; set; }
#endif
        /// <summary>The cardholder to whom this authorization belongs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Authorization.Authorization_cardholder? Cardholder { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Authorization.Authorization_cardholder Cardholder { get; set; }
#endif
        /// <summary>Time at which the object was created. Measured in seconds since the Unix epoch.</summary>
        public int? Created { get; set; }
        /// <summary>The currency of the cardholder. This currency can be different from the currency presented at authorization and the `merchant_currency` field on this authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>Fleet-specific information for authorizations using Fleet cards.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_fleet_data? Fleet { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_fleet_data Fleet { get; set; }
#endif
        /// <summary>Fraud challenges sent to the cardholder, if this authorization was declined for fraud risk reasons.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_fraud_challenge>? FraudChallenges { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_fraud_challenge> FraudChallenges { get; set; }
#endif
        /// <summary>Information about fuel that was purchased with this transaction. Typically this information is received from the merchant after the authorization has been approved and the fuel dispensed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_fuel_data? Fuel { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_fuel_data Fuel { get; set; }
#endif
        /// <summary>Unique identifier for the object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.</summary>
        public bool? Livemode { get; set; }
        /// <summary>The total amount that was authorized or rejected. This amount is in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). `merchant_amount` should be the same as `amount`, unless `merchant_currency` and `currency` are different.</summary>
        public int? MerchantAmount { get; set; }
        /// <summary>The local currency that was presented to the cardholder for the authorization. This currency can be different from the cardholder currency and the `currency` field on this authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MerchantCurrency { get; set; }
#nullable restore
#else
        public string MerchantCurrency { get; set; }
#endif
        /// <summary>The merchant_data property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_merchant_data? MerchantData { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_merchant_data MerchantData { get; set; }
#endif
        /// <summary>Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Authorization_metadata? Metadata { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Authorization_metadata Metadata { get; set; }
#endif
        /// <summary>Details about the authorization, such as identifiers, set by the card network.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_network_data? NetworkData { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_network_data NetworkData { get; set; }
#endif
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Authorization_object? Object { get; set; }
        /// <summary>The pending authorization request. This field will only be non-null during an `issuing_authorization.request` webhook.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_pending_request? PendingRequest { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_pending_request PendingRequest { get; set; }
#endif
        /// <summary>History of every time a `pending_request` authorization was approved/declined, either by you directly or by Stripe (e.g. based on your spending_controls). If the merchant changes the authorization by performing an incremental authorization, you can look at this field to see the previous requests for the authorization. This field can be helpful in determining why a given authorization was approved/declined.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_request>? RequestHistory { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_request> RequestHistory { get; set; }
#endif
        /// <summary>The current status of the authorization in its lifecycle.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Authorization_status? Status { get; set; }
        /// <summary>[Token](https://stripe.com/docs/api/issuing/tokens/object) object used for this authorization. If a network token was not used for this authorization, this field will be null.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Authorization.Authorization_token? Token { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Authorization.Authorization_token Token { get; set; }
#endif
        /// <summary>List of [transactions](https://stripe.com/docs/api/issuing/transactions) associated with this authorization.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Transaction>? Transactions { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Transaction> Transactions { get; set; }
#endif
        /// <summary>[Treasury](https://stripe.com/docs/api/treasury) details related to this authorization if it was created on a [FinancialAccount](https://stripe.com/docs/api/treasury/financial_accounts).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_treasury? Treasury { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_treasury Treasury { get; set; }
#endif
        /// <summary>The verification_data property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_verification_data? VerificationData { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_verification_data VerificationData { get; set; }
#endif
        /// <summary>Whether the authorization bypassed fraud risk checks because the cardholder has previously completed a fraud challenge on a similar high-risk authorization from the same merchant.</summary>
        public bool? VerifiedByFraudChallenge { get; set; }
        /// <summary>The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`. Will populate as `null` when no digital wallet was utilized.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Wallet { get; set; }
#nullable restore
#else
        public string Wallet { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Authorization"/> and sets the default values.
        /// </summary>
        public Authorization()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Authorization"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Authorization CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Authorization();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount", n => { Amount = n.GetIntValue(); } },
                { "amount_details", n => { AmountDetails = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_amount_details>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_amount_details.CreateFromDiscriminatorValue); } },
                { "approved", n => { Approved = n.GetBoolValue(); } },
                { "authorization_method", n => { AuthorizationMethod = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Authorization_authorization_method>(); } },
                { "balance_transactions", n => { BalanceTransactions = n.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction>(global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction.CreateFromDiscriminatorValue)?.AsList(); } },
                { "card", n => { Card = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card.CreateFromDiscriminatorValue); } },
                { "cardholder", n => { Cardholder = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Authorization.Authorization_cardholder>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Authorization.Authorization_cardholder.CreateFromDiscriminatorValue); } },
                { "created", n => { Created = n.GetIntValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "fleet", n => { Fleet = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_fleet_data>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_fleet_data.CreateFromDiscriminatorValue); } },
                { "fraud_challenges", n => { FraudChallenges = n.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_fraud_challenge>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_fraud_challenge.CreateFromDiscriminatorValue)?.AsList(); } },
                { "fuel", n => { Fuel = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_fuel_data>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_fuel_data.CreateFromDiscriminatorValue); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "livemode", n => { Livemode = n.GetBoolValue(); } },
                { "merchant_amount", n => { MerchantAmount = n.GetIntValue(); } },
                { "merchant_currency", n => { MerchantCurrency = n.GetStringValue(); } },
                { "merchant_data", n => { MerchantData = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_merchant_data>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_merchant_data.CreateFromDiscriminatorValue); } },
                { "metadata", n => { Metadata = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Authorization_metadata>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Authorization_metadata.CreateFromDiscriminatorValue); } },
                { "network_data", n => { NetworkData = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_network_data>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_network_data.CreateFromDiscriminatorValue); } },
                { "object", n => { Object = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Authorization_object>(); } },
                { "pending_request", n => { PendingRequest = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_pending_request>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_pending_request.CreateFromDiscriminatorValue); } },
                { "request_history", n => { RequestHistory = n.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_request>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_request.CreateFromDiscriminatorValue)?.AsList(); } },
                { "status", n => { Status = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Authorization_status>(); } },
                { "token", n => { Token = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Authorization.Authorization_token>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Authorization.Authorization_token.CreateFromDiscriminatorValue); } },
                { "transactions", n => { Transactions = n.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Transaction>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Transaction.CreateFromDiscriminatorValue)?.AsList(); } },
                { "treasury", n => { Treasury = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_treasury>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_treasury.CreateFromDiscriminatorValue); } },
                { "verification_data", n => { VerificationData = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_verification_data>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_verification_data.CreateFromDiscriminatorValue); } },
                { "verified_by_fraud_challenge", n => { VerifiedByFraudChallenge = n.GetBoolValue(); } },
                { "wallet", n => { Wallet = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("amount", Amount);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_amount_details>("amount_details", AmountDetails);
            writer.WriteBoolValue("approved", Approved);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Authorization_authorization_method>("authorization_method", AuthorizationMethod);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction>("balance_transactions", BalanceTransactions);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card>("card", Card);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Authorization.Authorization_cardholder>("cardholder", Cardholder);
            writer.WriteIntValue("created", Created);
            writer.WriteStringValue("currency", Currency);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_fleet_data>("fleet", Fleet);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_fraud_challenge>("fraud_challenges", FraudChallenges);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_fuel_data>("fuel", Fuel);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("livemode", Livemode);
            writer.WriteIntValue("merchant_amount", MerchantAmount);
            writer.WriteStringValue("merchant_currency", MerchantCurrency);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_merchant_data>("merchant_data", MerchantData);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Authorization_metadata>("metadata", Metadata);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_network_data>("network_data", NetworkData);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Authorization_object>("object", Object);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_pending_request>("pending_request", PendingRequest);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_request>("request_history", RequestHistory);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Authorization_status>("status", Status);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Authorization.Authorization_token>("token", Token);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Transaction>("transactions", Transactions);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_treasury>("treasury", Treasury);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_verification_data>("verification_data", VerificationData);
            writer.WriteBoolValue("verified_by_fraud_challenge", VerifiedByFraudChallenge);
            writer.WriteStringValue("wallet", Wallet);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Cardholder"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Authorization_cardholder : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Cardholder"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Cardholder? Cardholder { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Cardholder Cardholder { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Authorization.Authorization_cardholder"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Authorization.Authorization_cardholder CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Authorization.Authorization_cardholder();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.Cardholder = new global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Cardholder();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(Cardholder != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(Cardholder);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Cardholder>(null, Cardholder);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Token"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Authorization_token : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Token"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Token? Token { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Token Token { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Authorization.Authorization_token"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Authorization.Authorization_token CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Authorization.Authorization_token();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.Token = new global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Token();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(Token != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(Token);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Token>(null, Token);
                }
            }
        }
    }
}
#pragma warning restore CS0618
