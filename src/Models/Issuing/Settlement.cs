// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models.Issuing
{
    /// <summary>
    /// When a non-stripe BIN is used, any use of an [issued card](https://stripe.com/docs/issuing) must be settled directly with the card network. The net amount owed is represented by an Issuing `Settlement` object.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Settlement : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The Bank Identification Number reflecting this settlement record.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Bin { get; set; }
#nullable restore
#else
        public string Bin { get; set; }
#endif
        /// <summary>The date that the transactions are cleared and posted to user&apos;s accounts.</summary>
        public int? ClearingDate { get; set; }
        /// <summary>Time at which the object was created. Measured in seconds since the Unix epoch.</summary>
        public int? Created { get; set; }
        /// <summary>Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>Unique identifier for the object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The total interchange received as reimbursement for the transactions.</summary>
        public int? InterchangeFeesAmount { get; set; }
        /// <summary>Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.</summary>
        public bool? Livemode { get; set; }
        /// <summary>Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Settlement_metadata? Metadata { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Settlement_metadata Metadata { get; set; }
#endif
        /// <summary>The total net amount required to settle with the network.</summary>
        public int? NetTotalAmount { get; set; }
        /// <summary>The card network for this settlement report. One of [&quot;visa&quot;, &quot;maestro&quot;]</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Settlement_network? Network { get; set; }
        /// <summary>The total amount of fees owed to the network.</summary>
        public int? NetworkFeesAmount { get; set; }
        /// <summary>The Settlement Identification Number assigned by the network.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NetworkSettlementIdentifier { get; set; }
#nullable restore
#else
        public string NetworkSettlementIdentifier { get; set; }
#endif
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Settlement_object? Object { get; set; }
        /// <summary>One of `international` or `uk_national_net`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SettlementService { get; set; }
#nullable restore
#else
        public string SettlementService { get; set; }
#endif
        /// <summary>The current processing status of this settlement.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Settlement_status? Status { get; set; }
        /// <summary>The total transaction amount reflected in this settlement.</summary>
        public int? TransactionAmount { get; set; }
        /// <summary>The total number of transactions reflected in this settlement.</summary>
        public int? TransactionCount { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Settlement"/> and sets the default values.
        /// </summary>
        public Settlement()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Settlement"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Settlement CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Settlement();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "bin", n => { Bin = n.GetStringValue(); } },
                { "clearing_date", n => { ClearingDate = n.GetIntValue(); } },
                { "created", n => { Created = n.GetIntValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "interchange_fees_amount", n => { InterchangeFeesAmount = n.GetIntValue(); } },
                { "livemode", n => { Livemode = n.GetBoolValue(); } },
                { "metadata", n => { Metadata = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Settlement_metadata>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Settlement_metadata.CreateFromDiscriminatorValue); } },
                { "net_total_amount", n => { NetTotalAmount = n.GetIntValue(); } },
                { "network", n => { Network = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Settlement_network>(); } },
                { "network_fees_amount", n => { NetworkFeesAmount = n.GetIntValue(); } },
                { "network_settlement_identifier", n => { NetworkSettlementIdentifier = n.GetStringValue(); } },
                { "object", n => { Object = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Settlement_object>(); } },
                { "settlement_service", n => { SettlementService = n.GetStringValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Settlement_status>(); } },
                { "transaction_amount", n => { TransactionAmount = n.GetIntValue(); } },
                { "transaction_count", n => { TransactionCount = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("bin", Bin);
            writer.WriteIntValue("clearing_date", ClearingDate);
            writer.WriteIntValue("created", Created);
            writer.WriteStringValue("currency", Currency);
            writer.WriteStringValue("id", Id);
            writer.WriteIntValue("interchange_fees_amount", InterchangeFeesAmount);
            writer.WriteBoolValue("livemode", Livemode);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Settlement_metadata>("metadata", Metadata);
            writer.WriteIntValue("net_total_amount", NetTotalAmount);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Settlement_network>("network", Network);
            writer.WriteIntValue("network_fees_amount", NetworkFeesAmount);
            writer.WriteStringValue("network_settlement_identifier", NetworkSettlementIdentifier);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Settlement_object>("object", Object);
            writer.WriteStringValue("settlement_service", SettlementService);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Settlement_status>("status", Status);
            writer.WriteIntValue("transaction_amount", TransactionAmount);
            writer.WriteIntValue("transaction_count", TransactionCount);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
