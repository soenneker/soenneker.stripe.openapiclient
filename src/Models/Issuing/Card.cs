// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models.Issuing
{
    /// <summary>
    /// You can [create physical or virtual cards](https://stripe.com/docs/issuing) that are issued to cardholders.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Card : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The brand of the card.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Brand { get; set; }
#nullable restore
#else
        public string Brand { get; set; }
#endif
        /// <summary>The reason why the card was canceled.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card_cancellation_reason? CancellationReason { get; set; }
        /// <summary>An Issuing `Cardholder` object represents an individual or business entity who is [issued](https://stripe.com/docs/issuing) cards.Related guide: [How to create a cardholder](https://stripe.com/docs/issuing/cards/virtual/issue-cards#create-cardholder)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Cardholder? Cardholder { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Cardholder Cardholder { get; set; }
#endif
        /// <summary>Time at which the object was created. Measured in seconds since the Unix epoch.</summary>
        public int? Created { get; set; }
        /// <summary>Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Supported currencies are `usd` in the US, `eur` in the EU, and `gbp` in the UK.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>The card&apos;s CVC. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it&apos;s only available via the [&quot;Retrieve a card&quot; endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via &quot;List all cards&quot; or any other endpoint.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Cvc { get; set; }
#nullable restore
#else
        public string Cvc { get; set; }
#endif
        /// <summary>The expiration month of the card.</summary>
        public int? ExpMonth { get; set; }
        /// <summary>The expiration year of the card.</summary>
        public int? ExpYear { get; set; }
        /// <summary>The financial account this card is attached to.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FinancialAccount { get; set; }
#nullable restore
#else
        public string FinancialAccount { get; set; }
#endif
        /// <summary>Unique identifier for the object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The last 4 digits of the card number.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Last4 { get; set; }
#nullable restore
#else
        public string Last4 { get; set; }
#endif
        /// <summary>Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.</summary>
        public bool? Livemode { get; set; }
        /// <summary>Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card_metadata? Metadata { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card_metadata Metadata { get; set; }
#endif
        /// <summary>The full unredacted card number. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it&apos;s only available via the [&quot;Retrieve a card&quot; endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via &quot;List all cards&quot; or any other endpoint.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Number { get; set; }
#nullable restore
#else
        public string Number { get; set; }
#endif
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card_object? Object { get; set; }
        /// <summary>The personalization design object belonging to this card.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card.Card_personalization_design? PersonalizationDesign { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card.Card_personalization_design PersonalizationDesign { get; set; }
#endif
        /// <summary>The latest card that replaces this card, if any.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card.Card_replaced_by? ReplacedBy { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card.Card_replaced_by ReplacedBy { get; set; }
#endif
        /// <summary>The card this card replaces, if any.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card.Card_replacement_for? ReplacementFor { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card.Card_replacement_for ReplacementFor { get; set; }
#endif
        /// <summary>The reason why the previous card needed to be replaced.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card_replacement_reason? ReplacementReason { get; set; }
        /// <summary>Where and how the card will be shipped.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_card_shipping? Shipping { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_card_shipping Shipping { get; set; }
#endif
        /// <summary>The spending_controls property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_card_authorization_controls? SpendingControls { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_card_authorization_controls SpendingControls { get; set; }
#endif
        /// <summary>Whether authorizations can be approved on this card. May be blocked from activating cards depending on past-due Cardholder requirements. Defaults to `inactive`.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card_status? Status { get; set; }
        /// <summary>The type of the card.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card_type? Type { get; set; }
        /// <summary>Information relating to digital wallets (like Apple Pay and Google Pay).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_card_wallets? Wallets { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_card_wallets Wallets { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card"/> and sets the default values.
        /// </summary>
        public Card()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "brand", n => { Brand = n.GetStringValue(); } },
                { "cancellation_reason", n => { CancellationReason = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card_cancellation_reason>(); } },
                { "cardholder", n => { Cardholder = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Cardholder>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Cardholder.CreateFromDiscriminatorValue); } },
                { "created", n => { Created = n.GetIntValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "cvc", n => { Cvc = n.GetStringValue(); } },
                { "exp_month", n => { ExpMonth = n.GetIntValue(); } },
                { "exp_year", n => { ExpYear = n.GetIntValue(); } },
                { "financial_account", n => { FinancialAccount = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "last4", n => { Last4 = n.GetStringValue(); } },
                { "livemode", n => { Livemode = n.GetBoolValue(); } },
                { "metadata", n => { Metadata = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card_metadata>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card_metadata.CreateFromDiscriminatorValue); } },
                { "number", n => { Number = n.GetStringValue(); } },
                { "object", n => { Object = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card_object>(); } },
                { "personalization_design", n => { PersonalizationDesign = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card.Card_personalization_design>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card.Card_personalization_design.CreateFromDiscriminatorValue); } },
                { "replaced_by", n => { ReplacedBy = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card.Card_replaced_by>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card.Card_replaced_by.CreateFromDiscriminatorValue); } },
                { "replacement_for", n => { ReplacementFor = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card.Card_replacement_for>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card.Card_replacement_for.CreateFromDiscriminatorValue); } },
                { "replacement_reason", n => { ReplacementReason = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card_replacement_reason>(); } },
                { "shipping", n => { Shipping = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_card_shipping>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing_card_shipping.CreateFromDiscriminatorValue); } },
                { "spending_controls", n => { SpendingControls = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_card_authorization_controls>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing_card_authorization_controls.CreateFromDiscriminatorValue); } },
                { "status", n => { Status = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card_status>(); } },
                { "type", n => { Type = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card_type>(); } },
                { "wallets", n => { Wallets = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_card_wallets>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing_card_wallets.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("brand", Brand);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card_cancellation_reason>("cancellation_reason", CancellationReason);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Cardholder>("cardholder", Cardholder);
            writer.WriteIntValue("created", Created);
            writer.WriteStringValue("currency", Currency);
            writer.WriteStringValue("cvc", Cvc);
            writer.WriteIntValue("exp_month", ExpMonth);
            writer.WriteIntValue("exp_year", ExpYear);
            writer.WriteStringValue("financial_account", FinancialAccount);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("last4", Last4);
            writer.WriteBoolValue("livemode", Livemode);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card_metadata>("metadata", Metadata);
            writer.WriteStringValue("number", Number);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card_object>("object", Object);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card.Card_personalization_design>("personalization_design", PersonalizationDesign);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card.Card_replaced_by>("replaced_by", ReplacedBy);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card.Card_replacement_for>("replacement_for", ReplacementFor);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card_replacement_reason>("replacement_reason", ReplacementReason);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_card_shipping>("shipping", Shipping);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_card_authorization_controls>("spending_controls", SpendingControls);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card_status>("status", Status);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card_type>("type", Type);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_card_wallets>("wallets", Wallets);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Personalization_design"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Card_personalization_design : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Personalization_design"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Personalization_design? PersonalizationDesign { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Personalization_design PersonalizationDesign { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card.Card_personalization_design"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card.Card_personalization_design CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card.Card_personalization_design();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.PersonalizationDesign = new global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Personalization_design();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(PersonalizationDesign != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(PersonalizationDesign);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Personalization_design>(null, PersonalizationDesign);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Card_replaced_by : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card? Card { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card Card { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card.Card_replaced_by"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card.Card_replaced_by CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card.Card_replaced_by();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.Card = new global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(Card != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(Card);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card>(null, Card);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Card_replacement_for : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card? Card { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card Card { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card.Card_replacement_for"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card.Card_replacement_for CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card.Card_replacement_for();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.Card = new global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(Card != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(Card);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card>(null, Card);
                }
            }
        }
    }
}
#pragma warning restore CS0618
