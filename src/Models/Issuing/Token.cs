// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models.Issuing
{
    /// <summary>
    /// An issuing token object is created when an issued card is added to a digital wallet. As a [card issuer](https://stripe.com/docs/issuing), you can [view and manage these tokens](https://stripe.com/docs/issuing/controls/token-management) through Stripe.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Token : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Card associated with this token.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Token.Token_card? Card { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Token.Token_card Card { get; set; }
#endif
        /// <summary>Time at which the object was created. Measured in seconds since the Unix epoch.</summary>
        public int? Created { get; set; }
        /// <summary>The hashed ID derived from the device ID from the card network associated with the token.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceFingerprint { get; set; }
#nullable restore
#else
        public string DeviceFingerprint { get; set; }
#endif
        /// <summary>Unique identifier for the object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The last four digits of the token.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Last4 { get; set; }
#nullable restore
#else
        public string Last4 { get; set; }
#endif
        /// <summary>Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.</summary>
        public bool? Livemode { get; set; }
        /// <summary>The token service provider / card network associated with the token.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Token_network? Network { get; set; }
        /// <summary>The network_data property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_network_token_network_data? NetworkData { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_network_token_network_data NetworkData { get; set; }
#endif
        /// <summary>Time at which the token was last updated by the card network. Measured in seconds since the Unix epoch.</summary>
        public int? NetworkUpdatedAt { get; set; }
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Token_object? Object { get; set; }
        /// <summary>The usage state of the token.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Token_status? Status { get; set; }
        /// <summary>The digital wallet for this token, if one was used.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Token_wallet_provider? WalletProvider { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Token"/> and sets the default values.
        /// </summary>
        public Token()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Token"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Token CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Token();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "card", n => { Card = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Token.Token_card>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Token.Token_card.CreateFromDiscriminatorValue); } },
                { "created", n => { Created = n.GetIntValue(); } },
                { "device_fingerprint", n => { DeviceFingerprint = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "last4", n => { Last4 = n.GetStringValue(); } },
                { "livemode", n => { Livemode = n.GetBoolValue(); } },
                { "network", n => { Network = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Token_network>(); } },
                { "network_data", n => { NetworkData = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_network_token_network_data>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing_network_token_network_data.CreateFromDiscriminatorValue); } },
                { "network_updated_at", n => { NetworkUpdatedAt = n.GetIntValue(); } },
                { "object", n => { Object = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Token_object>(); } },
                { "status", n => { Status = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Token_status>(); } },
                { "wallet_provider", n => { WalletProvider = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Token_wallet_provider>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Token.Token_card>("card", Card);
            writer.WriteIntValue("created", Created);
            writer.WriteStringValue("device_fingerprint", DeviceFingerprint);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("last4", Last4);
            writer.WriteBoolValue("livemode", Livemode);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Token_network>("network", Network);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_network_token_network_data>("network_data", NetworkData);
            writer.WriteIntValue("network_updated_at", NetworkUpdatedAt);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Token_object>("object", Object);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Token_status>("status", Status);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Token_wallet_provider>("wallet_provider", WalletProvider);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Token_card : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card? Card { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card Card { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Token.Token_card"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Token.Token_card CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Token.Token_card();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.Card = new global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(Card != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(Card);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Card>(null, Card);
                }
            }
        }
    }
}
#pragma warning restore CS0618
