// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Payment_pages_checkout_session_currency_conversion : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Total of all items in source currency before discounts or taxes are applied.</summary>
        public int? AmountSubtotal { get; set; }
        /// <summary>Total of all items in source currency after discounts and taxes are applied.</summary>
        public int? AmountTotal { get; set; }
        /// <summary>Exchange rate used to convert source currency amounts to customer currency amounts</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FxRate { get; set; }
#nullable restore
#else
        public string FxRate { get; set; }
#endif
        /// <summary>Creation currency of the CheckoutSession before localization</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SourceCurrency { get; set; }
#nullable restore
#else
        public string SourceCurrency { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_currency_conversion"/> and sets the default values.
        /// </summary>
        public Payment_pages_checkout_session_currency_conversion()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_currency_conversion"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_currency_conversion CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_checkout_session_currency_conversion();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount_subtotal", n => { AmountSubtotal = n.GetIntValue(); } },
                { "amount_total", n => { AmountTotal = n.GetIntValue(); } },
                { "fx_rate", n => { FxRate = n.GetStringValue(); } },
                { "source_currency", n => { SourceCurrency = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("amount_subtotal", AmountSubtotal);
            writer.WriteIntValue("amount_total", AmountTotal);
            writer.WriteStringValue("fx_rate", FxRate);
            writer.WriteStringValue("source_currency", SourceCurrency);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
