// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    /// <summary>
    /// The `Charge` object represents a single attempt to move money into your Stripe account.PaymentIntent confirmation is the most common way to create Charges, but transferringmoney to a different Stripe account through Connect also creates Charges.Some legacy payment flows create Charges directly, which is not recommended for new integrations.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Charge : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge Â¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).</summary>
        public int? Amount { get; set; }
        /// <summary>Amount in cents (or local equivalent) captured (can be less than the amount attribute on the charge if a partial capture was made).</summary>
        public int? AmountCaptured { get; set; }
        /// <summary>Amount in cents (or local equivalent) refunded (can be less than the amount attribute on the charge if a partial refund was issued).</summary>
        public int? AmountRefunded { get; set; }
        /// <summary>ID of the Connect application that created the charge.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_application? Application { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_application Application { get; set; }
#endif
        /// <summary>The application fee (if any) for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collect-fees) for details.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_application_fee? ApplicationFee { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_application_fee ApplicationFee { get; set; }
#endif
        /// <summary>The amount of the application fee (if any) requested for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collect-fees) for details.</summary>
        public int? ApplicationFeeAmount { get; set; }
        /// <summary>ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_balance_transaction? BalanceTransaction { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_balance_transaction BalanceTransaction { get; set; }
#endif
        /// <summary>The billing_details property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Billing_details? BillingDetails { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Billing_details BillingDetails { get; set; }
#endif
        /// <summary>The full statement descriptor that is passed to card networks, and that is displayed on your customers&apos; credit card and bank statements. Allows you to see what the statement descriptor looks like after the static and dynamic portions are combined. This value only exists for card payments.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CalculatedStatementDescriptor { get; set; }
#nullable restore
#else
        public string CalculatedStatementDescriptor { get; set; }
#endif
        /// <summary>If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.</summary>
        public bool? Captured { get; set; }
        /// <summary>Time at which the object was created. Measured in seconds since the Unix epoch.</summary>
        public int? Created { get; set; }
        /// <summary>Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>ID of the customer this charge is for if one exists.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_customer? Customer { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_customer Customer { get; set; }
#endif
        /// <summary>An arbitrary string attached to the object. Often useful for displaying to users.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Whether the charge has been disputed.</summary>
        public bool? Disputed { get; set; }
        /// <summary>ID of the balance transaction that describes the reversal of the balance on your account due to payment failure.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_failure_balance_transaction? FailureBalanceTransaction { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_failure_balance_transaction FailureBalanceTransaction { get; set; }
#endif
        /// <summary>Error code explaining reason for charge failure if available (see [the errors section](https://stripe.com/docs/error-codes) for a list of codes).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FailureCode { get; set; }
#nullable restore
#else
        public string FailureCode { get; set; }
#endif
        /// <summary>Message to user further explaining reason for charge failure if available.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FailureMessage { get; set; }
#nullable restore
#else
        public string FailureMessage { get; set; }
#endif
        /// <summary>Information on fraud assessments for the charge.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Charge_fraud_details? FraudDetails { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Charge_fraud_details FraudDetails { get; set; }
#endif
        /// <summary>Unique identifier for the object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.</summary>
        public bool? Livemode { get; set; }
        /// <summary>Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Charge_metadata? Metadata { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Charge_metadata Metadata { get; set; }
#endif
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Charge_object? Object { get; set; }
        /// <summary>The account (if any) the charge was made on behalf of without triggering an automatic transfer. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers) for details.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_on_behalf_of? OnBehalfOf { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_on_behalf_of OnBehalfOf { get; set; }
#endif
        /// <summary>Details about whether the payment was accepted, and why. See [understanding declines](https://stripe.com/docs/declines) for details.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Charge_outcome? Outcome { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Charge_outcome Outcome { get; set; }
#endif
        /// <summary>`true` if the charge succeeded, or was successfully authorized for later capture.</summary>
        public bool? Paid { get; set; }
        /// <summary>ID of the PaymentIntent associated with this charge, if one exists.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_payment_intent? PaymentIntent { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_payment_intent PaymentIntent { get; set; }
#endif
        /// <summary>ID of the payment method used in this charge.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PaymentMethod { get; set; }
#nullable restore
#else
        public string PaymentMethod { get; set; }
#endif
        /// <summary>Details about the payment method at the time of the transaction.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details? PaymentMethodDetails { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details PaymentMethodDetails { get; set; }
#endif
        /// <summary>The presentment_details property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_payment_intent_presentment_details? PresentmentDetails { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_payment_intent_presentment_details PresentmentDetails { get; set; }
#endif
        /// <summary>Options to configure Radar. See [Radar Session](https://stripe.com/docs/radar/radar-session) for more information.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Radar_radar_options? RadarOptions { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Radar_radar_options RadarOptions { get; set; }
#endif
        /// <summary>This is the email address that the receipt for this charge was sent to.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReceiptEmail { get; set; }
#nullable restore
#else
        public string ReceiptEmail { get; set; }
#endif
        /// <summary>This is the transaction number that appears on email receipts sent for this charge. This attribute will be `null` until a receipt has been sent.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReceiptNumber { get; set; }
#nullable restore
#else
        public string ReceiptNumber { get; set; }
#endif
        /// <summary>This is the URL to view the receipt for this charge. The receipt is kept up-to-date to the latest state of the charge, including any refunds. If the charge is for an Invoice, the receipt will be stylized as an Invoice receipt.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReceiptUrl { get; set; }
#nullable restore
#else
        public string ReceiptUrl { get; set; }
#endif
        /// <summary>Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.</summary>
        public bool? Refunded { get; set; }
        /// <summary>A list of refunds that have been applied to the charge.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Charge_refunds? Refunds { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Charge_refunds Refunds { get; set; }
#endif
        /// <summary>ID of the review associated with this charge if one exists.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_review? Review { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_review Review { get; set; }
#endif
        /// <summary>Shipping information for the charge.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Shipping? Shipping { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Shipping Shipping { get; set; }
#endif
        /// <summary>The transfer ID which created this charge. Only present if the charge came from another Stripe account. [See the Connect documentation](https://docs.stripe.com/connect/destination-charges) for details.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_source_transfer? SourceTransfer { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_source_transfer SourceTransfer { get; set; }
#endif
        /// <summary>For a non-card charge, text that appears on the customer&apos;s statement as the statement descriptor. This value overrides the account&apos;s default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).For a card charge, this value is ignored unless you don&apos;t specify a `statement_descriptor_suffix`, in which case this value is used as the suffix.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StatementDescriptor { get; set; }
#nullable restore
#else
        public string StatementDescriptor { get; set; }
#endif
        /// <summary>Provides information about a card charge. Concatenated to the account&apos;s [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer&apos;s statement. If the account has no prefix value, the suffix is concatenated to the account&apos;s statement descriptor.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StatementDescriptorSuffix { get; set; }
#nullable restore
#else
        public string StatementDescriptorSuffix { get; set; }
#endif
        /// <summary>The status of the payment is either `succeeded`, `pending`, or `failed`.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Charge_status? Status { get; set; }
        /// <summary>ID of the transfer to the `destination` account (only applicable if the charge was created using the `destination` parameter).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_transfer? Transfer { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_transfer Transfer { get; set; }
#endif
        /// <summary>An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Charge_transfer_data? TransferData { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Charge_transfer_data TransferData { get; set; }
#endif
        /// <summary>A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options) for details.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TransferGroup { get; set; }
#nullable restore
#else
        public string TransferGroup { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Charge"/> and sets the default values.
        /// </summary>
        public Charge()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Charge"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Charge CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Charge();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount", n => { Amount = n.GetIntValue(); } },
                { "amount_captured", n => { AmountCaptured = n.GetIntValue(); } },
                { "amount_refunded", n => { AmountRefunded = n.GetIntValue(); } },
                { "application", n => { Application = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_application>(global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_application.CreateFromDiscriminatorValue); } },
                { "application_fee", n => { ApplicationFee = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_application_fee>(global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_application_fee.CreateFromDiscriminatorValue); } },
                { "application_fee_amount", n => { ApplicationFeeAmount = n.GetIntValue(); } },
                { "balance_transaction", n => { BalanceTransaction = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_balance_transaction>(global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_balance_transaction.CreateFromDiscriminatorValue); } },
                { "billing_details", n => { BillingDetails = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Billing_details>(global::Soenneker.Stripe.OpenApiClient.Models.Billing_details.CreateFromDiscriminatorValue); } },
                { "calculated_statement_descriptor", n => { CalculatedStatementDescriptor = n.GetStringValue(); } },
                { "captured", n => { Captured = n.GetBoolValue(); } },
                { "created", n => { Created = n.GetIntValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "customer", n => { Customer = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_customer>(global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_customer.CreateFromDiscriminatorValue); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "disputed", n => { Disputed = n.GetBoolValue(); } },
                { "failure_balance_transaction", n => { FailureBalanceTransaction = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_failure_balance_transaction>(global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_failure_balance_transaction.CreateFromDiscriminatorValue); } },
                { "failure_code", n => { FailureCode = n.GetStringValue(); } },
                { "failure_message", n => { FailureMessage = n.GetStringValue(); } },
                { "fraud_details", n => { FraudDetails = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Charge_fraud_details>(global::Soenneker.Stripe.OpenApiClient.Models.Charge_fraud_details.CreateFromDiscriminatorValue); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "livemode", n => { Livemode = n.GetBoolValue(); } },
                { "metadata", n => { Metadata = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Charge_metadata>(global::Soenneker.Stripe.OpenApiClient.Models.Charge_metadata.CreateFromDiscriminatorValue); } },
                { "object", n => { Object = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Charge_object>(); } },
                { "on_behalf_of", n => { OnBehalfOf = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_on_behalf_of>(global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_on_behalf_of.CreateFromDiscriminatorValue); } },
                { "outcome", n => { Outcome = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Charge_outcome>(global::Soenneker.Stripe.OpenApiClient.Models.Charge_outcome.CreateFromDiscriminatorValue); } },
                { "paid", n => { Paid = n.GetBoolValue(); } },
                { "payment_intent", n => { PaymentIntent = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_payment_intent>(global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_payment_intent.CreateFromDiscriminatorValue); } },
                { "payment_method", n => { PaymentMethod = n.GetStringValue(); } },
                { "payment_method_details", n => { PaymentMethodDetails = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details.CreateFromDiscriminatorValue); } },
                { "presentment_details", n => { PresentmentDetails = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_payment_intent_presentment_details>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_payment_intent_presentment_details.CreateFromDiscriminatorValue); } },
                { "radar_options", n => { RadarOptions = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Radar_radar_options>(global::Soenneker.Stripe.OpenApiClient.Models.Radar_radar_options.CreateFromDiscriminatorValue); } },
                { "receipt_email", n => { ReceiptEmail = n.GetStringValue(); } },
                { "receipt_number", n => { ReceiptNumber = n.GetStringValue(); } },
                { "receipt_url", n => { ReceiptUrl = n.GetStringValue(); } },
                { "refunded", n => { Refunded = n.GetBoolValue(); } },
                { "refunds", n => { Refunds = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Charge_refunds>(global::Soenneker.Stripe.OpenApiClient.Models.Charge_refunds.CreateFromDiscriminatorValue); } },
                { "review", n => { Review = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_review>(global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_review.CreateFromDiscriminatorValue); } },
                { "shipping", n => { Shipping = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Shipping>(global::Soenneker.Stripe.OpenApiClient.Models.Shipping.CreateFromDiscriminatorValue); } },
                { "source_transfer", n => { SourceTransfer = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_source_transfer>(global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_source_transfer.CreateFromDiscriminatorValue); } },
                { "statement_descriptor", n => { StatementDescriptor = n.GetStringValue(); } },
                { "statement_descriptor_suffix", n => { StatementDescriptorSuffix = n.GetStringValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Charge_status>(); } },
                { "transfer", n => { Transfer = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_transfer>(global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_transfer.CreateFromDiscriminatorValue); } },
                { "transfer_data", n => { TransferData = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Charge_transfer_data>(global::Soenneker.Stripe.OpenApiClient.Models.Charge_transfer_data.CreateFromDiscriminatorValue); } },
                { "transfer_group", n => { TransferGroup = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("amount", Amount);
            writer.WriteIntValue("amount_captured", AmountCaptured);
            writer.WriteIntValue("amount_refunded", AmountRefunded);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_application>("application", Application);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_application_fee>("application_fee", ApplicationFee);
            writer.WriteIntValue("application_fee_amount", ApplicationFeeAmount);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_balance_transaction>("balance_transaction", BalanceTransaction);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Billing_details>("billing_details", BillingDetails);
            writer.WriteStringValue("calculated_statement_descriptor", CalculatedStatementDescriptor);
            writer.WriteBoolValue("captured", Captured);
            writer.WriteIntValue("created", Created);
            writer.WriteStringValue("currency", Currency);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_customer>("customer", Customer);
            writer.WriteStringValue("description", Description);
            writer.WriteBoolValue("disputed", Disputed);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_failure_balance_transaction>("failure_balance_transaction", FailureBalanceTransaction);
            writer.WriteStringValue("failure_code", FailureCode);
            writer.WriteStringValue("failure_message", FailureMessage);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Charge_fraud_details>("fraud_details", FraudDetails);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("livemode", Livemode);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Charge_metadata>("metadata", Metadata);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Charge_object>("object", Object);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_on_behalf_of>("on_behalf_of", OnBehalfOf);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Charge_outcome>("outcome", Outcome);
            writer.WriteBoolValue("paid", Paid);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_payment_intent>("payment_intent", PaymentIntent);
            writer.WriteStringValue("payment_method", PaymentMethod);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details>("payment_method_details", PaymentMethodDetails);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_payment_intent_presentment_details>("presentment_details", PresentmentDetails);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Radar_radar_options>("radar_options", RadarOptions);
            writer.WriteStringValue("receipt_email", ReceiptEmail);
            writer.WriteStringValue("receipt_number", ReceiptNumber);
            writer.WriteStringValue("receipt_url", ReceiptUrl);
            writer.WriteBoolValue("refunded", Refunded);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Charge_refunds>("refunds", Refunds);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_review>("review", Review);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Shipping>("shipping", Shipping);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_source_transfer>("source_transfer", SourceTransfer);
            writer.WriteStringValue("statement_descriptor", StatementDescriptor);
            writer.WriteStringValue("statement_descriptor_suffix", StatementDescriptorSuffix);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Charge_status>("status", Status);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_transfer>("transfer", Transfer);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Charge_transfer_data>("transfer_data", TransferData);
            writer.WriteStringValue("transfer_group", TransferGroup);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Application"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Charge_application : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Application"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Application? Application { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Application Application { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_application"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_application CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_application();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.Application = new global::Soenneker.Stripe.OpenApiClient.Models.Application();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(Application != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(Application);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Application>(null, Application);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Application_fee"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Charge_application_fee : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Application_fee"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Application_fee? ApplicationFee { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Application_fee ApplicationFee { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_application_fee"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_application_fee CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_application_fee();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.ApplicationFee = new global::Soenneker.Stripe.OpenApiClient.Models.Application_fee();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(ApplicationFee != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(ApplicationFee);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Application_fee>(null, ApplicationFee);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Charge_balance_transaction : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction? BalanceTransaction { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction BalanceTransaction { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_balance_transaction"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_balance_transaction CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_balance_transaction();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.BalanceTransaction = new global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(BalanceTransaction != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(BalanceTransaction);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction>(null, BalanceTransaction);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Customer"/>, <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Deleted_customer"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Charge_customer : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Customer"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Customer? Customer { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Customer Customer { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Deleted_customer"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Deleted_customer? DeletedCustomer { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Deleted_customer DeletedCustomer { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_customer"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_customer CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_customer();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.Customer = new global::Soenneker.Stripe.OpenApiClient.Models.Customer();
                    result.DeletedCustomer = new global::Soenneker.Stripe.OpenApiClient.Models.Deleted_customer();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(Customer != null || DeletedCustomer != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(Customer, DeletedCustomer);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Customer>(null, Customer, DeletedCustomer);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Charge_failure_balance_transaction : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction? BalanceTransaction { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction BalanceTransaction { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_failure_balance_transaction"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_failure_balance_transaction CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_failure_balance_transaction();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.BalanceTransaction = new global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(BalanceTransaction != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(BalanceTransaction);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction>(null, BalanceTransaction);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Account"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Charge_on_behalf_of : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Account"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Account? Account { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Account Account { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_on_behalf_of"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_on_behalf_of CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_on_behalf_of();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.Account = new global::Soenneker.Stripe.OpenApiClient.Models.Account();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(Account != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(Account);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Account>(null, Account);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Charge_payment_intent : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent? PaymentIntent { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent PaymentIntent { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_payment_intent"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_payment_intent CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_payment_intent();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.PaymentIntent = new global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(PaymentIntent != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(PaymentIntent);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent>(null, PaymentIntent);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Review"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Charge_review : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Review"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Review? Review { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Review Review { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_review"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_review CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_review();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.Review = new global::Soenneker.Stripe.OpenApiClient.Models.Review();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(Review != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(Review);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Review>(null, Review);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Transfer"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Charge_source_transfer : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Transfer"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Transfer? Transfer { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Transfer Transfer { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_source_transfer"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_source_transfer CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_source_transfer();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.Transfer = new global::Soenneker.Stripe.OpenApiClient.Models.Transfer();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(Transfer != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(Transfer);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Transfer>(null, Transfer);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Transfer"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Charge_transfer : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Transfer"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Transfer? Transfer { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Transfer Transfer { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_transfer"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_transfer CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Charge.Charge_transfer();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.Transfer = new global::Soenneker.Stripe.OpenApiClient.Models.Transfer();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(Transfer != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(Transfer);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Transfer>(null, Transfer);
                }
            }
        }
    }
}
#pragma warning restore CS0618
