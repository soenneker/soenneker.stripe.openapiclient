// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Legal_entity_person_verification : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A document showing address, either a passport, local ID card, or utility bill from a well-known utility company.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_person_verification_document? AdditionalDocument { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_person_verification_document AdditionalDocument { get; set; }
#endif
        /// <summary>A user-displayable string describing the verification state for the person. For example, this may say &quot;Provided identity information could not be verified&quot;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Details { get; set; }
#nullable restore
#else
        public string Details { get; set; }
#endif
        /// <summary>One of `document_address_mismatch`, `document_dob_mismatch`, `document_duplicate_type`, `document_id_number_mismatch`, `document_name_mismatch`, `document_nationality_mismatch`, `failed_keyed_identity`, or `failed_other`. A machine-readable code specifying the verification state for the person.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DetailsCode { get; set; }
#nullable restore
#else
        public string DetailsCode { get; set; }
#endif
        /// <summary>The document property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_person_verification_document? Document { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_person_verification_document Document { get; set; }
#endif
        /// <summary>The state of verification for the person. Possible values are `unverified`, `pending`, or `verified`. Please refer [guide](https://stripe.com/docs/connect/handling-api-verification) to handle verification updates.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_person_verification"/> and sets the default values.
        /// </summary>
        public Legal_entity_person_verification()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_person_verification"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_person_verification CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_person_verification();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "additional_document", n => { AdditionalDocument = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_person_verification_document>(global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_person_verification_document.CreateFromDiscriminatorValue); } },
                { "details", n => { Details = n.GetStringValue(); } },
                { "details_code", n => { DetailsCode = n.GetStringValue(); } },
                { "document", n => { Document = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_person_verification_document>(global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_person_verification_document.CreateFromDiscriminatorValue); } },
                { "status", n => { Status = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_person_verification_document>("additional_document", AdditionalDocument);
            writer.WriteStringValue("details", Details);
            writer.WriteStringValue("details_code", DetailsCode);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_person_verification_document>("document", Document);
            writer.WriteStringValue("status", Status);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
