// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Payment_method_interac_present : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Card brand. Can be `interac`, `mastercard` or `visa`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Brand { get; set; }
#nullable restore
#else
        public string Brand { get; set; }
#endif
        /// <summary>The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CardholderName { get; set; }
#nullable restore
#else
        public string CardholderName { get; set; }
#endif
        /// <summary>Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you&apos;ve collected.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Country { get; set; }
#nullable restore
#else
        public string Country { get; set; }
#endif
        /// <summary>A high-level description of the type of cards issued in this range.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Two-digit number representing the card&apos;s expiration month.</summary>
        public int? ExpMonth { get; set; }
        /// <summary>Four-digit number representing the card&apos;s expiration year.</summary>
        public int? ExpYear { get; set; }
        /// <summary>Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâ€™ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.*As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Fingerprint { get; set; }
#nullable restore
#else
        public string Fingerprint { get; set; }
#endif
        /// <summary>Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Funding { get; set; }
#nullable restore
#else
        public string Funding { get; set; }
#endif
        /// <summary>The name of the card&apos;s issuing bank.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Issuer { get; set; }
#nullable restore
#else
        public string Issuer { get; set; }
#endif
        /// <summary>The last four digits of the card.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Last4 { get; set; }
#nullable restore
#else
        public string Last4 { get; set; }
#endif
        /// <summary>Contains information about card networks that can be used to process the payment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_card_present_networks? Networks { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_card_present_networks Networks { get; set; }
#endif
        /// <summary>The languages that the issuing bank recommends using for localizing any customer-facing text, as read from the card. Referenced from EMV tag 5F2D, data encoded on the card&apos;s chip.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? PreferredLocales { get; set; }
#nullable restore
#else
        public List<string> PreferredLocales { get; set; }
#endif
        /// <summary>How card details were read in this transaction.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_interac_present_read_method? ReadMethod { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_interac_present"/> and sets the default values.
        /// </summary>
        public Payment_method_interac_present()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_interac_present"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_interac_present CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_interac_present();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "brand", n => { Brand = n.GetStringValue(); } },
                { "cardholder_name", n => { CardholderName = n.GetStringValue(); } },
                { "country", n => { Country = n.GetStringValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "exp_month", n => { ExpMonth = n.GetIntValue(); } },
                { "exp_year", n => { ExpYear = n.GetIntValue(); } },
                { "fingerprint", n => { Fingerprint = n.GetStringValue(); } },
                { "funding", n => { Funding = n.GetStringValue(); } },
                { "issuer", n => { Issuer = n.GetStringValue(); } },
                { "last4", n => { Last4 = n.GetStringValue(); } },
                { "networks", n => { Networks = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_card_present_networks>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_card_present_networks.CreateFromDiscriminatorValue); } },
                { "preferred_locales", n => { PreferredLocales = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "read_method", n => { ReadMethod = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_interac_present_read_method>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("brand", Brand);
            writer.WriteStringValue("cardholder_name", CardholderName);
            writer.WriteStringValue("country", Country);
            writer.WriteStringValue("description", Description);
            writer.WriteIntValue("exp_month", ExpMonth);
            writer.WriteIntValue("exp_year", ExpYear);
            writer.WriteStringValue("fingerprint", Fingerprint);
            writer.WriteStringValue("funding", Funding);
            writer.WriteStringValue("issuer", Issuer);
            writer.WriteStringValue("last4", Last4);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_card_present_networks>("networks", Networks);
            writer.WriteCollectionOfPrimitiveValues<string>("preferred_locales", PreferredLocales);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_interac_present_read_method>("read_method", ReadMethod);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
