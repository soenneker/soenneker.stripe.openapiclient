// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    /// <summary>
    /// A coupon contains information about a percent-off or amount-off discount youmight want to apply to a customer. Coupons may be applied to [subscriptions](https://stripe.com/docs/api#subscriptions), [invoices](https://stripe.com/docs/api#invoices),[checkout sessions](https://stripe.com/docs/api/checkout/sessions), [quotes](https://stripe.com/docs/api#quotes), and more. Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge) or [payment intents](https://stripe.com/docs/api/payment_intents).
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Coupon : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer.</summary>
        public int? AmountOff { get; set; }
        /// <summary>The applies_to property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Coupon_applies_to? AppliesTo { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Coupon_applies_to AppliesTo { get; set; }
#endif
        /// <summary>Time at which the object was created. Measured in seconds since the Unix epoch.</summary>
        public int? Created { get; set; }
        /// <summary>If `amount_off` has been set, the three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the amount to take off.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>Coupons defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Coupon_currency_options? CurrencyOptions { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Coupon_currency_options CurrencyOptions { get; set; }
#endif
        /// <summary>One of `forever`, `once`, or `repeating`. Describes how long a customer who applies this coupon will get the discount.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Coupon_duration? Duration { get; set; }
        /// <summary>If `duration` is `repeating`, the number of months the coupon applies. Null if coupon `duration` is `forever` or `once`.</summary>
        public int? DurationInMonths { get; set; }
        /// <summary>Unique identifier for the object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.</summary>
        public bool? Livemode { get; set; }
        /// <summary>Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid.</summary>
        public int? MaxRedemptions { get; set; }
        /// <summary>Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Coupon_metadata? Metadata { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Coupon_metadata Metadata { get; set; }
#endif
        /// <summary>Name of the coupon displayed to customers on for instance invoices or receipts.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Coupon_object? Object { get; set; }
        /// <summary>Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent_off of 50 will make a $ (or local equivalent)100 invoice $ (or local equivalent)50 instead.</summary>
        public double? PercentOff { get; set; }
        /// <summary>Date after which the coupon can no longer be redeemed.</summary>
        public int? RedeemBy { get; set; }
        /// <summary>Number of times this coupon has been applied to a customer.</summary>
        public int? TimesRedeemed { get; set; }
        /// <summary>Taking account of the above properties, whether this coupon can still be applied to a customer.</summary>
        public bool? Valid { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Coupon"/> and sets the default values.
        /// </summary>
        public Coupon()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Coupon"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Coupon CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Coupon();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount_off", n => { AmountOff = n.GetIntValue(); } },
                { "applies_to", n => { AppliesTo = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Coupon_applies_to>(global::Soenneker.Stripe.OpenApiClient.Models.Coupon_applies_to.CreateFromDiscriminatorValue); } },
                { "created", n => { Created = n.GetIntValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "currency_options", n => { CurrencyOptions = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Coupon_currency_options>(global::Soenneker.Stripe.OpenApiClient.Models.Coupon_currency_options.CreateFromDiscriminatorValue); } },
                { "duration", n => { Duration = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Coupon_duration>(); } },
                { "duration_in_months", n => { DurationInMonths = n.GetIntValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "livemode", n => { Livemode = n.GetBoolValue(); } },
                { "max_redemptions", n => { MaxRedemptions = n.GetIntValue(); } },
                { "metadata", n => { Metadata = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Coupon_metadata>(global::Soenneker.Stripe.OpenApiClient.Models.Coupon_metadata.CreateFromDiscriminatorValue); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "object", n => { Object = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Coupon_object>(); } },
                { "percent_off", n => { PercentOff = n.GetDoubleValue(); } },
                { "redeem_by", n => { RedeemBy = n.GetIntValue(); } },
                { "times_redeemed", n => { TimesRedeemed = n.GetIntValue(); } },
                { "valid", n => { Valid = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("amount_off", AmountOff);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Coupon_applies_to>("applies_to", AppliesTo);
            writer.WriteIntValue("created", Created);
            writer.WriteStringValue("currency", Currency);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Coupon_currency_options>("currency_options", CurrencyOptions);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Coupon_duration>("duration", Duration);
            writer.WriteIntValue("duration_in_months", DurationInMonths);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("livemode", Livemode);
            writer.WriteIntValue("max_redemptions", MaxRedemptions);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Coupon_metadata>("metadata", Metadata);
            writer.WriteStringValue("name", Name);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Coupon_object>("object", Object);
            writer.WriteDoubleValue("percent_off", PercentOff);
            writer.WriteIntValue("redeem_by", RedeemBy);
            writer.WriteIntValue("times_redeemed", TimesRedeemed);
            writer.WriteBoolValue("valid", Valid);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
