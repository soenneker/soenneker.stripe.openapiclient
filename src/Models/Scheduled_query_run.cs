// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    /// <summary>
    /// If you have [scheduled a Sigma query](https://stripe.com/docs/sigma/scheduled-queries), you&apos;llreceive a `sigma.scheduled_query_run.created` webhook each time the queryruns. The webhook contains a `ScheduledQueryRun` object, which you can use toretrieve the query results.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Scheduled_query_run : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Time at which the object was created. Measured in seconds since the Unix epoch.</summary>
        public int? Created { get; set; }
        /// <summary>When the query was run, Sigma contained a snapshot of your Stripe data at this time.</summary>
        public int? DataLoadTime { get; set; }
        /// <summary>The error property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Sigma_scheduled_query_run_error? Error { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Sigma_scheduled_query_run_error Error { get; set; }
#endif
        /// <summary>The file object representing the results of the query.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.FileObject? File { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.FileObject File { get; set; }
#endif
        /// <summary>Unique identifier for the object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.</summary>
        public bool? Livemode { get; set; }
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Scheduled_query_run_object? Object { get; set; }
        /// <summary>Time at which the result expires and is no longer available for download.</summary>
        public int? ResultAvailableUntil { get; set; }
        /// <summary>SQL for the query.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Sql { get; set; }
#nullable restore
#else
        public string Sql { get; set; }
#endif
        /// <summary>The query&apos;s execution status, which will be `completed` for successful runs, and `canceled`, `failed`, or `timed_out` otherwise.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>Title of the query.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Scheduled_query_run"/> and sets the default values.
        /// </summary>
        public Scheduled_query_run()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Scheduled_query_run"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Scheduled_query_run CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Scheduled_query_run();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "created", n => { Created = n.GetIntValue(); } },
                { "data_load_time", n => { DataLoadTime = n.GetIntValue(); } },
                { "error", n => { Error = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Sigma_scheduled_query_run_error>(global::Soenneker.Stripe.OpenApiClient.Models.Sigma_scheduled_query_run_error.CreateFromDiscriminatorValue); } },
                { "file", n => { File = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.FileObject>(global::Soenneker.Stripe.OpenApiClient.Models.FileObject.CreateFromDiscriminatorValue); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "livemode", n => { Livemode = n.GetBoolValue(); } },
                { "object", n => { Object = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Scheduled_query_run_object>(); } },
                { "result_available_until", n => { ResultAvailableUntil = n.GetIntValue(); } },
                { "sql", n => { Sql = n.GetStringValue(); } },
                { "status", n => { Status = n.GetStringValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("created", Created);
            writer.WriteIntValue("data_load_time", DataLoadTime);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Sigma_scheduled_query_run_error>("error", Error);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.FileObject>("file", File);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("livemode", Livemode);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Scheduled_query_run_object>("object", Object);
            writer.WriteIntValue("result_available_until", ResultAvailableUntil);
            writer.WriteStringValue("sql", Sql);
            writer.WriteStringValue("status", Status);
            writer.WriteStringValue("title", Title);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
