// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models.Financial_connections
{
    /// <summary>
    /// A Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Session : IAdditionalDataHolder, IParsable
    {
        /// <summary>The account holder for whom accounts are collected in this session.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Bank_connections_resource_accountholder? AccountHolder { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Bank_connections_resource_accountholder AccountHolder { get; set; }
#endif
        /// <summary>The accounts that were collected as part of this Session.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Financial_connections.Session_accounts? Accounts { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Financial_connections.Session_accounts Accounts { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A value that will be passed to the client to launch the authentication flow.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientSecret { get; set; }
#nullable restore
#else
        public string ClientSecret { get; set; }
#endif
        /// <summary>The filters property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Bank_connections_resource_link_account_session_filters? Filters { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Bank_connections_resource_link_account_session_filters Filters { get; set; }
#endif
        /// <summary>Unique identifier for the object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.</summary>
        public bool? Livemode { get; set; }
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Financial_connections.Session_object? Object { get; set; }
        /// <summary>Permissions requested for accounts collected during this session.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Financial_connections.Session_permissions?>? Permissions { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Financial_connections.Session_permissions?> Permissions { get; set; }
#endif
        /// <summary>Data features requested to be retrieved upon account creation.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Financial_connections.Session_prefetch?>? Prefetch { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Financial_connections.Session_prefetch?> Prefetch { get; set; }
#endif
        /// <summary>For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReturnUrl { get; set; }
#nullable restore
#else
        public string ReturnUrl { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Financial_connections.Session"/> and sets the default values.
        /// </summary>
        public Session()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Financial_connections.Session"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Financial_connections.Session CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Financial_connections.Session();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "account_holder", n => { AccountHolder = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Bank_connections_resource_accountholder>(global::Soenneker.Stripe.OpenApiClient.Models.Bank_connections_resource_accountholder.CreateFromDiscriminatorValue); } },
                { "accounts", n => { Accounts = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Financial_connections.Session_accounts>(global::Soenneker.Stripe.OpenApiClient.Models.Financial_connections.Session_accounts.CreateFromDiscriminatorValue); } },
                { "client_secret", n => { ClientSecret = n.GetStringValue(); } },
                { "filters", n => { Filters = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Bank_connections_resource_link_account_session_filters>(global::Soenneker.Stripe.OpenApiClient.Models.Bank_connections_resource_link_account_session_filters.CreateFromDiscriminatorValue); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "livemode", n => { Livemode = n.GetBoolValue(); } },
                { "object", n => { Object = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Financial_connections.Session_object>(); } },
                { "permissions", n => { Permissions = n.GetCollectionOfEnumValues<global::Soenneker.Stripe.OpenApiClient.Models.Financial_connections.Session_permissions>()?.AsList(); } },
                { "prefetch", n => { Prefetch = n.GetCollectionOfEnumValues<global::Soenneker.Stripe.OpenApiClient.Models.Financial_connections.Session_prefetch>()?.AsList(); } },
                { "return_url", n => { ReturnUrl = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Bank_connections_resource_accountholder>("account_holder", AccountHolder);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Financial_connections.Session_accounts>("accounts", Accounts);
            writer.WriteStringValue("client_secret", ClientSecret);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Bank_connections_resource_link_account_session_filters>("filters", Filters);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("livemode", Livemode);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Financial_connections.Session_object>("object", Object);
            writer.WriteCollectionOfEnumValues<global::Soenneker.Stripe.OpenApiClient.Models.Financial_connections.Session_permissions>("permissions", Permissions);
            writer.WriteCollectionOfEnumValues<global::Soenneker.Stripe.OpenApiClient.Models.Financial_connections.Session_prefetch>("prefetch", Prefetch);
            writer.WriteStringValue("return_url", ReturnUrl);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
