// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    /// <summary>
    /// This is an object representing a Stripe account. You can retrieve it to seeproperties on the account like its current requirements or if the account isenabled to make live charges or receive payouts.For accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection)is `application`, which includes Custom accounts, the properties below are alwaysreturned.For accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection)is `stripe`, which includes Standard and Express accounts, some properties are only returneduntil you create an [Account Link](/api/account_links) or [Account Session](/api/account_sessions)to start Connect Onboarding. Learn about the [differences between accounts](/connect/accounts).
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Account : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Business information about the account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_business_profile? BusinessProfile { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_business_profile BusinessProfile { get; set; }
#endif
        /// <summary>The business type.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_business_type? BusinessType { get; set; }
        /// <summary>The capabilities property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities? Capabilities { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities Capabilities { get; set; }
#endif
        /// <summary>Whether the account can process charges.</summary>
        public bool? ChargesEnabled { get; set; }
        /// <summary>The company property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_company? Company { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_company Company { get; set; }
#endif
        /// <summary>The controller property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_unification_account_controller? Controller { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_unification_account_controller Controller { get; set; }
#endif
        /// <summary>The account&apos;s country.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Country { get; set; }
#nullable restore
#else
        public string Country { get; set; }
#endif
        /// <summary>Time at which the account was connected. Measured in seconds since the Unix epoch.</summary>
        public int? Created { get; set; }
        /// <summary>Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account&apos;s country](https://stripe.com/docs/payouts).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DefaultCurrency { get; set; }
#nullable restore
#else
        public string DefaultCurrency { get; set; }
#endif
        /// <summary>Whether account details have been submitted. Accounts with Stripe Dashboard access, which includes Standard accounts, cannot receive payouts before this is true. Accounts where this is false should be directed to [an onboarding flow](/connect/onboarding) to finish submitting account details.</summary>
        public bool? DetailsSubmitted { get; set; }
        /// <summary>An email address associated with the account. It&apos;s not used for authentication and Stripe doesn&apos;t market to this field without explicit approval from the platform.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Email { get; set; }
#nullable restore
#else
        public string Email { get; set; }
#endif
        /// <summary>External accounts (bank accounts and debit cards) currently attached to this account. External accounts are only returned for requests where `controller[is_controller]` is true.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_external_accounts? ExternalAccounts { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_external_accounts ExternalAccounts { get; set; }
#endif
        /// <summary>The future_requirements property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_future_requirements? FutureRequirements { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_future_requirements FutureRequirements { get; set; }
#endif
        /// <summary>The groups associated with the account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_group_membership? Groups { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_group_membership Groups { get; set; }
#endif
        /// <summary>Unique identifier for the object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>This is an object representing a person associated with a Stripe account.A platform can only access a subset of data in a person for an account where [account.controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `stripe`, which includes Standard and Express accounts, after creating an Account Link or Account Session to start Connect onboarding.See the [Standard onboarding](/connect/standard-accounts) or [Express onboarding](/connect/express-accounts) documentation for information about prefilling information and account onboarding steps. Learn more about [handling identity verification with the API](/connect/handling-api-verification#person-information).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Person? Individual { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Person Individual { get; set; }
#endif
        /// <summary>Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_metadata? Metadata { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_metadata Metadata { get; set; }
#endif
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_object? Object { get; set; }
        /// <summary>Whether the funds in this account can be paid out.</summary>
        public bool? PayoutsEnabled { get; set; }
        /// <summary>The requirements property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_requirements? Requirements { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_requirements Requirements { get; set; }
#endif
        /// <summary>Options for customizing how the account functions within Stripe.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_settings? Settings { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_settings Settings { get; set; }
#endif
        /// <summary>The tos_acceptance property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_tos_acceptance? TosAcceptance { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_tos_acceptance TosAcceptance { get; set; }
#endif
        /// <summary>The Stripe account type. Can be `standard`, `express`, `custom`, or `none`.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_type? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Account"/> and sets the default values.
        /// </summary>
        public Account()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Account"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Account CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Account();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "business_profile", n => { BusinessProfile = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_business_profile>(global::Soenneker.Stripe.OpenApiClient.Models.Account_business_profile.CreateFromDiscriminatorValue); } },
                { "business_type", n => { BusinessType = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_business_type>(); } },
                { "capabilities", n => { Capabilities = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities>(global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities.CreateFromDiscriminatorValue); } },
                { "charges_enabled", n => { ChargesEnabled = n.GetBoolValue(); } },
                { "company", n => { Company = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_company>(global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_company.CreateFromDiscriminatorValue); } },
                { "controller", n => { Controller = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_unification_account_controller>(global::Soenneker.Stripe.OpenApiClient.Models.Account_unification_account_controller.CreateFromDiscriminatorValue); } },
                { "country", n => { Country = n.GetStringValue(); } },
                { "created", n => { Created = n.GetIntValue(); } },
                { "default_currency", n => { DefaultCurrency = n.GetStringValue(); } },
                { "details_submitted", n => { DetailsSubmitted = n.GetBoolValue(); } },
                { "email", n => { Email = n.GetStringValue(); } },
                { "external_accounts", n => { ExternalAccounts = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_external_accounts>(global::Soenneker.Stripe.OpenApiClient.Models.Account_external_accounts.CreateFromDiscriminatorValue); } },
                { "future_requirements", n => { FutureRequirements = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_future_requirements>(global::Soenneker.Stripe.OpenApiClient.Models.Account_future_requirements.CreateFromDiscriminatorValue); } },
                { "groups", n => { Groups = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_group_membership>(global::Soenneker.Stripe.OpenApiClient.Models.Account_group_membership.CreateFromDiscriminatorValue); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "individual", n => { Individual = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Person>(global::Soenneker.Stripe.OpenApiClient.Models.Person.CreateFromDiscriminatorValue); } },
                { "metadata", n => { Metadata = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_metadata>(global::Soenneker.Stripe.OpenApiClient.Models.Account_metadata.CreateFromDiscriminatorValue); } },
                { "object", n => { Object = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_object>(); } },
                { "payouts_enabled", n => { PayoutsEnabled = n.GetBoolValue(); } },
                { "requirements", n => { Requirements = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_requirements>(global::Soenneker.Stripe.OpenApiClient.Models.Account_requirements.CreateFromDiscriminatorValue); } },
                { "settings", n => { Settings = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_settings>(global::Soenneker.Stripe.OpenApiClient.Models.Account_settings.CreateFromDiscriminatorValue); } },
                { "tos_acceptance", n => { TosAcceptance = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_tos_acceptance>(global::Soenneker.Stripe.OpenApiClient.Models.Account_tos_acceptance.CreateFromDiscriminatorValue); } },
                { "type", n => { Type = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_business_profile>("business_profile", BusinessProfile);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_business_type>("business_type", BusinessType);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities>("capabilities", Capabilities);
            writer.WriteBoolValue("charges_enabled", ChargesEnabled);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_company>("company", Company);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_unification_account_controller>("controller", Controller);
            writer.WriteStringValue("country", Country);
            writer.WriteIntValue("created", Created);
            writer.WriteStringValue("default_currency", DefaultCurrency);
            writer.WriteBoolValue("details_submitted", DetailsSubmitted);
            writer.WriteStringValue("email", Email);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_external_accounts>("external_accounts", ExternalAccounts);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_future_requirements>("future_requirements", FutureRequirements);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_group_membership>("groups", Groups);
            writer.WriteStringValue("id", Id);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Person>("individual", Individual);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_metadata>("metadata", Metadata);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_object>("object", Object);
            writer.WriteBoolValue("payouts_enabled", PayoutsEnabled);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_requirements>("requirements", Requirements);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_settings>("settings", Settings);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_tos_acceptance>("tos_acceptance", TosAcceptance);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_type>("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
