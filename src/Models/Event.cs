// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    /// <summary>
    /// Snapshot events allow you to track and react to activity in your Stripe integration. Whenthe state of another API resource changes, Stripe creates an `Event` object that containsall the relevant information associated with that action, including the affected APIresource. For example, a successful payment triggers a `charge.succeeded` event, whichcontains the `Charge` in the event&apos;s data property. Some actions trigger multiple events.For example, if you create a new subscription for a customer, it triggers both a`customer.subscription.created` event and a `charge.succeeded` event.Configure an event destination in your account to listen for events that represent actionsyour integration needs to respond to. Additionally, you can retrieve an individual event ora list of events from the API.[Connect](https://docs.stripe.com/connect) platforms can also receive event notificationsthat occur in their connected accounts. These events include an account attribute thatidentifies the relevant connected account.You can access events through the [Retrieve Event API](https://docs.stripe.com/api/events#retrieve_event)for 30 days.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Event : IAdditionalDataHolder, IParsable
    {
        /// <summary>The connected account that originates the event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Account { get; set; }
#nullable restore
#else
        public string Account { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The Stripe API version used to render `data` when the event was created. The contents of `data` never change, so this value remains static regardless of the API version currently in use. This property is populated only for events created on or after October 31, 2014.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ApiVersion { get; set; }
#nullable restore
#else
        public string ApiVersion { get; set; }
#endif
        /// <summary>Authentication context needed to fetch the event or related object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Context { get; set; }
#nullable restore
#else
        public string Context { get; set; }
#endif
        /// <summary>Time at which the object was created. Measured in seconds since the Unix epoch.</summary>
        public int? Created { get; set; }
        /// <summary>The data property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Notification_event_data? Data { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Notification_event_data Data { get; set; }
#endif
        /// <summary>Unique identifier for the object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.</summary>
        public bool? Livemode { get; set; }
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Event_object? Object { get; set; }
        /// <summary>Number of webhooks that haven&apos;t been successfully delivered (for example, to return a 20x response) to the URLs you specify.</summary>
        public int? PendingWebhooks { get; set; }
        /// <summary>Information on the API request that triggers the event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Notification_event_request? Request { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Notification_event_request Request { get; set; }
#endif
        /// <summary>Description of the event (for example, `invoice.created` or `charge.refunded`).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Event"/> and sets the default values.
        /// </summary>
        public Event()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Event"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Event CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Event();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "account", n => { Account = n.GetStringValue(); } },
                { "api_version", n => { ApiVersion = n.GetStringValue(); } },
                { "context", n => { Context = n.GetStringValue(); } },
                { "created", n => { Created = n.GetIntValue(); } },
                { "data", n => { Data = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Notification_event_data>(global::Soenneker.Stripe.OpenApiClient.Models.Notification_event_data.CreateFromDiscriminatorValue); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "livemode", n => { Livemode = n.GetBoolValue(); } },
                { "object", n => { Object = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Event_object>(); } },
                { "pending_webhooks", n => { PendingWebhooks = n.GetIntValue(); } },
                { "request", n => { Request = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Notification_event_request>(global::Soenneker.Stripe.OpenApiClient.Models.Notification_event_request.CreateFromDiscriminatorValue); } },
                { "type", n => { Type = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("account", Account);
            writer.WriteStringValue("api_version", ApiVersion);
            writer.WriteStringValue("context", Context);
            writer.WriteIntValue("created", Created);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Notification_event_data>("data", Data);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("livemode", Livemode);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Event_object>("object", Object);
            writer.WriteIntValue("pending_webhooks", PendingWebhooks);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Notification_event_request>("request", Request);
            writer.WriteStringValue("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
