// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Financial_reporting_finance_report_run_run_parameters : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The set of output columns requested for inclusion in the report run.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Columns { get; set; }
#nullable restore
#else
        public List<string> Columns { get; set; }
#endif
        /// <summary>Connected account ID by which to filter the report run.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConnectedAccount { get; set; }
#nullable restore
#else
        public string ConnectedAccount { get; set; }
#endif
        /// <summary>Currency of objects to be included in the report run.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>Ending timestamp of data to be included in the report run. Can be any UTC timestamp between 1 second after the user specified `interval_start` and 1 second before this report&apos;s last `data_available_end` value.</summary>
        public int? IntervalEnd { get; set; }
        /// <summary>Starting timestamp of data to be included in the report run. Can be any UTC timestamp between 1 second after this report&apos;s `data_available_start` and 1 second before the user specified `interval_end` value.</summary>
        public int? IntervalStart { get; set; }
        /// <summary>Payout ID by which to filter the report run.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Payout { get; set; }
#nullable restore
#else
        public string Payout { get; set; }
#endif
        /// <summary>Category of balance transactions to be included in the report run.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReportingCategory { get; set; }
#nullable restore
#else
        public string ReportingCategory { get; set; }
#endif
        /// <summary>Defaults to `Etc/UTC`. The output timezone for all timestamps in the report. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones). Has no effect on `interval_start` or `interval_end`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Timezone { get; set; }
#nullable restore
#else
        public string Timezone { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Financial_reporting_finance_report_run_run_parameters"/> and sets the default values.
        /// </summary>
        public Financial_reporting_finance_report_run_run_parameters()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Financial_reporting_finance_report_run_run_parameters"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Financial_reporting_finance_report_run_run_parameters CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Financial_reporting_finance_report_run_run_parameters();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "columns", n => { Columns = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "connected_account", n => { ConnectedAccount = n.GetStringValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "interval_end", n => { IntervalEnd = n.GetIntValue(); } },
                { "interval_start", n => { IntervalStart = n.GetIntValue(); } },
                { "payout", n => { Payout = n.GetStringValue(); } },
                { "reporting_category", n => { ReportingCategory = n.GetStringValue(); } },
                { "timezone", n => { Timezone = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("columns", Columns);
            writer.WriteStringValue("connected_account", ConnectedAccount);
            writer.WriteStringValue("currency", Currency);
            writer.WriteIntValue("interval_end", IntervalEnd);
            writer.WriteIntValue("interval_start", IntervalStart);
            writer.WriteStringValue("payout", Payout);
            writer.WriteStringValue("reporting_category", ReportingCategory);
            writer.WriteStringValue("timezone", Timezone);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
