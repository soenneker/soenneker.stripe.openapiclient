// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Dispute_visa_compelling_evidence3_prior_undisputed_transaction : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Stripe charge ID for the Visa Compelling Evidence 3.0 eligible prior charge.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Charge { get; set; }
#nullable restore
#else
        public string Charge { get; set; }
#endif
        /// <summary>User Account ID used to log into business platform. Must be recognizable by the user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomerAccountId { get; set; }
#nullable restore
#else
        public string CustomerAccountId { get; set; }
#endif
        /// <summary>Unique identifier of the cardholder’s device derived from a combination of at least two hardware and software attributes. Must be at least 20 characters.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomerDeviceFingerprint { get; set; }
#nullable restore
#else
        public string CustomerDeviceFingerprint { get; set; }
#endif
        /// <summary>Unique identifier of the cardholder’s device such as a device serial number (e.g., International Mobile Equipment Identity [IMEI]). Must be at least 15 characters.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomerDeviceId { get; set; }
#nullable restore
#else
        public string CustomerDeviceId { get; set; }
#endif
        /// <summary>The email address of the customer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomerEmailAddress { get; set; }
#nullable restore
#else
        public string CustomerEmailAddress { get; set; }
#endif
        /// <summary>The IP address that the customer used when making the purchase.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomerPurchaseIp { get; set; }
#nullable restore
#else
        public string CustomerPurchaseIp { get; set; }
#endif
        /// <summary>A description of the product or service that was sold.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProductDescription { get; set; }
#nullable restore
#else
        public string ProductDescription { get; set; }
#endif
        /// <summary>The address to which a physical product was shipped. All fields are required for Visa Compelling Evidence 3.0 evidence submission.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Dispute_transaction_shipping_address? ShippingAddress { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Dispute_transaction_shipping_address ShippingAddress { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Dispute_visa_compelling_evidence3_prior_undisputed_transaction"/> and sets the default values.
        /// </summary>
        public Dispute_visa_compelling_evidence3_prior_undisputed_transaction()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Dispute_visa_compelling_evidence3_prior_undisputed_transaction"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Dispute_visa_compelling_evidence3_prior_undisputed_transaction CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Dispute_visa_compelling_evidence3_prior_undisputed_transaction();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "charge", n => { Charge = n.GetStringValue(); } },
                { "customer_account_id", n => { CustomerAccountId = n.GetStringValue(); } },
                { "customer_device_fingerprint", n => { CustomerDeviceFingerprint = n.GetStringValue(); } },
                { "customer_device_id", n => { CustomerDeviceId = n.GetStringValue(); } },
                { "customer_email_address", n => { CustomerEmailAddress = n.GetStringValue(); } },
                { "customer_purchase_ip", n => { CustomerPurchaseIp = n.GetStringValue(); } },
                { "product_description", n => { ProductDescription = n.GetStringValue(); } },
                { "shipping_address", n => { ShippingAddress = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_transaction_shipping_address>(global::Soenneker.Stripe.OpenApiClient.Models.Dispute_transaction_shipping_address.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("charge", Charge);
            writer.WriteStringValue("customer_account_id", CustomerAccountId);
            writer.WriteStringValue("customer_device_fingerprint", CustomerDeviceFingerprint);
            writer.WriteStringValue("customer_device_id", CustomerDeviceId);
            writer.WriteStringValue("customer_email_address", CustomerEmailAddress);
            writer.WriteStringValue("customer_purchase_ip", CustomerPurchaseIp);
            writer.WriteStringValue("product_description", ProductDescription);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_transaction_shipping_address>("shipping_address", ShippingAddress);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
