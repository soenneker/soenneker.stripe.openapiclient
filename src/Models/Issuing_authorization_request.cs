// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Issuing_authorization_request : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The `pending_request.amount` at the time of the request, presented in your card&apos;s currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). Stripe held this amount from your account to fund the authorization if the request was approved.</summary>
        public int? Amount { get; set; }
        /// <summary>Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_amount_details? AmountDetails { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_amount_details AmountDetails { get; set; }
#endif
        /// <summary>Whether this request was approved.</summary>
        public bool? Approved { get; set; }
        /// <summary>A code created by Stripe which is shared with the merchant to validate the authorization. This field will be populated if the authorization message was approved. The code typically starts with the letter &quot;S&quot;, followed by a six-digit number. For example, &quot;S498162&quot;. Please note that the code is not guaranteed to be unique across authorizations.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AuthorizationCode { get; set; }
#nullable restore
#else
        public string AuthorizationCode { get; set; }
#endif
        /// <summary>Time at which the object was created. Measured in seconds since the Unix epoch.</summary>
        public int? Created { get; set; }
        /// <summary>Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>The `pending_request.merchant_amount` at the time of the request, presented in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).</summary>
        public int? MerchantAmount { get; set; }
        /// <summary>The currency that was collected by the merchant and presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MerchantCurrency { get; set; }
#nullable restore
#else
        public string MerchantCurrency { get; set; }
#endif
        /// <summary>The card network&apos;s estimate of the likelihood that an authorization is fraudulent. Takes on values between 1 and 99.</summary>
        public int? NetworkRiskScore { get; set; }
        /// <summary>When an authorization is approved or declined by you or by Stripe, this field provides additional detail on the reason for the outcome.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_request_reason? Reason { get; set; }
        /// <summary>If the `request_history.reason` is `webhook_error` because the direct webhook response is invalid (for example, parsing errors or missing parameters), we surface a more detailed error message via this field.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReasonMessage { get; set; }
#nullable restore
#else
        public string ReasonMessage { get; set; }
#endif
        /// <summary>Time when the card network received an authorization request from the acquirer in UTC. Referred to by networks as transmission time.</summary>
        public int? RequestedAt { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_request"/> and sets the default values.
        /// </summary>
        public Issuing_authorization_request()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_request"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_request CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_request();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount", n => { Amount = n.GetIntValue(); } },
                { "amount_details", n => { AmountDetails = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_amount_details>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_amount_details.CreateFromDiscriminatorValue); } },
                { "approved", n => { Approved = n.GetBoolValue(); } },
                { "authorization_code", n => { AuthorizationCode = n.GetStringValue(); } },
                { "created", n => { Created = n.GetIntValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "merchant_amount", n => { MerchantAmount = n.GetIntValue(); } },
                { "merchant_currency", n => { MerchantCurrency = n.GetStringValue(); } },
                { "network_risk_score", n => { NetworkRiskScore = n.GetIntValue(); } },
                { "reason", n => { Reason = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_request_reason>(); } },
                { "reason_message", n => { ReasonMessage = n.GetStringValue(); } },
                { "requested_at", n => { RequestedAt = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("amount", Amount);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_amount_details>("amount_details", AmountDetails);
            writer.WriteBoolValue("approved", Approved);
            writer.WriteStringValue("authorization_code", AuthorizationCode);
            writer.WriteIntValue("created", Created);
            writer.WriteStringValue("currency", Currency);
            writer.WriteIntValue("merchant_amount", MerchantAmount);
            writer.WriteStringValue("merchant_currency", MerchantCurrency);
            writer.WriteIntValue("network_risk_score", NetworkRiskScore);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_authorization_request_reason>("reason", Reason);
            writer.WriteStringValue("reason_message", ReasonMessage);
            writer.WriteIntValue("requested_at", RequestedAt);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
