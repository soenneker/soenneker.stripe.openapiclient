// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Dispute_evidence_details : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Date by which evidence must be submitted in order to successfully challenge dispute. Will be 0 if the customer&apos;s bank or credit card company doesn&apos;t allow a response for this particular dispute.</summary>
        public int? DueBy { get; set; }
        /// <summary>The enhanced_eligibility property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Dispute_enhanced_eligibility? EnhancedEligibility { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Dispute_enhanced_eligibility EnhancedEligibility { get; set; }
#endif
        /// <summary>Whether evidence has been staged for this dispute.</summary>
        public bool? HasEvidence { get; set; }
        /// <summary>Whether the last evidence submission was submitted past the due date. Defaults to `false` if no evidence submissions have occurred. If `true`, then delivery of the latest evidence is *not* guaranteed.</summary>
        public bool? PastDue { get; set; }
        /// <summary>The number of times evidence has been submitted. Typically, you may only submit evidence once.</summary>
        public int? SubmissionCount { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence_details"/> and sets the default values.
        /// </summary>
        public Dispute_evidence_details()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence_details"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence_details CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence_details();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "due_by", n => { DueBy = n.GetIntValue(); } },
                { "enhanced_eligibility", n => { EnhancedEligibility = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_enhanced_eligibility>(global::Soenneker.Stripe.OpenApiClient.Models.Dispute_enhanced_eligibility.CreateFromDiscriminatorValue); } },
                { "has_evidence", n => { HasEvidence = n.GetBoolValue(); } },
                { "past_due", n => { PastDue = n.GetBoolValue(); } },
                { "submission_count", n => { SubmissionCount = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("due_by", DueBy);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_enhanced_eligibility>("enhanced_eligibility", EnhancedEligibility);
            writer.WriteBoolValue("has_evidence", HasEvidence);
            writer.WriteBoolValue("past_due", PastDue);
            writer.WriteIntValue("submission_count", SubmissionCount);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
