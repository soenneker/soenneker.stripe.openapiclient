// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    /// <summary>
    /// A dispute occurs when a customer questions your charge with their card issuer.When this happens, you have the opportunity to respond to the dispute withevidence that shows that the charge is legitimate.Related guide: [Disputes and fraud](https://stripe.com/docs/disputes)
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Dispute : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Disputed amount. Usually the amount of the charge, but it can differ (usually because of currency fluctuation or because only part of the order is disputed).</summary>
        public int? Amount { get; set; }
        /// <summary>List of zero, one, or two balance transactions that show funds withdrawn and reinstated to your Stripe account as a result of this dispute.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction>? BalanceTransactions { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction> BalanceTransactions { get; set; }
#endif
        /// <summary>ID of the charge that&apos;s disputed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Dispute.Dispute_charge? Charge { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Dispute.Dispute_charge Charge { get; set; }
#endif
        /// <summary>Time at which the object was created. Measured in seconds since the Unix epoch.</summary>
        public int? Created { get; set; }
        /// <summary>Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>List of eligibility types that are included in `enhanced_evidence`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_enhanced_eligibility_types?>? EnhancedEligibilityTypes { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_enhanced_eligibility_types?> EnhancedEligibilityTypes { get; set; }
#endif
        /// <summary>The evidence property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence? Evidence { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence Evidence { get; set; }
#endif
        /// <summary>The evidence_details property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence_details? EvidenceDetails { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence_details EvidenceDetails { get; set; }
#endif
        /// <summary>Unique identifier for the object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>If true, it&apos;s still possible to refund the disputed payment. After the payment has been fully refunded, no further funds are withdrawn from your Stripe account as a result of this dispute.</summary>
        public bool? IsChargeRefundable { get; set; }
        /// <summary>Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.</summary>
        public bool? Livemode { get; set; }
        /// <summary>Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Dispute_metadata? Metadata { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Dispute_metadata Metadata { get; set; }
#endif
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Dispute_object? Object { get; set; }
        /// <summary>ID of the PaymentIntent that&apos;s disputed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Dispute.Dispute_payment_intent? PaymentIntent { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Dispute.Dispute_payment_intent PaymentIntent { get; set; }
#endif
        /// <summary>The payment_method_details property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Dispute_payment_method_details? PaymentMethodDetails { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Dispute_payment_method_details PaymentMethodDetails { get; set; }
#endif
        /// <summary>Reason given by cardholder for dispute. Possible values are `bank_cannot_process`, `check_returned`, `credit_not_processed`, `customer_initiated`, `debit_not_authorized`, `duplicate`, `fraudulent`, `general`, `incorrect_account_details`, `insufficient_funds`, `noncompliant`, `product_not_received`, `product_unacceptable`, `subscription_canceled`, or `unrecognized`. Learn more about [dispute reasons](https://stripe.com/docs/disputes/categories).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Reason { get; set; }
#nullable restore
#else
        public string Reason { get; set; }
#endif
        /// <summary>The current status of a dispute. Possible values include:`warning_needs_response`, `warning_under_review`, `warning_closed`, `needs_response`, `under_review`, `won`, `lost`, or `prevented`.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Dispute_status? Status { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Dispute"/> and sets the default values.
        /// </summary>
        public Dispute()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Dispute"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Dispute CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Dispute();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount", n => { Amount = n.GetIntValue(); } },
                { "balance_transactions", n => { BalanceTransactions = n.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction>(global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction.CreateFromDiscriminatorValue)?.AsList(); } },
                { "charge", n => { Charge = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute.Dispute_charge>(global::Soenneker.Stripe.OpenApiClient.Models.Dispute.Dispute_charge.CreateFromDiscriminatorValue); } },
                { "created", n => { Created = n.GetIntValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "enhanced_eligibility_types", n => { EnhancedEligibilityTypes = n.GetCollectionOfEnumValues<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_enhanced_eligibility_types>()?.AsList(); } },
                { "evidence", n => { Evidence = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence>(global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.CreateFromDiscriminatorValue); } },
                { "evidence_details", n => { EvidenceDetails = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence_details>(global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence_details.CreateFromDiscriminatorValue); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "is_charge_refundable", n => { IsChargeRefundable = n.GetBoolValue(); } },
                { "livemode", n => { Livemode = n.GetBoolValue(); } },
                { "metadata", n => { Metadata = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_metadata>(global::Soenneker.Stripe.OpenApiClient.Models.Dispute_metadata.CreateFromDiscriminatorValue); } },
                { "object", n => { Object = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_object>(); } },
                { "payment_intent", n => { PaymentIntent = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute.Dispute_payment_intent>(global::Soenneker.Stripe.OpenApiClient.Models.Dispute.Dispute_payment_intent.CreateFromDiscriminatorValue); } },
                { "payment_method_details", n => { PaymentMethodDetails = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_payment_method_details>(global::Soenneker.Stripe.OpenApiClient.Models.Dispute_payment_method_details.CreateFromDiscriminatorValue); } },
                { "reason", n => { Reason = n.GetStringValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_status>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("amount", Amount);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction>("balance_transactions", BalanceTransactions);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute.Dispute_charge>("charge", Charge);
            writer.WriteIntValue("created", Created);
            writer.WriteStringValue("currency", Currency);
            writer.WriteCollectionOfEnumValues<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_enhanced_eligibility_types>("enhanced_eligibility_types", EnhancedEligibilityTypes);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence>("evidence", Evidence);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence_details>("evidence_details", EvidenceDetails);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("is_charge_refundable", IsChargeRefundable);
            writer.WriteBoolValue("livemode", Livemode);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_metadata>("metadata", Metadata);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_object>("object", Object);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute.Dispute_payment_intent>("payment_intent", PaymentIntent);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_payment_method_details>("payment_method_details", PaymentMethodDetails);
            writer.WriteStringValue("reason", Reason);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_status>("status", Status);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Charge"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Dispute_charge : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Charge"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Charge? Charge { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Charge Charge { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Dispute.Dispute_charge"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Dispute.Dispute_charge CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Dispute.Dispute_charge();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.Charge = new global::Soenneker.Stripe.OpenApiClient.Models.Charge();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(Charge != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(Charge);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Charge>(null, Charge);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Dispute_payment_intent : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent? PaymentIntent { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent PaymentIntent { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Dispute.Dispute_payment_intent"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Dispute.Dispute_payment_intent CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Dispute.Dispute_payment_intent();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.PaymentIntent = new global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(PaymentIntent != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(PaymentIntent);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent>(null, PaymentIntent);
                }
            }
        }
    }
}
#pragma warning restore CS0618
