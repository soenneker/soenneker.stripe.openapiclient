// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models.Tax
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Transaction_line_item : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The line item amount in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). If `tax_behavior=inclusive`, then this amount includes taxes. Otherwise, taxes were calculated on top of this amount.</summary>
        public int? Amount { get; set; }
        /// <summary>The amount of tax calculated for this line item, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).</summary>
        public int? AmountTax { get; set; }
        /// <summary>Unique identifier for the object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.</summary>
        public bool? Livemode { get; set; }
        /// <summary>Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Tax.Transaction_line_item_metadata? Metadata { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Tax.Transaction_line_item_metadata Metadata { get; set; }
#endif
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Tax.Transaction_line_item_object? Object { get; set; }
        /// <summary>The ID of an existing [Product](https://stripe.com/docs/api/products/object).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Product { get; set; }
#nullable restore
#else
        public string Product { get; set; }
#endif
        /// <summary>The number of units of the item being purchased. For reversals, this is the quantity reversed.</summary>
        public int? Quantity { get; set; }
        /// <summary>A custom identifier for this line item in the transaction.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Reference { get; set; }
#nullable restore
#else
        public string Reference { get; set; }
#endif
        /// <summary>If `type=reversal`, contains information about what was reversed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Tax_product_resource_tax_transaction_line_item_resource_reversal? Reversal { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Tax_product_resource_tax_transaction_line_item_resource_reversal Reversal { get; set; }
#endif
        /// <summary>Specifies whether the `amount` includes taxes. If `tax_behavior=inclusive`, then the amount includes taxes.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Tax.Transaction_line_item_tax_behavior? TaxBehavior { get; set; }
        /// <summary>The [tax code](https://stripe.com/docs/tax/tax-categories) ID used for this resource.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TaxCode { get; set; }
#nullable restore
#else
        public string TaxCode { get; set; }
#endif
        /// <summary>If `reversal`, this line item reverses an earlier transaction.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Tax.Transaction_line_item_type? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Tax.Transaction_line_item"/> and sets the default values.
        /// </summary>
        public Transaction_line_item()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Tax.Transaction_line_item"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Tax.Transaction_line_item CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Tax.Transaction_line_item();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount", n => { Amount = n.GetIntValue(); } },
                { "amount_tax", n => { AmountTax = n.GetIntValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "livemode", n => { Livemode = n.GetBoolValue(); } },
                { "metadata", n => { Metadata = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Tax.Transaction_line_item_metadata>(global::Soenneker.Stripe.OpenApiClient.Models.Tax.Transaction_line_item_metadata.CreateFromDiscriminatorValue); } },
                { "object", n => { Object = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Tax.Transaction_line_item_object>(); } },
                { "product", n => { Product = n.GetStringValue(); } },
                { "quantity", n => { Quantity = n.GetIntValue(); } },
                { "reference", n => { Reference = n.GetStringValue(); } },
                { "reversal", n => { Reversal = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Tax_product_resource_tax_transaction_line_item_resource_reversal>(global::Soenneker.Stripe.OpenApiClient.Models.Tax_product_resource_tax_transaction_line_item_resource_reversal.CreateFromDiscriminatorValue); } },
                { "tax_behavior", n => { TaxBehavior = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Tax.Transaction_line_item_tax_behavior>(); } },
                { "tax_code", n => { TaxCode = n.GetStringValue(); } },
                { "type", n => { Type = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Tax.Transaction_line_item_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("amount", Amount);
            writer.WriteIntValue("amount_tax", AmountTax);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("livemode", Livemode);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Tax.Transaction_line_item_metadata>("metadata", Metadata);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Tax.Transaction_line_item_object>("object", Object);
            writer.WriteStringValue("product", Product);
            writer.WriteIntValue("quantity", Quantity);
            writer.WriteStringValue("reference", Reference);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Tax_product_resource_tax_transaction_line_item_resource_reversal>("reversal", Reversal);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Tax.Transaction_line_item_tax_behavior>("tax_behavior", TaxBehavior);
            writer.WriteStringValue("tax_code", TaxCode);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Tax.Transaction_line_item_type>("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
