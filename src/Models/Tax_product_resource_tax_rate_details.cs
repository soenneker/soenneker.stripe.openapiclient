// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Tax_product_resource_tax_rate_details : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Country { get; set; }
#nullable restore
#else
        public string Country { get; set; }
#endif
        /// <summary>The amount of the tax rate when the `rate_type` is `flat_amount`. Tax rates with `rate_type` `percentage` can vary based on the transaction, resulting in this field being `null`. This field exposes the amount and currency of the flat tax rate.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate_flat_amount? FlatAmount { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate_flat_amount FlatAmount { get; set; }
#endif
        /// <summary>The tax rate percentage as a string. For example, 8.5% is represented as `&quot;8.5&quot;`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PercentageDecimal { get; set; }
#nullable restore
#else
        public string PercentageDecimal { get; set; }
#endif
        /// <summary>Indicates the type of tax rate applied to the taxable amount. This value can be `null` when no tax applies to the location. This field is only present for TaxRates created by Stripe Tax.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Tax_product_resource_tax_rate_details_rate_type? RateType { get; set; }
        /// <summary>State, county, province, or region.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? State { get; set; }
#nullable restore
#else
        public string State { get; set; }
#endif
        /// <summary>The tax type, such as `vat` or `sales_tax`.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Tax_product_resource_tax_rate_details_tax_type? TaxType { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Tax_product_resource_tax_rate_details"/> and sets the default values.
        /// </summary>
        public Tax_product_resource_tax_rate_details()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Tax_product_resource_tax_rate_details"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Tax_product_resource_tax_rate_details CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Tax_product_resource_tax_rate_details();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "country", n => { Country = n.GetStringValue(); } },
                { "flat_amount", n => { FlatAmount = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate_flat_amount>(global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate_flat_amount.CreateFromDiscriminatorValue); } },
                { "percentage_decimal", n => { PercentageDecimal = n.GetStringValue(); } },
                { "rate_type", n => { RateType = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Tax_product_resource_tax_rate_details_rate_type>(); } },
                { "state", n => { State = n.GetStringValue(); } },
                { "tax_type", n => { TaxType = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Tax_product_resource_tax_rate_details_tax_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("country", Country);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate_flat_amount>("flat_amount", FlatAmount);
            writer.WriteStringValue("percentage_decimal", PercentageDecimal);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Tax_product_resource_tax_rate_details_rate_type>("rate_type", RateType);
            writer.WriteStringValue("state", State);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Tax_product_resource_tax_rate_details_tax_type>("tax_type", TaxType);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
