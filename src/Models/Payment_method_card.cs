// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Payment_method_card : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Card brand. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `jcb`, `link`, `mastercard`, `unionpay`, `visa` or `unknown`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Brand { get; set; }
#nullable restore
#else
        public string Brand { get; set; }
#endif
        /// <summary>Checks on Card address and CVC if provided.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_card_checks? Checks { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_card_checks Checks { get; set; }
#endif
        /// <summary>Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you&apos;ve collected.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Country { get; set; }
#nullable restore
#else
        public string Country { get; set; }
#endif
        /// <summary>The brand to use when displaying the card, this accounts for customer&apos;s brand choice on dual-branded cards. Can be `american_express`, `cartes_bancaires`, `diners_club`, `discover`, `eftpos_australia`, `interac`, `jcb`, `mastercard`, `union_pay`, `visa`, or `other` and may contain more values in the future.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayBrand { get; set; }
#nullable restore
#else
        public string DisplayBrand { get; set; }
#endif
        /// <summary>Two-digit number representing the card&apos;s expiration month.</summary>
        public int? ExpMonth { get; set; }
        /// <summary>Four-digit number representing the card&apos;s expiration year.</summary>
        public int? ExpYear { get; set; }
        /// <summary>Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâ€™ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.*As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Fingerprint { get; set; }
#nullable restore
#else
        public string Fingerprint { get; set; }
#endif
        /// <summary>Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Funding { get; set; }
#nullable restore
#else
        public string Funding { get; set; }
#endif
        /// <summary>Details of the original PaymentMethod that created this object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_card_generated_card? GeneratedFrom { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_card_generated_card GeneratedFrom { get; set; }
#endif
        /// <summary>The last four digits of the card.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Last4 { get; set; }
#nullable restore
#else
        public string Last4 { get; set; }
#endif
        /// <summary>Contains information about card networks that can be used to process the payment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Networks? Networks { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Networks Networks { get; set; }
#endif
        /// <summary>Status of a card based on the card issuer.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_card_regulated_status? RegulatedStatus { get; set; }
        /// <summary>Contains details on how this Card may be used for 3D Secure authentication.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Three_d_secure_usage? ThreeDSecureUsage { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Three_d_secure_usage ThreeDSecureUsage { get; set; }
#endif
        /// <summary>If this Card is part of a card wallet, this contains the details of the card wallet.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_card_wallet? Wallet { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_card_wallet Wallet { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_card"/> and sets the default values.
        /// </summary>
        public Payment_method_card()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_card"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_card CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_card();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "brand", n => { Brand = n.GetStringValue(); } },
                { "checks", n => { Checks = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_card_checks>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_card_checks.CreateFromDiscriminatorValue); } },
                { "country", n => { Country = n.GetStringValue(); } },
                { "display_brand", n => { DisplayBrand = n.GetStringValue(); } },
                { "exp_month", n => { ExpMonth = n.GetIntValue(); } },
                { "exp_year", n => { ExpYear = n.GetIntValue(); } },
                { "fingerprint", n => { Fingerprint = n.GetStringValue(); } },
                { "funding", n => { Funding = n.GetStringValue(); } },
                { "generated_from", n => { GeneratedFrom = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_card_generated_card>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_card_generated_card.CreateFromDiscriminatorValue); } },
                { "last4", n => { Last4 = n.GetStringValue(); } },
                { "networks", n => { Networks = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Networks>(global::Soenneker.Stripe.OpenApiClient.Models.Networks.CreateFromDiscriminatorValue); } },
                { "regulated_status", n => { RegulatedStatus = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_card_regulated_status>(); } },
                { "three_d_secure_usage", n => { ThreeDSecureUsage = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Three_d_secure_usage>(global::Soenneker.Stripe.OpenApiClient.Models.Three_d_secure_usage.CreateFromDiscriminatorValue); } },
                { "wallet", n => { Wallet = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_card_wallet>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_card_wallet.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("brand", Brand);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_card_checks>("checks", Checks);
            writer.WriteStringValue("country", Country);
            writer.WriteStringValue("display_brand", DisplayBrand);
            writer.WriteIntValue("exp_month", ExpMonth);
            writer.WriteIntValue("exp_year", ExpYear);
            writer.WriteStringValue("fingerprint", Fingerprint);
            writer.WriteStringValue("funding", Funding);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_card_generated_card>("generated_from", GeneratedFrom);
            writer.WriteStringValue("last4", Last4);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Networks>("networks", Networks);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_card_regulated_status>("regulated_status", RegulatedStatus);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Three_d_secure_usage>("three_d_secure_usage", ThreeDSecureUsage);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_card_wallet>("wallet", Wallet);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
