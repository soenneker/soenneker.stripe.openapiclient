// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class External_account_requirements : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Fields that need to be collected to keep the external account enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the account is disabled.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? CurrentlyDue { get; set; }
#nullable restore
#else
        public List<string> CurrentlyDue { get; set; }
#endif
        /// <summary>Fields that are `currently_due` and need to be collected again because validation or verification failed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Account_requirements_error>? Errors { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Account_requirements_error> Errors { get; set; }
#endif
        /// <summary>Fields that weren&apos;t collected by `current_deadline`. These fields need to be collected to enable the external account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? PastDue { get; set; }
#nullable restore
#else
        public List<string> PastDue { get; set; }
#endif
        /// <summary>Fields that might become required depending on the results of verification or review. It&apos;s an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. Fields might appear in `eventually_due`, `currently_due`, or `past_due` and in `pending_verification` if verification fails but another verification is still pending.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? PendingVerification { get; set; }
#nullable restore
#else
        public List<string> PendingVerification { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.External_account_requirements"/> and sets the default values.
        /// </summary>
        public External_account_requirements()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.External_account_requirements"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.External_account_requirements CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.External_account_requirements();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "currently_due", n => { CurrentlyDue = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "errors", n => { Errors = n.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Account_requirements_error>(global::Soenneker.Stripe.OpenApiClient.Models.Account_requirements_error.CreateFromDiscriminatorValue)?.AsList(); } },
                { "past_due", n => { PastDue = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "pending_verification", n => { PendingVerification = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("currently_due", CurrentlyDue);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Account_requirements_error>("errors", Errors);
            writer.WriteCollectionOfPrimitiveValues<string>("past_due", PastDue);
            writer.WriteCollectionOfPrimitiveValues<string>("pending_verification", PendingVerification);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
