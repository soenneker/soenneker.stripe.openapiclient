// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Person_relationship : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Whether the person is the authorizer of the account&apos;s representative.</summary>
        public bool? Authorizer { get; set; }
        /// <summary>Whether the person is a director of the account&apos;s legal entity. Directors are typically members of the governing board of the company, or responsible for ensuring the company meets its regulatory obligations.</summary>
        public bool? Director { get; set; }
        /// <summary>Whether the person has significant responsibility to control, manage, or direct the organization.</summary>
        public bool? Executive { get; set; }
        /// <summary>Whether the person is the legal guardian of the account&apos;s representative.</summary>
        public bool? LegalGuardian { get; set; }
        /// <summary>Whether the person is an owner of the accountâ€™s legal entity.</summary>
        public bool? Owner { get; set; }
        /// <summary>The percent owned by the person of the account&apos;s legal entity.</summary>
        public double? PercentOwnership { get; set; }
        /// <summary>Whether the person is authorized as the primary representative of the account. This is the person nominated by the business to provide information about themselves, and general information about the account. There can only be one representative at any given time. At the time the account is created, this person should be set to the person responsible for opening the account.</summary>
        public bool? Representative { get; set; }
        /// <summary>The person&apos;s title (e.g., CEO, Support Engineer).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Person_relationship"/> and sets the default values.
        /// </summary>
        public Person_relationship()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Person_relationship"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Person_relationship CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Person_relationship();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "authorizer", n => { Authorizer = n.GetBoolValue(); } },
                { "director", n => { Director = n.GetBoolValue(); } },
                { "executive", n => { Executive = n.GetBoolValue(); } },
                { "legal_guardian", n => { LegalGuardian = n.GetBoolValue(); } },
                { "owner", n => { Owner = n.GetBoolValue(); } },
                { "percent_ownership", n => { PercentOwnership = n.GetDoubleValue(); } },
                { "representative", n => { Representative = n.GetBoolValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("authorizer", Authorizer);
            writer.WriteBoolValue("director", Director);
            writer.WriteBoolValue("executive", Executive);
            writer.WriteBoolValue("legal_guardian", LegalGuardian);
            writer.WriteBoolValue("owner", Owner);
            writer.WriteDoubleValue("percent_ownership", PercentOwnership);
            writer.WriteBoolValue("representative", Representative);
            writer.WriteStringValue("title", Title);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
