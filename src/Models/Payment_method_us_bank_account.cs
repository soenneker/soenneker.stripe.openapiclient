// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Payment_method_us_bank_account : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Account holder type: individual or company.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_us_bank_account_account_holder_type? AccountHolderType { get; set; }
        /// <summary>Account type: checkings or savings. Defaults to checking if omitted.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_us_bank_account_account_type? AccountType { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The name of the bank.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BankName { get; set; }
#nullable restore
#else
        public string BankName { get; set; }
#endif
        /// <summary>The ID of the Financial Connections Account used to create the payment method.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FinancialConnectionsAccount { get; set; }
#nullable restore
#else
        public string FinancialConnectionsAccount { get; set; }
#endif
        /// <summary>Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Fingerprint { get; set; }
#nullable restore
#else
        public string Fingerprint { get; set; }
#endif
        /// <summary>Last four digits of the bank account number.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Last4 { get; set; }
#nullable restore
#else
        public string Last4 { get; set; }
#endif
        /// <summary>Contains information about US bank account networks that can be used.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Us_bank_account_networks? Networks { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Us_bank_account_networks Networks { get; set; }
#endif
        /// <summary>Routing number of the bank account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RoutingNumber { get; set; }
#nullable restore
#else
        public string RoutingNumber { get; set; }
#endif
        /// <summary>Contains information about the future reusability of this PaymentMethod.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_us_bank_account_status_details? StatusDetails { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_us_bank_account_status_details StatusDetails { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_us_bank_account"/> and sets the default values.
        /// </summary>
        public Payment_method_us_bank_account()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_us_bank_account"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_us_bank_account CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_us_bank_account();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "account_holder_type", n => { AccountHolderType = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_us_bank_account_account_holder_type>(); } },
                { "account_type", n => { AccountType = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_us_bank_account_account_type>(); } },
                { "bank_name", n => { BankName = n.GetStringValue(); } },
                { "financial_connections_account", n => { FinancialConnectionsAccount = n.GetStringValue(); } },
                { "fingerprint", n => { Fingerprint = n.GetStringValue(); } },
                { "last4", n => { Last4 = n.GetStringValue(); } },
                { "networks", n => { Networks = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Us_bank_account_networks>(global::Soenneker.Stripe.OpenApiClient.Models.Us_bank_account_networks.CreateFromDiscriminatorValue); } },
                { "routing_number", n => { RoutingNumber = n.GetStringValue(); } },
                { "status_details", n => { StatusDetails = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_us_bank_account_status_details>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_us_bank_account_status_details.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_us_bank_account_account_holder_type>("account_holder_type", AccountHolderType);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_us_bank_account_account_type>("account_type", AccountType);
            writer.WriteStringValue("bank_name", BankName);
            writer.WriteStringValue("financial_connections_account", FinancialConnectionsAccount);
            writer.WriteStringValue("fingerprint", Fingerprint);
            writer.WriteStringValue("last4", Last4);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Us_bank_account_networks>("networks", Networks);
            writer.WriteStringValue("routing_number", RoutingNumber);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_us_bank_account_status_details>("status_details", StatusDetails);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
