// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    /// <summary>
    /// A phase item describes the price and quantity of a phase.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Subscription_schedule_configuration_item : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription_item_billing_thresholds? BillingThresholds { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription_item_billing_thresholds BillingThresholds { get; set; }
#endif
        /// <summary>The discounts applied to the subscription item. Subscription item discounts are applied before subscription discounts. Use `expand[]=discounts` to expand each discount.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Discounts_resource_stackable_discount>? Discounts { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Discounts_resource_stackable_discount> Discounts { get; set; }
#endif
        /// <summary>Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an item. Metadata on this item will update the underlying subscription item&apos;s `metadata` when the phase is entered.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_configuration_item_metadata? Metadata { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_configuration_item_metadata Metadata { get; set; }
#endif
        /// <summary>ID of the price to which the customer should be subscribed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_configuration_item.Subscription_schedule_configuration_item_price? Price { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_configuration_item.Subscription_schedule_configuration_item_price Price { get; set; }
#endif
        /// <summary>Quantity of the plan to which the customer should be subscribed.</summary>
        public int? Quantity { get; set; }
        /// <summary>The tax rates which apply to this `phase_item`. When set, the `default_tax_rates` on the phase do not apply to this `phase_item`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate>? TaxRates { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate> TaxRates { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_configuration_item"/> and sets the default values.
        /// </summary>
        public Subscription_schedule_configuration_item()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_configuration_item"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_configuration_item CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_configuration_item();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "billing_thresholds", n => { BillingThresholds = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_item_billing_thresholds>(global::Soenneker.Stripe.OpenApiClient.Models.Subscription_item_billing_thresholds.CreateFromDiscriminatorValue); } },
                { "discounts", n => { Discounts = n.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Discounts_resource_stackable_discount>(global::Soenneker.Stripe.OpenApiClient.Models.Discounts_resource_stackable_discount.CreateFromDiscriminatorValue)?.AsList(); } },
                { "metadata", n => { Metadata = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_configuration_item_metadata>(global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_configuration_item_metadata.CreateFromDiscriminatorValue); } },
                { "price", n => { Price = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_configuration_item.Subscription_schedule_configuration_item_price>(global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_configuration_item.Subscription_schedule_configuration_item_price.CreateFromDiscriminatorValue); } },
                { "quantity", n => { Quantity = n.GetIntValue(); } },
                { "tax_rates", n => { TaxRates = n.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate>(global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_item_billing_thresholds>("billing_thresholds", BillingThresholds);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Discounts_resource_stackable_discount>("discounts", Discounts);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_configuration_item_metadata>("metadata", Metadata);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_configuration_item.Subscription_schedule_configuration_item_price>("price", Price);
            writer.WriteIntValue("quantity", Quantity);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate>("tax_rates", TaxRates);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Deleted_price"/>, <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Price"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Subscription_schedule_configuration_item_price : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Deleted_price"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Deleted_price? DeletedPrice { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Deleted_price DeletedPrice { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Price"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Price? Price { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Price Price { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_configuration_item.Subscription_schedule_configuration_item_price"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_configuration_item.Subscription_schedule_configuration_item_price CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_configuration_item.Subscription_schedule_configuration_item_price();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.DeletedPrice = new global::Soenneker.Stripe.OpenApiClient.Models.Deleted_price();
                    result.Price = new global::Soenneker.Stripe.OpenApiClient.Models.Price();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(DeletedPrice != null || Price != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(DeletedPrice, Price);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Deleted_price>(null, DeletedPrice, Price);
                }
            }
        }
    }
}
#pragma warning restore CS0618
