// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    /// <summary>
    /// `ExchangeRate` objects allow you to determine the rates that Stripe is currentlyusing to convert from one currency to another. Since this number is variablethroughout the day, there are various reasons why you might want to know the currentrate (for example, to dynamically price an item for a user with a defaultpayment in a foreign currency).Please refer to our [Exchange Rates API](https://stripe.com/docs/fx-rates) guide for more details.*[Note: this integration path is supported but no longer recommended]* Additionally,you can guarantee that a charge is made with an exchange rate that you expect iscurrent. To do so, you must pass in the exchange_rate to charges endpoints. If thevalue is no longer up to date, the charge won&apos;t go through. Please refer to our[Using with charges](https://stripe.com/docs/exchange-rates) guide for more details.-----&amp;nbsp;*This Exchange Rates API is a Beta Service and is subject to Stripe&apos;s terms of service. You may use the API solely for the purpose of transacting on Stripe. For example, the API may be queried in order to:*- *localize prices for processing payments on Stripe*- *reconcile Stripe transactions*- *determine how much money to send to a connected account*- *determine app fees to charge a connected account**Using this Exchange Rates API beta for any purpose other than to transact on Stripe is strictly prohibited and constitutes a violation of Stripe&apos;s terms of service.*
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Exchange_rate : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Unique identifier for the object. Represented as the three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) in lowercase.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Exchange_rate_object? Object { get; set; }
        /// <summary>Hash where the keys are supported currencies and the values are the exchange rate at which the base id currency converts to the key currency.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Exchange_rate_rates? Rates { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Exchange_rate_rates Rates { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Exchange_rate"/> and sets the default values.
        /// </summary>
        public Exchange_rate()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Exchange_rate"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Exchange_rate CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Exchange_rate();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "id", n => { Id = n.GetStringValue(); } },
                { "object", n => { Object = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Exchange_rate_object>(); } },
                { "rates", n => { Rates = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Exchange_rate_rates>(global::Soenneker.Stripe.OpenApiClient.Models.Exchange_rate_rates.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("id", Id);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Exchange_rate_object>("object", Object);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Exchange_rate_rates>("rates", Rates);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
