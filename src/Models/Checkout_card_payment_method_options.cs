// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Checkout_card_payment_method_options : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The installments property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout_card_installments_options? Installments { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout_card_installments_options Installments { get; set; }
#endif
        /// <summary>Request ability to [capture beyond the standard authorization validity window](/payments/extended-authorization) for this CheckoutSession.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout_card_payment_method_options_request_extended_authorization? RequestExtendedAuthorization { get; set; }
        /// <summary>Request ability to [increment the authorization](/payments/incremental-authorization) for this CheckoutSession.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout_card_payment_method_options_request_incremental_authorization? RequestIncrementalAuthorization { get; set; }
        /// <summary>Request ability to make [multiple captures](/payments/multicapture) for this CheckoutSession.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout_card_payment_method_options_request_multicapture? RequestMulticapture { get; set; }
        /// <summary>Request ability to [overcapture](/payments/overcapture) for this CheckoutSession.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout_card_payment_method_options_request_overcapture? RequestOvercapture { get; set; }
        /// <summary>We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. If not provided, this value defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout_card_payment_method_options_request_three_d_secure? RequestThreeDSecure { get; set; }
        /// <summary>The restrictions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_private_card_payment_method_options_resource_restrictions? Restrictions { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_private_card_payment_method_options_resource_restrictions Restrictions { get; set; }
#endif
        /// <summary>Indicates that you intend to make future payments with this PaymentIntent&apos;s payment method.If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don&apos;t provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.If the payment method is `card_present` and isn&apos;t a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Checkout_card_payment_method_options_setup_future_usage? SetupFutureUsage { get; set; }
        /// <summary>Provides information about a card payment that customers see on their statements. Concatenated with the Kana prefix (shortened Kana descriptor) or Kana statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 22 characters.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StatementDescriptorSuffixKana { get; set; }
#nullable restore
#else
        public string StatementDescriptorSuffixKana { get; set; }
#endif
        /// <summary>Provides information about a card payment that customers see on their statements. Concatenated with the Kanji prefix (shortened Kanji descriptor) or Kanji statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 17 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 17 characters.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StatementDescriptorSuffixKanji { get; set; }
#nullable restore
#else
        public string StatementDescriptorSuffixKanji { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Checkout_card_payment_method_options"/> and sets the default values.
        /// </summary>
        public Checkout_card_payment_method_options()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Checkout_card_payment_method_options"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Checkout_card_payment_method_options CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Checkout_card_payment_method_options();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "installments", n => { Installments = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout_card_installments_options>(global::Soenneker.Stripe.OpenApiClient.Models.Checkout_card_installments_options.CreateFromDiscriminatorValue); } },
                { "request_extended_authorization", n => { RequestExtendedAuthorization = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout_card_payment_method_options_request_extended_authorization>(); } },
                { "request_incremental_authorization", n => { RequestIncrementalAuthorization = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout_card_payment_method_options_request_incremental_authorization>(); } },
                { "request_multicapture", n => { RequestMulticapture = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout_card_payment_method_options_request_multicapture>(); } },
                { "request_overcapture", n => { RequestOvercapture = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout_card_payment_method_options_request_overcapture>(); } },
                { "request_three_d_secure", n => { RequestThreeDSecure = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout_card_payment_method_options_request_three_d_secure>(); } },
                { "restrictions", n => { Restrictions = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_private_card_payment_method_options_resource_restrictions>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_private_card_payment_method_options_resource_restrictions.CreateFromDiscriminatorValue); } },
                { "setup_future_usage", n => { SetupFutureUsage = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout_card_payment_method_options_setup_future_usage>(); } },
                { "statement_descriptor_suffix_kana", n => { StatementDescriptorSuffixKana = n.GetStringValue(); } },
                { "statement_descriptor_suffix_kanji", n => { StatementDescriptorSuffixKanji = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout_card_installments_options>("installments", Installments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout_card_payment_method_options_request_extended_authorization>("request_extended_authorization", RequestExtendedAuthorization);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout_card_payment_method_options_request_incremental_authorization>("request_incremental_authorization", RequestIncrementalAuthorization);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout_card_payment_method_options_request_multicapture>("request_multicapture", RequestMulticapture);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout_card_payment_method_options_request_overcapture>("request_overcapture", RequestOvercapture);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout_card_payment_method_options_request_three_d_secure>("request_three_d_secure", RequestThreeDSecure);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_pages_private_card_payment_method_options_resource_restrictions>("restrictions", Restrictions);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Checkout_card_payment_method_options_setup_future_usage>("setup_future_usage", SetupFutureUsage);
            writer.WriteStringValue("statement_descriptor_suffix_kana", StatementDescriptorSuffixKana);
            writer.WriteStringValue("statement_descriptor_suffix_kanji", StatementDescriptorSuffixKanji);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
