// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models.Climate
{
    /// <summary>
    /// A Climate product represents a type of carbon removal unit available for reservation.You can retrieve it to see the current price and availability.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Product : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Time at which the object was created. Measured in seconds since the Unix epoch.</summary>
        public int? Created { get; set; }
        /// <summary>Current prices for a metric ton of carbon removal in a currency&apos;s smallest unit.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Climate.Product_current_prices_per_metric_ton? CurrentPricesPerMetricTon { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Climate.Product_current_prices_per_metric_ton CurrentPricesPerMetricTon { get; set; }
#endif
        /// <summary>The year in which the carbon removal is expected to be delivered.</summary>
        public int? DeliveryYear { get; set; }
        /// <summary>Unique identifier for the object. For convenience, Climate product IDs are human-readable stringsthat start with `climsku_`. See [carbon removal inventory](https://stripe.com/docs/climate/orders/carbon-removal-inventory)for a list of available carbon removal products.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.</summary>
        public bool? Livemode { get; set; }
        /// <summary>The quantity of metric tons available for reservation.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MetricTonsAvailable { get; set; }
#nullable restore
#else
        public string MetricTonsAvailable { get; set; }
#endif
        /// <summary>The Climate product&apos;s name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Climate.Product_object? Object { get; set; }
        /// <summary>The carbon removal suppliers that fulfill orders for this Climate product.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Climate.Supplier>? Suppliers { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Climate.Supplier> Suppliers { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Climate.Product"/> and sets the default values.
        /// </summary>
        public Product()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Climate.Product"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Climate.Product CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Climate.Product();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "created", n => { Created = n.GetIntValue(); } },
                { "current_prices_per_metric_ton", n => { CurrentPricesPerMetricTon = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Climate.Product_current_prices_per_metric_ton>(global::Soenneker.Stripe.OpenApiClient.Models.Climate.Product_current_prices_per_metric_ton.CreateFromDiscriminatorValue); } },
                { "delivery_year", n => { DeliveryYear = n.GetIntValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "livemode", n => { Livemode = n.GetBoolValue(); } },
                { "metric_tons_available", n => { MetricTonsAvailable = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "object", n => { Object = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Climate.Product_object>(); } },
                { "suppliers", n => { Suppliers = n.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Climate.Supplier>(global::Soenneker.Stripe.OpenApiClient.Models.Climate.Supplier.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("created", Created);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Climate.Product_current_prices_per_metric_ton>("current_prices_per_metric_ton", CurrentPricesPerMetricTon);
            writer.WriteIntValue("delivery_year", DeliveryYear);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("livemode", Livemode);
            writer.WriteStringValue("metric_tons_available", MetricTonsAvailable);
            writer.WriteStringValue("name", Name);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Climate.Product_object>("object", Object);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Climate.Supplier>("suppliers", Suppliers);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
