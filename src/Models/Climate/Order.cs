// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models.Climate
{
    /// <summary>
    /// Orders represent your intent to purchase a particular Climate product. When you create an order, thepayment is deducted from your merchant balance.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Order : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Total amount of [Frontier](https://frontierclimate.com/)&apos;s service fees in the currency&apos;s smallest unit.</summary>
        public int? AmountFees { get; set; }
        /// <summary>Total amount of the carbon removal in the currency&apos;s smallest unit.</summary>
        public int? AmountSubtotal { get; set; }
        /// <summary>Total amount of the order including fees in the currency&apos;s smallest unit.</summary>
        public int? AmountTotal { get; set; }
        /// <summary>The beneficiary property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Climate_removals_beneficiary? Beneficiary { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Climate_removals_beneficiary Beneficiary { get; set; }
#endif
        /// <summary>Time at which the order was canceled. Measured in seconds since the Unix epoch.</summary>
        public int? CanceledAt { get; set; }
        /// <summary>Reason for the cancellation of this order.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Climate.Order_cancellation_reason? CancellationReason { get; set; }
        /// <summary>For delivered orders, a URL to a delivery certificate for the order.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Certificate { get; set; }
#nullable restore
#else
        public string Certificate { get; set; }
#endif
        /// <summary>Time at which the order was confirmed. Measured in seconds since the Unix epoch.</summary>
        public int? ConfirmedAt { get; set; }
        /// <summary>Time at which the object was created. Measured in seconds since the Unix epoch.</summary>
        public int? Created { get; set; }
        /// <summary>Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase, representing the currency for this order.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>Time at which the order&apos;s expected_delivery_year was delayed. Measured in seconds since the Unix epoch.</summary>
        public int? DelayedAt { get; set; }
        /// <summary>Time at which the order was delivered. Measured in seconds since the Unix epoch.</summary>
        public int? DeliveredAt { get; set; }
        /// <summary>Details about the delivery of carbon removal for this order.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Climate_removals_order_deliveries>? DeliveryDetails { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Climate_removals_order_deliveries> DeliveryDetails { get; set; }
#endif
        /// <summary>The year this order is expected to be delivered.</summary>
        public int? ExpectedDeliveryYear { get; set; }
        /// <summary>Unique identifier for the object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.</summary>
        public bool? Livemode { get; set; }
        /// <summary>Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Climate.Order_metadata? Metadata { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Climate.Order_metadata Metadata { get; set; }
#endif
        /// <summary>Quantity of carbon removal that is included in this order.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MetricTons { get; set; }
#nullable restore
#else
        public string MetricTons { get; set; }
#endif
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Climate.Order_object? Object { get; set; }
        /// <summary>Unique ID for the Climate `Product` this order is purchasing.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Climate.Order.Order_product? Product { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Climate.Order.Order_product Product { get; set; }
#endif
        /// <summary>Time at which the order&apos;s product was substituted for a different product. Measured in seconds since the Unix epoch.</summary>
        public int? ProductSubstitutedAt { get; set; }
        /// <summary>The current status of this order.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Climate.Order_status? Status { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Climate.Order"/> and sets the default values.
        /// </summary>
        public Order()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Climate.Order"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Climate.Order CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Climate.Order();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount_fees", n => { AmountFees = n.GetIntValue(); } },
                { "amount_subtotal", n => { AmountSubtotal = n.GetIntValue(); } },
                { "amount_total", n => { AmountTotal = n.GetIntValue(); } },
                { "beneficiary", n => { Beneficiary = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Climate_removals_beneficiary>(global::Soenneker.Stripe.OpenApiClient.Models.Climate_removals_beneficiary.CreateFromDiscriminatorValue); } },
                { "canceled_at", n => { CanceledAt = n.GetIntValue(); } },
                { "cancellation_reason", n => { CancellationReason = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Climate.Order_cancellation_reason>(); } },
                { "certificate", n => { Certificate = n.GetStringValue(); } },
                { "confirmed_at", n => { ConfirmedAt = n.GetIntValue(); } },
                { "created", n => { Created = n.GetIntValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "delayed_at", n => { DelayedAt = n.GetIntValue(); } },
                { "delivered_at", n => { DeliveredAt = n.GetIntValue(); } },
                { "delivery_details", n => { DeliveryDetails = n.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Climate_removals_order_deliveries>(global::Soenneker.Stripe.OpenApiClient.Models.Climate_removals_order_deliveries.CreateFromDiscriminatorValue)?.AsList(); } },
                { "expected_delivery_year", n => { ExpectedDeliveryYear = n.GetIntValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "livemode", n => { Livemode = n.GetBoolValue(); } },
                { "metadata", n => { Metadata = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Climate.Order_metadata>(global::Soenneker.Stripe.OpenApiClient.Models.Climate.Order_metadata.CreateFromDiscriminatorValue); } },
                { "metric_tons", n => { MetricTons = n.GetStringValue(); } },
                { "object", n => { Object = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Climate.Order_object>(); } },
                { "product", n => { Product = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Climate.Order.Order_product>(global::Soenneker.Stripe.OpenApiClient.Models.Climate.Order.Order_product.CreateFromDiscriminatorValue); } },
                { "product_substituted_at", n => { ProductSubstitutedAt = n.GetIntValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Climate.Order_status>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("amount_fees", AmountFees);
            writer.WriteIntValue("amount_subtotal", AmountSubtotal);
            writer.WriteIntValue("amount_total", AmountTotal);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Climate_removals_beneficiary>("beneficiary", Beneficiary);
            writer.WriteIntValue("canceled_at", CanceledAt);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Climate.Order_cancellation_reason>("cancellation_reason", CancellationReason);
            writer.WriteStringValue("certificate", Certificate);
            writer.WriteIntValue("confirmed_at", ConfirmedAt);
            writer.WriteIntValue("created", Created);
            writer.WriteStringValue("currency", Currency);
            writer.WriteIntValue("delayed_at", DelayedAt);
            writer.WriteIntValue("delivered_at", DeliveredAt);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Climate_removals_order_deliveries>("delivery_details", DeliveryDetails);
            writer.WriteIntValue("expected_delivery_year", ExpectedDeliveryYear);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("livemode", Livemode);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Climate.Order_metadata>("metadata", Metadata);
            writer.WriteStringValue("metric_tons", MetricTons);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Climate.Order_object>("object", Object);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Climate.Order.Order_product>("product", Product);
            writer.WriteIntValue("product_substituted_at", ProductSubstitutedAt);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Climate.Order_status>("status", Status);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Climate.Product"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Order_product : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Climate.Product"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Climate.Product? Product { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Climate.Product Product { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Climate.Order.Order_product"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Climate.Order.Order_product CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Climate.Order.Order_product();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.Product = new global::Soenneker.Stripe.OpenApiClient.Models.Climate.Product();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(Product != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(Product);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Climate.Product>(null, Product);
                }
            }
        }
    }
}
#pragma warning restore CS0618
