// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    /// <summary>
    /// A phase describes the plans, coupon, and trialing status of a subscription for a predefined time period.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Subscription_schedule_phase_configuration : IAdditionalDataHolder, IParsable
    {
        /// <summary>A list of prices and quantities that will generate invoice items appended to the next invoice for this phase.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_add_invoice_item>? AddInvoiceItems { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_add_invoice_item> AddInvoiceItems { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner&apos;s Stripe account during this phase of the schedule.</summary>
        public double? ApplicationFeePercent { get; set; }
        /// <summary>The automatic_tax property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Schedules_phase_automatic_tax? AutomaticTax { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Schedules_phase_automatic_tax AutomaticTax { get; set; }
#endif
        /// <summary>Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_phase_configuration_billing_cycle_anchor? BillingCycleAnchor { get; set; }
        /// <summary>Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription_billing_thresholds? BillingThresholds { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription_billing_thresholds BillingThresholds { get; set; }
#endif
        /// <summary>Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_phase_configuration_collection_method? CollectionMethod { get; set; }
        /// <summary>Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>ID of the default payment method for the subscription schedule. It must belong to the customer associated with the subscription schedule. If not set, invoices will use the default payment method in the customer&apos;s invoice settings.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_phase_configuration.Subscription_schedule_phase_configuration_default_payment_method? DefaultPaymentMethod { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_phase_configuration.Subscription_schedule_phase_configuration_default_payment_method DefaultPaymentMethod { get; set; }
#endif
        /// <summary>The default tax rates to apply to the subscription during this phase of the subscription schedule.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate>? DefaultTaxRates { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate> DefaultTaxRates { get; set; }
#endif
        /// <summary>Subscription description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The stackable discounts that will be applied to the subscription on this phase. Subscription item discounts are applied before subscription discounts.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Discounts_resource_stackable_discount>? Discounts { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Discounts_resource_stackable_discount> Discounts { get; set; }
#endif
        /// <summary>The end of this phase of the subscription schedule.</summary>
        public int? EndDate { get; set; }
        /// <summary>The invoice settings applicable during this phase.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Invoice_setting_subscription_schedule_phase_setting? InvoiceSettings { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Invoice_setting_subscription_schedule_phase_setting InvoiceSettings { get; set; }
#endif
        /// <summary>Subscription items to configure the subscription to during this phase of the subscription schedule.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_configuration_item>? Items { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_configuration_item> Items { get; set; }
#endif
        /// <summary>Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to a phase. Metadata on a schedule&apos;s phase will update the underlying subscription&apos;s `metadata` when the phase is entered. Updating the underlying subscription&apos;s `metadata` directly will not affect the current phase&apos;s `metadata`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_phase_configuration_metadata? Metadata { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_phase_configuration_metadata Metadata { get; set; }
#endif
        /// <summary>The account (if any) the charge was made on behalf of for charges associated with the schedule&apos;s subscription. See the Connect documentation for details.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_phase_configuration.Subscription_schedule_phase_configuration_on_behalf_of? OnBehalfOf { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_phase_configuration.Subscription_schedule_phase_configuration_on_behalf_of OnBehalfOf { get; set; }
#endif
        /// <summary>When transitioning phases, controls how prorations are handled (if any). Possible values are `create_prorations`, `none`, and `always_invoice`.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_phase_configuration_proration_behavior? ProrationBehavior { get; set; }
        /// <summary>The start of this phase of the subscription schedule.</summary>
        public int? StartDate { get; set; }
        /// <summary>The account (if any) the associated subscription&apos;s payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription&apos;s invoices.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription_transfer_data? TransferData { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription_transfer_data TransferData { get; set; }
#endif
        /// <summary>When the trial ends within the phase.</summary>
        public int? TrialEnd { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_phase_configuration"/> and sets the default values.
        /// </summary>
        public Subscription_schedule_phase_configuration()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_phase_configuration"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_phase_configuration CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_phase_configuration();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "add_invoice_items", n => { AddInvoiceItems = n.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_add_invoice_item>(global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_add_invoice_item.CreateFromDiscriminatorValue)?.AsList(); } },
                { "application_fee_percent", n => { ApplicationFeePercent = n.GetDoubleValue(); } },
                { "automatic_tax", n => { AutomaticTax = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Schedules_phase_automatic_tax>(global::Soenneker.Stripe.OpenApiClient.Models.Schedules_phase_automatic_tax.CreateFromDiscriminatorValue); } },
                { "billing_cycle_anchor", n => { BillingCycleAnchor = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_phase_configuration_billing_cycle_anchor>(); } },
                { "billing_thresholds", n => { BillingThresholds = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_billing_thresholds>(global::Soenneker.Stripe.OpenApiClient.Models.Subscription_billing_thresholds.CreateFromDiscriminatorValue); } },
                { "collection_method", n => { CollectionMethod = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_phase_configuration_collection_method>(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "default_payment_method", n => { DefaultPaymentMethod = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_phase_configuration.Subscription_schedule_phase_configuration_default_payment_method>(global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_phase_configuration.Subscription_schedule_phase_configuration_default_payment_method.CreateFromDiscriminatorValue); } },
                { "default_tax_rates", n => { DefaultTaxRates = n.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate>(global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate.CreateFromDiscriminatorValue)?.AsList(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "discounts", n => { Discounts = n.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Discounts_resource_stackable_discount>(global::Soenneker.Stripe.OpenApiClient.Models.Discounts_resource_stackable_discount.CreateFromDiscriminatorValue)?.AsList(); } },
                { "end_date", n => { EndDate = n.GetIntValue(); } },
                { "invoice_settings", n => { InvoiceSettings = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Invoice_setting_subscription_schedule_phase_setting>(global::Soenneker.Stripe.OpenApiClient.Models.Invoice_setting_subscription_schedule_phase_setting.CreateFromDiscriminatorValue); } },
                { "items", n => { Items = n.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_configuration_item>(global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_configuration_item.CreateFromDiscriminatorValue)?.AsList(); } },
                { "metadata", n => { Metadata = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_phase_configuration_metadata>(global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_phase_configuration_metadata.CreateFromDiscriminatorValue); } },
                { "on_behalf_of", n => { OnBehalfOf = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_phase_configuration.Subscription_schedule_phase_configuration_on_behalf_of>(global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_phase_configuration.Subscription_schedule_phase_configuration_on_behalf_of.CreateFromDiscriminatorValue); } },
                { "proration_behavior", n => { ProrationBehavior = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_phase_configuration_proration_behavior>(); } },
                { "start_date", n => { StartDate = n.GetIntValue(); } },
                { "transfer_data", n => { TransferData = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_transfer_data>(global::Soenneker.Stripe.OpenApiClient.Models.Subscription_transfer_data.CreateFromDiscriminatorValue); } },
                { "trial_end", n => { TrialEnd = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_add_invoice_item>("add_invoice_items", AddInvoiceItems);
            writer.WriteDoubleValue("application_fee_percent", ApplicationFeePercent);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Schedules_phase_automatic_tax>("automatic_tax", AutomaticTax);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_phase_configuration_billing_cycle_anchor>("billing_cycle_anchor", BillingCycleAnchor);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_billing_thresholds>("billing_thresholds", BillingThresholds);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_phase_configuration_collection_method>("collection_method", CollectionMethod);
            writer.WriteStringValue("currency", Currency);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_phase_configuration.Subscription_schedule_phase_configuration_default_payment_method>("default_payment_method", DefaultPaymentMethod);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate>("default_tax_rates", DefaultTaxRates);
            writer.WriteStringValue("description", Description);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Discounts_resource_stackable_discount>("discounts", Discounts);
            writer.WriteIntValue("end_date", EndDate);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Invoice_setting_subscription_schedule_phase_setting>("invoice_settings", InvoiceSettings);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_configuration_item>("items", Items);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_phase_configuration_metadata>("metadata", Metadata);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_phase_configuration.Subscription_schedule_phase_configuration_on_behalf_of>("on_behalf_of", OnBehalfOf);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_phase_configuration_proration_behavior>("proration_behavior", ProrationBehavior);
            writer.WriteIntValue("start_date", StartDate);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_transfer_data>("transfer_data", TransferData);
            writer.WriteIntValue("trial_end", TrialEnd);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Payment_method"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Subscription_schedule_phase_configuration_default_payment_method : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Payment_method"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method? PaymentMethod { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method PaymentMethod { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_phase_configuration.Subscription_schedule_phase_configuration_default_payment_method"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_phase_configuration.Subscription_schedule_phase_configuration_default_payment_method CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_phase_configuration.Subscription_schedule_phase_configuration_default_payment_method();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.PaymentMethod = new global::Soenneker.Stripe.OpenApiClient.Models.Payment_method();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(PaymentMethod != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(PaymentMethod);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method>(null, PaymentMethod);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Account"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Subscription_schedule_phase_configuration_on_behalf_of : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Account"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Account? Account { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Account Account { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_phase_configuration.Subscription_schedule_phase_configuration_on_behalf_of"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_phase_configuration.Subscription_schedule_phase_configuration_on_behalf_of CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule_phase_configuration.Subscription_schedule_phase_configuration_on_behalf_of();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.Account = new global::Soenneker.Stripe.OpenApiClient.Models.Account();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(Account != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(Account);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Account>(null, Account);
                }
            }
        }
    }
}
#pragma warning restore CS0618
