// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models.Billing
{
    /// <summary>
    /// A billing alert is a resource that notifies you when a certain usage threshold on a meter is crossed. For example, you might create a billing alert to notify you when a certain user made 100 API requests.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Alert : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Defines the type of the alert.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Billing.Alert_alert_type? AlertType { get; set; }
        /// <summary>Unique identifier for the object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.</summary>
        public bool? Livemode { get; set; }
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Billing.Alert_object? Object { get; set; }
        /// <summary>Status of the alert. This can be active, inactive or archived.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Billing.Alert_status? Status { get; set; }
        /// <summary>Title of the alert.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>Encapsulates configuration of the alert to monitor usage on a specific [Billing Meter](https://stripe.com/docs/api/billing/meter).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Thresholds_resource_usage_threshold_config? UsageThreshold { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Thresholds_resource_usage_threshold_config UsageThreshold { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Billing.Alert"/> and sets the default values.
        /// </summary>
        public Alert()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Billing.Alert"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Billing.Alert CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Billing.Alert();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "alert_type", n => { AlertType = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Billing.Alert_alert_type>(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "livemode", n => { Livemode = n.GetBoolValue(); } },
                { "object", n => { Object = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Billing.Alert_object>(); } },
                { "status", n => { Status = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Billing.Alert_status>(); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "usage_threshold", n => { UsageThreshold = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Thresholds_resource_usage_threshold_config>(global::Soenneker.Stripe.OpenApiClient.Models.Thresholds_resource_usage_threshold_config.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Billing.Alert_alert_type>("alert_type", AlertType);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("livemode", Livemode);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Billing.Alert_object>("object", Object);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Billing.Alert_status>("status", Status);
            writer.WriteStringValue("title", Title);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Thresholds_resource_usage_threshold_config>("usage_threshold", UsageThreshold);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
