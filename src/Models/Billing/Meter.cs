// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models.Billing
{
    /// <summary>
    /// Meters specify how to aggregate meter events over a billing period. Meter events represent the actions that customers take in your system. Meters attach to prices and form the basis of the bill.Related guide: [Usage based billing](https://docs.stripe.com/billing/subscriptions/usage-based)
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Meter : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Time at which the object was created. Measured in seconds since the Unix epoch.</summary>
        public int? Created { get; set; }
        /// <summary>The customer_mapping property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Billing_meter_resource_customer_mapping_settings? CustomerMapping { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Billing_meter_resource_customer_mapping_settings CustomerMapping { get; set; }
#endif
        /// <summary>The default_aggregation property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Billing_meter_resource_aggregation_settings? DefaultAggregation { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Billing_meter_resource_aggregation_settings DefaultAggregation { get; set; }
#endif
        /// <summary>The meter&apos;s name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>The name of the meter event to record usage for. Corresponds with the `event_name` field on meter events.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EventName { get; set; }
#nullable restore
#else
        public string EventName { get; set; }
#endif
        /// <summary>The time window which meter events have been pre-aggregated for, if any.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Billing.Meter_event_time_window? EventTimeWindow { get; set; }
        /// <summary>Unique identifier for the object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.</summary>
        public bool? Livemode { get; set; }
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Billing.Meter_object? Object { get; set; }
        /// <summary>The meter&apos;s status.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Billing.Meter_status? Status { get; set; }
        /// <summary>The status_transitions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Billing_meter_resource_billing_meter_status_transitions? StatusTransitions { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Billing_meter_resource_billing_meter_status_transitions StatusTransitions { get; set; }
#endif
        /// <summary>Time at which the object was last updated. Measured in seconds since the Unix epoch.</summary>
        public int? Updated { get; set; }
        /// <summary>The value_settings property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Billing_meter_resource_billing_meter_value? ValueSettings { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Billing_meter_resource_billing_meter_value ValueSettings { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Billing.Meter"/> and sets the default values.
        /// </summary>
        public Meter()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Billing.Meter"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Billing.Meter CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Billing.Meter();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "created", n => { Created = n.GetIntValue(); } },
                { "customer_mapping", n => { CustomerMapping = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Billing_meter_resource_customer_mapping_settings>(global::Soenneker.Stripe.OpenApiClient.Models.Billing_meter_resource_customer_mapping_settings.CreateFromDiscriminatorValue); } },
                { "default_aggregation", n => { DefaultAggregation = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Billing_meter_resource_aggregation_settings>(global::Soenneker.Stripe.OpenApiClient.Models.Billing_meter_resource_aggregation_settings.CreateFromDiscriminatorValue); } },
                { "display_name", n => { DisplayName = n.GetStringValue(); } },
                { "event_name", n => { EventName = n.GetStringValue(); } },
                { "event_time_window", n => { EventTimeWindow = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Billing.Meter_event_time_window>(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "livemode", n => { Livemode = n.GetBoolValue(); } },
                { "object", n => { Object = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Billing.Meter_object>(); } },
                { "status", n => { Status = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Billing.Meter_status>(); } },
                { "status_transitions", n => { StatusTransitions = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Billing_meter_resource_billing_meter_status_transitions>(global::Soenneker.Stripe.OpenApiClient.Models.Billing_meter_resource_billing_meter_status_transitions.CreateFromDiscriminatorValue); } },
                { "updated", n => { Updated = n.GetIntValue(); } },
                { "value_settings", n => { ValueSettings = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Billing_meter_resource_billing_meter_value>(global::Soenneker.Stripe.OpenApiClient.Models.Billing_meter_resource_billing_meter_value.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("created", Created);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Billing_meter_resource_customer_mapping_settings>("customer_mapping", CustomerMapping);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Billing_meter_resource_aggregation_settings>("default_aggregation", DefaultAggregation);
            writer.WriteStringValue("display_name", DisplayName);
            writer.WriteStringValue("event_name", EventName);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Billing.Meter_event_time_window>("event_time_window", EventTimeWindow);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("livemode", Livemode);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Billing.Meter_object>("object", Object);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Billing.Meter_status>("status", Status);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Billing_meter_resource_billing_meter_status_transitions>("status_transitions", StatusTransitions);
            writer.WriteIntValue("updated", Updated);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Billing_meter_resource_billing_meter_value>("value_settings", ValueSettings);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
