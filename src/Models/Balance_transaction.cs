// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Soenneker.Stripe.OpenApiClient.Models.Issuing;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    /// <summary>
    /// Balance transactions represent funds moving through your Stripe account.Stripe creates them for every type of transaction that enters or leaves your Stripe account balance.Related guide: [Balance transaction types](https://stripe.com/docs/reports/balance-transaction-types)
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Balance_transaction : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Gross amount of this transaction (in cents (or local equivalent)). A positive value represents funds charged to another party, and a negative value represents funds sent to another party.</summary>
        public int? Amount { get; set; }
        /// <summary>The date that the transaction&apos;s net funds become available in the Stripe balance.</summary>
        public int? AvailableOn { get; set; }
        /// <summary>The balance that this transaction impacts.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction_balance_type? BalanceType { get; set; }
        /// <summary>Time at which the object was created. Measured in seconds since the Unix epoch.</summary>
        public int? Created { get; set; }
        /// <summary>Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>An arbitrary string attached to the object. Often useful for displaying to users.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>If applicable, this transaction uses an exchange rate. If money converts from currency A to currency B, then the `amount` in currency A, multipled by the `exchange_rate`, equals the `amount` in currency B. For example, if you charge a customer 10.00 EUR, the PaymentIntent&apos;s `amount` is `1000` and `currency` is `eur`. If this converts to 12.34 USD in your Stripe account, the BalanceTransaction&apos;s `amount` is `1234`, its `currency` is `usd`, and the `exchange_rate` is `1.234`.</summary>
        public double? ExchangeRate { get; set; }
        /// <summary>Fees (in cents (or local equivalent)) paid for this transaction. Represented as a positive integer when assessed.</summary>
        public int? Fee { get; set; }
        /// <summary>Detailed breakdown of fees (in cents (or local equivalent)) paid for this transaction.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Fee>? FeeDetails { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Fee> FeeDetails { get; set; }
#endif
        /// <summary>Unique identifier for the object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Net impact to a Stripe balance (in cents (or local equivalent)). A positive value represents incrementing a Stripe balance, and a negative value decrementing a Stripe balance. You can calculate the net impact of a transaction on a balance by `amount` - `fee`</summary>
        public int? Net { get; set; }
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction_object? Object { get; set; }
        /// <summary>Learn more about how [reporting categories](https://stripe.com/docs/reports/reporting-categories) can help you understand balance transactions from an accounting perspective.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReportingCategory { get; set; }
#nullable restore
#else
        public string ReportingCategory { get; set; }
#endif
        /// <summary>This transaction relates to the Stripe object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction.Balance_transaction_source? Source { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction.Balance_transaction_source Source { get; set; }
#endif
        /// <summary>The transaction&apos;s net funds status in the Stripe balance, which are either `available` or `pending`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>Transaction type: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `climate_order_purchase`, `climate_order_refund`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `obligation_outbound`, `obligation_reversal_inbound`, `payment`, `payment_failure_refund`, `payment_network_reserve_hold`, `payment_network_reserve_release`, `payment_refund`, `payment_reversal`, `payment_unreconciled`, `payout`, `payout_cancel`, `payout_failure`, `payout_minimum_balance_hold`, `payout_minimum_balance_release`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `stripe_balance_payment_debit`, `stripe_balance_payment_debit_reversal`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. Learn more about [balance transaction types and what they represent](https://stripe.com/docs/reports/balance-transaction-types). To classify transactions for accounting purposes, consider `reporting_category` instead.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction_type? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction"/> and sets the default values.
        /// </summary>
        public Balance_transaction()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount", n => { Amount = n.GetIntValue(); } },
                { "available_on", n => { AvailableOn = n.GetIntValue(); } },
                { "balance_type", n => { BalanceType = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction_balance_type>(); } },
                { "created", n => { Created = n.GetIntValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "exchange_rate", n => { ExchangeRate = n.GetDoubleValue(); } },
                { "fee", n => { Fee = n.GetIntValue(); } },
                { "fee_details", n => { FeeDetails = n.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Fee>(global::Soenneker.Stripe.OpenApiClient.Models.Fee.CreateFromDiscriminatorValue)?.AsList(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "net", n => { Net = n.GetIntValue(); } },
                { "object", n => { Object = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction_object>(); } },
                { "reporting_category", n => { ReportingCategory = n.GetStringValue(); } },
                { "source", n => { Source = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction.Balance_transaction_source>(global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction.Balance_transaction_source.CreateFromDiscriminatorValue); } },
                { "status", n => { Status = n.GetStringValue(); } },
                { "type", n => { Type = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("amount", Amount);
            writer.WriteIntValue("available_on", AvailableOn);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction_balance_type>("balance_type", BalanceType);
            writer.WriteIntValue("created", Created);
            writer.WriteStringValue("currency", Currency);
            writer.WriteStringValue("description", Description);
            writer.WriteDoubleValue("exchange_rate", ExchangeRate);
            writer.WriteIntValue("fee", Fee);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Fee>("fee_details", FeeDetails);
            writer.WriteStringValue("id", Id);
            writer.WriteIntValue("net", Net);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction_object>("object", Object);
            writer.WriteStringValue("reporting_category", ReportingCategory);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction.Balance_transaction_source>("source", Source);
            writer.WriteStringValue("status", Status);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction_type>("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Application_fee"/>, <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Charge"/>, <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Connect_collection_transfer"/>, <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Customer_cash_balance_transaction"/>, <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Dispute"/>, <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Fee_refund"/>, <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Authorization"/>, <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Transaction"/>, <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Payout"/>, <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Refund"/>, <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Reserve_transaction"/>, <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Tax_deducted_at_source"/>, <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Topup"/>, <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Transfer"/>, <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Transfer_reversal"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Balance_transaction_source : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Application_fee"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Application_fee? ApplicationFee { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Application_fee ApplicationFee { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Authorization"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Authorization? Authorization { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Authorization Authorization { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Charge"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Charge? Charge { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Charge Charge { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Connect_collection_transfer"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Connect_collection_transfer? ConnectCollectionTransfer { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Connect_collection_transfer ConnectCollectionTransfer { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Customer_cash_balance_transaction"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Customer_cash_balance_transaction? CustomerCashBalanceTransaction { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Customer_cash_balance_transaction CustomerCashBalanceTransaction { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Dispute"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Dispute? Dispute { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Dispute Dispute { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Fee_refund"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Fee_refund? FeeRefund { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Fee_refund FeeRefund { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Payout"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Payout? Payout { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Payout Payout { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Refund"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Refund? Refund { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Refund Refund { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Reserve_transaction"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Reserve_transaction? ReserveTransaction { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Reserve_transaction ReserveTransaction { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Tax_deducted_at_source"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Tax_deducted_at_source? TaxDeductedAtSource { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Tax_deducted_at_source TaxDeductedAtSource { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Topup"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Topup? Topup { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Topup Topup { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Transaction"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Transaction? Transaction { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Transaction Transaction { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Transfer"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Transfer? Transfer { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Transfer Transfer { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Transfer_reversal"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Transfer_reversal? TransferReversal { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Transfer_reversal TransferReversal { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction.Balance_transaction_source"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction.Balance_transaction_source CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Balance_transaction.Balance_transaction_source();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.ApplicationFee = new global::Soenneker.Stripe.OpenApiClient.Models.Application_fee();
                    result.Authorization = new global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Authorization();
                    result.Charge = new global::Soenneker.Stripe.OpenApiClient.Models.Charge();
                    result.ConnectCollectionTransfer = new global::Soenneker.Stripe.OpenApiClient.Models.Connect_collection_transfer();
                    result.CustomerCashBalanceTransaction = new global::Soenneker.Stripe.OpenApiClient.Models.Customer_cash_balance_transaction();
                    result.Dispute = new global::Soenneker.Stripe.OpenApiClient.Models.Dispute();
                    result.FeeRefund = new global::Soenneker.Stripe.OpenApiClient.Models.Fee_refund();
                    result.Payout = new global::Soenneker.Stripe.OpenApiClient.Models.Payout();
                    result.Refund = new global::Soenneker.Stripe.OpenApiClient.Models.Refund();
                    result.ReserveTransaction = new global::Soenneker.Stripe.OpenApiClient.Models.Reserve_transaction();
                    result.TaxDeductedAtSource = new global::Soenneker.Stripe.OpenApiClient.Models.Tax_deducted_at_source();
                    result.Topup = new global::Soenneker.Stripe.OpenApiClient.Models.Topup();
                    result.Transaction = new global::Soenneker.Stripe.OpenApiClient.Models.Issuing.Transaction();
                    result.Transfer = new global::Soenneker.Stripe.OpenApiClient.Models.Transfer();
                    result.TransferReversal = new global::Soenneker.Stripe.OpenApiClient.Models.Transfer_reversal();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(ApplicationFee != null || Authorization != null || Charge != null || ConnectCollectionTransfer != null || CustomerCashBalanceTransaction != null || Dispute != null || FeeRefund != null || Payout != null || Refund != null || ReserveTransaction != null || TaxDeductedAtSource != null || Topup != null || Transaction != null || Transfer != null || TransferReversal != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(ApplicationFee, Authorization, Charge, ConnectCollectionTransfer, CustomerCashBalanceTransaction, Dispute, FeeRefund, Payout, Refund, ReserveTransaction, TaxDeductedAtSource, Topup, Transaction, Transfer, TransferReversal);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Application_fee>(null, ApplicationFee, Authorization, Charge, ConnectCollectionTransfer, CustomerCashBalanceTransaction, Dispute, FeeRefund, Payout, Refund, ReserveTransaction, TaxDeductedAtSource, Topup, Transaction, Transfer, TransferReversal);
                }
            }
        }
    }
}
#pragma warning restore CS0618
