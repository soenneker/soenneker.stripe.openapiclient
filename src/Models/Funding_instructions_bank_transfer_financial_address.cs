// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    /// <summary>
    /// FinancialAddresses contain identifying information that resolves to a FinancialAccount.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Funding_instructions_bank_transfer_financial_address : IAdditionalDataHolder, IParsable
    {
        /// <summary>ABA Records contain U.S. bank account details per the ABA format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_aba_record? Aba { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_aba_record Aba { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Iban Records contain E.U. bank account details per the SEPA format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_iban_record? Iban { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_iban_record Iban { get; set; }
#endif
        /// <summary>Sort Code Records contain U.K. bank account details per the sort code format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_sort_code_record? SortCode { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_sort_code_record SortCode { get; set; }
#endif
        /// <summary>SPEI Records contain Mexico bank account details per the SPEI format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_spei_record? Spei { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_spei_record Spei { get; set; }
#endif
        /// <summary>The payment networks supported by this FinancialAddress</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_financial_address_supported_networks?>? SupportedNetworks { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_financial_address_supported_networks?> SupportedNetworks { get; set; }
#endif
        /// <summary>SWIFT Records contain U.S. bank account details per the SWIFT format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_swift_record? Swift { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_swift_record Swift { get; set; }
#endif
        /// <summary>The type of financial address</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_financial_address_type? Type { get; set; }
        /// <summary>Zengin Records contain Japan bank account details per the Zengin format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_zengin_record? Zengin { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_zengin_record Zengin { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_financial_address"/> and sets the default values.
        /// </summary>
        public Funding_instructions_bank_transfer_financial_address()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_financial_address"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_financial_address CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_financial_address();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "aba", n => { Aba = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_aba_record>(global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_aba_record.CreateFromDiscriminatorValue); } },
                { "iban", n => { Iban = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_iban_record>(global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_iban_record.CreateFromDiscriminatorValue); } },
                { "sort_code", n => { SortCode = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_sort_code_record>(global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_sort_code_record.CreateFromDiscriminatorValue); } },
                { "spei", n => { Spei = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_spei_record>(global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_spei_record.CreateFromDiscriminatorValue); } },
                { "supported_networks", n => { SupportedNetworks = n.GetCollectionOfEnumValues<global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_financial_address_supported_networks>()?.AsList(); } },
                { "swift", n => { Swift = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_swift_record>(global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_swift_record.CreateFromDiscriminatorValue); } },
                { "type", n => { Type = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_financial_address_type>(); } },
                { "zengin", n => { Zengin = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_zengin_record>(global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_zengin_record.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_aba_record>("aba", Aba);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_iban_record>("iban", Iban);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_sort_code_record>("sort_code", SortCode);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_spei_record>("spei", Spei);
            writer.WriteCollectionOfEnumValues<global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_financial_address_supported_networks>("supported_networks", SupportedNetworks);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_swift_record>("swift", Swift);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_financial_address_type>("type", Type);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_zengin_record>("zengin", Zengin);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
