// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    /// <summary>
    /// `Source` objects allow you to accept a variety of payment methods. Theyrepresent a customer&apos;s payment instrument, and can be used with the Stripe APIjust like a `Card` object: once chargeable, they can be charged, or can beattached to customers.Stripe doesn&apos;t recommend using the deprecated [Sources API](https://stripe.com/docs/api/sources).We recommend that you adopt the [PaymentMethods API](https://stripe.com/docs/api/payment_methods).This newer API provides access to our latest features and payment method types.Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources &amp; Customers](https://stripe.com/docs/sources/customers).
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Source : IAdditionalDataHolder, IParsable
    {
        /// <summary>The ach_credit_transfer property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_ach_credit_transfer? AchCreditTransfer { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_ach_credit_transfer AchCreditTransfer { get; set; }
#endif
        /// <summary>The ach_debit property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_ach_debit? AchDebit { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_ach_debit AchDebit { get; set; }
#endif
        /// <summary>The acss_debit property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_acss_debit? AcssDebit { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_acss_debit AcssDebit { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The alipay property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_alipay? Alipay { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_alipay Alipay { get; set; }
#endif
        /// <summary>This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to “unspecified”.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_allow_redisplay? AllowRedisplay { get; set; }
        /// <summary>A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources.</summary>
        public int? Amount { get; set; }
        /// <summary>The au_becs_debit property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_au_becs_debit? AuBecsDebit { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_au_becs_debit AuBecsDebit { get; set; }
#endif
        /// <summary>The bancontact property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_bancontact? Bancontact { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_bancontact Bancontact { get; set; }
#endif
        /// <summary>The card property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_card? Card { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_card Card { get; set; }
#endif
        /// <summary>The card_present property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_card_present? CardPresent { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_card_present CardPresent { get; set; }
#endif
        /// <summary>The client secret of the source. Used for client-side retrieval using a publishable key.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientSecret { get; set; }
#nullable restore
#else
        public string ClientSecret { get; set; }
#endif
        /// <summary>The code_verification property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_code_verification_flow? CodeVerification { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_code_verification_flow CodeVerification { get; set; }
#endif
        /// <summary>Time at which the object was created. Measured in seconds since the Unix epoch.</summary>
        public int? Created { get; set; }
        /// <summary>Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. Required for `single_use` sources.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Customer { get; set; }
#nullable restore
#else
        public string Customer { get; set; }
#endif
        /// <summary>The eps property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_eps? Eps { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_eps Eps { get; set; }
#endif
        /// <summary>The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Flow { get; set; }
#nullable restore
#else
        public string Flow { get; set; }
#endif
        /// <summary>The giropay property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_giropay? Giropay { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_giropay Giropay { get; set; }
#endif
        /// <summary>Unique identifier for the object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The ideal property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_ideal? Ideal { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_ideal Ideal { get; set; }
#endif
        /// <summary>The klarna property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_klarna? Klarna { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_klarna Klarna { get; set; }
#endif
        /// <summary>Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.</summary>
        public bool? Livemode { get; set; }
        /// <summary>Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_metadata? Metadata { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_metadata Metadata { get; set; }
#endif
        /// <summary>The multibanco property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_multibanco? Multibanco { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_multibanco Multibanco { get; set; }
#endif
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_object? Object { get; set; }
        /// <summary>Information about the owner of the payment instrument that may be used or required by particular source types.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_owner? Owner { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_owner Owner { get; set; }
#endif
        /// <summary>The p24 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_p24? P24 { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_p24 P24 { get; set; }
#endif
        /// <summary>The receiver property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_receiver_flow? Receiver { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_receiver_flow Receiver { get; set; }
#endif
        /// <summary>The redirect property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_redirect_flow? Redirect { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_redirect_flow Redirect { get; set; }
#endif
        /// <summary>The sepa_debit property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_sepa_debit? SepaDebit { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_sepa_debit SepaDebit { get; set; }
#endif
        /// <summary>The sofort property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_sofort? Sofort { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_sofort Sofort { get; set; }
#endif
        /// <summary>The source_order property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_order? SourceOrder { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_order SourceOrder { get; set; }
#endif
        /// <summary>Extra information about a source. This will appear on your customer&apos;s statement every time you charge the source.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StatementDescriptor { get; set; }
#nullable restore
#else
        public string StatementDescriptor { get; set; }
#endif
        /// <summary>The status of the source, one of `canceled`, `chargeable`, `consumed`, `failed`, or `pending`. Only `chargeable` sources can be used to create a charge.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>The three_d_secure property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_three_d_secure? ThreeDSecure { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_three_d_secure ThreeDSecure { get; set; }
#endif
        /// <summary>The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type? Type { get; set; }
        /// <summary>Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Usage { get; set; }
#nullable restore
#else
        public string Usage { get; set; }
#endif
        /// <summary>The wechat property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_wechat? Wechat { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_wechat Wechat { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Source"/> and sets the default values.
        /// </summary>
        public Source()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Source"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Source CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Source();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "ach_credit_transfer", n => { AchCreditTransfer = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_type_ach_credit_transfer>(global::Soenneker.Stripe.OpenApiClient.Models.Source_type_ach_credit_transfer.CreateFromDiscriminatorValue); } },
                { "ach_debit", n => { AchDebit = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_type_ach_debit>(global::Soenneker.Stripe.OpenApiClient.Models.Source_type_ach_debit.CreateFromDiscriminatorValue); } },
                { "acss_debit", n => { AcssDebit = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_type_acss_debit>(global::Soenneker.Stripe.OpenApiClient.Models.Source_type_acss_debit.CreateFromDiscriminatorValue); } },
                { "alipay", n => { Alipay = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_type_alipay>(global::Soenneker.Stripe.OpenApiClient.Models.Source_type_alipay.CreateFromDiscriminatorValue); } },
                { "allow_redisplay", n => { AllowRedisplay = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_allow_redisplay>(); } },
                { "amount", n => { Amount = n.GetIntValue(); } },
                { "au_becs_debit", n => { AuBecsDebit = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_type_au_becs_debit>(global::Soenneker.Stripe.OpenApiClient.Models.Source_type_au_becs_debit.CreateFromDiscriminatorValue); } },
                { "bancontact", n => { Bancontact = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_type_bancontact>(global::Soenneker.Stripe.OpenApiClient.Models.Source_type_bancontact.CreateFromDiscriminatorValue); } },
                { "card", n => { Card = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_type_card>(global::Soenneker.Stripe.OpenApiClient.Models.Source_type_card.CreateFromDiscriminatorValue); } },
                { "card_present", n => { CardPresent = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_type_card_present>(global::Soenneker.Stripe.OpenApiClient.Models.Source_type_card_present.CreateFromDiscriminatorValue); } },
                { "client_secret", n => { ClientSecret = n.GetStringValue(); } },
                { "code_verification", n => { CodeVerification = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_code_verification_flow>(global::Soenneker.Stripe.OpenApiClient.Models.Source_code_verification_flow.CreateFromDiscriminatorValue); } },
                { "created", n => { Created = n.GetIntValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "customer", n => { Customer = n.GetStringValue(); } },
                { "eps", n => { Eps = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_type_eps>(global::Soenneker.Stripe.OpenApiClient.Models.Source_type_eps.CreateFromDiscriminatorValue); } },
                { "flow", n => { Flow = n.GetStringValue(); } },
                { "giropay", n => { Giropay = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_type_giropay>(global::Soenneker.Stripe.OpenApiClient.Models.Source_type_giropay.CreateFromDiscriminatorValue); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "ideal", n => { Ideal = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_type_ideal>(global::Soenneker.Stripe.OpenApiClient.Models.Source_type_ideal.CreateFromDiscriminatorValue); } },
                { "klarna", n => { Klarna = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_type_klarna>(global::Soenneker.Stripe.OpenApiClient.Models.Source_type_klarna.CreateFromDiscriminatorValue); } },
                { "livemode", n => { Livemode = n.GetBoolValue(); } },
                { "metadata", n => { Metadata = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_metadata>(global::Soenneker.Stripe.OpenApiClient.Models.Source_metadata.CreateFromDiscriminatorValue); } },
                { "multibanco", n => { Multibanco = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_type_multibanco>(global::Soenneker.Stripe.OpenApiClient.Models.Source_type_multibanco.CreateFromDiscriminatorValue); } },
                { "object", n => { Object = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_object>(); } },
                { "owner", n => { Owner = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_owner>(global::Soenneker.Stripe.OpenApiClient.Models.Source_owner.CreateFromDiscriminatorValue); } },
                { "p24", n => { P24 = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_type_p24>(global::Soenneker.Stripe.OpenApiClient.Models.Source_type_p24.CreateFromDiscriminatorValue); } },
                { "receiver", n => { Receiver = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_receiver_flow>(global::Soenneker.Stripe.OpenApiClient.Models.Source_receiver_flow.CreateFromDiscriminatorValue); } },
                { "redirect", n => { Redirect = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_redirect_flow>(global::Soenneker.Stripe.OpenApiClient.Models.Source_redirect_flow.CreateFromDiscriminatorValue); } },
                { "sepa_debit", n => { SepaDebit = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_type_sepa_debit>(global::Soenneker.Stripe.OpenApiClient.Models.Source_type_sepa_debit.CreateFromDiscriminatorValue); } },
                { "sofort", n => { Sofort = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_type_sofort>(global::Soenneker.Stripe.OpenApiClient.Models.Source_type_sofort.CreateFromDiscriminatorValue); } },
                { "source_order", n => { SourceOrder = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_order>(global::Soenneker.Stripe.OpenApiClient.Models.Source_order.CreateFromDiscriminatorValue); } },
                { "statement_descriptor", n => { StatementDescriptor = n.GetStringValue(); } },
                { "status", n => { Status = n.GetStringValue(); } },
                { "three_d_secure", n => { ThreeDSecure = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_type_three_d_secure>(global::Soenneker.Stripe.OpenApiClient.Models.Source_type_three_d_secure.CreateFromDiscriminatorValue); } },
                { "type", n => { Type = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_type>(); } },
                { "usage", n => { Usage = n.GetStringValue(); } },
                { "wechat", n => { Wechat = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_type_wechat>(global::Soenneker.Stripe.OpenApiClient.Models.Source_type_wechat.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_type_ach_credit_transfer>("ach_credit_transfer", AchCreditTransfer);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_type_ach_debit>("ach_debit", AchDebit);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_type_acss_debit>("acss_debit", AcssDebit);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_type_alipay>("alipay", Alipay);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_allow_redisplay>("allow_redisplay", AllowRedisplay);
            writer.WriteIntValue("amount", Amount);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_type_au_becs_debit>("au_becs_debit", AuBecsDebit);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_type_bancontact>("bancontact", Bancontact);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_type_card>("card", Card);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_type_card_present>("card_present", CardPresent);
            writer.WriteStringValue("client_secret", ClientSecret);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_code_verification_flow>("code_verification", CodeVerification);
            writer.WriteIntValue("created", Created);
            writer.WriteStringValue("currency", Currency);
            writer.WriteStringValue("customer", Customer);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_type_eps>("eps", Eps);
            writer.WriteStringValue("flow", Flow);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_type_giropay>("giropay", Giropay);
            writer.WriteStringValue("id", Id);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_type_ideal>("ideal", Ideal);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_type_klarna>("klarna", Klarna);
            writer.WriteBoolValue("livemode", Livemode);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_metadata>("metadata", Metadata);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_type_multibanco>("multibanco", Multibanco);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_object>("object", Object);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_owner>("owner", Owner);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_type_p24>("p24", P24);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_receiver_flow>("receiver", Receiver);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_redirect_flow>("redirect", Redirect);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_type_sepa_debit>("sepa_debit", SepaDebit);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_type_sofort>("sofort", Sofort);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_order>("source_order", SourceOrder);
            writer.WriteStringValue("statement_descriptor", StatementDescriptor);
            writer.WriteStringValue("status", Status);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_type_three_d_secure>("three_d_secure", ThreeDSecure);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_type>("type", Type);
            writer.WriteStringValue("usage", Usage);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Source_type_wechat>("wechat", Wechat);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
