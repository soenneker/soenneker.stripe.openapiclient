// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    /// <summary>
    /// Tax rates can be applied to [invoices](/invoicing/taxes/tax-rates), [subscriptions](/billing/taxes/tax-rates) and [Checkout Sessions](/payments/checkout/use-manual-tax-rates) to collect tax.Related guide: [Tax rates](/billing/taxes/tax-rates)
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Tax_rate : IAdditionalDataHolder, IParsable
    {
        /// <summary>Defaults to `true`. When set to `false`, this tax rate cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.</summary>
        public bool? Active { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Country { get; set; }
#nullable restore
#else
        public string Country { get; set; }
#endif
        /// <summary>Time at which the object was created. Measured in seconds since the Unix epoch.</summary>
        public int? Created { get; set; }
        /// <summary>An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The display name of the tax rates as it will appear to your customer on their receipt email, PDF, and the hosted invoice page.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>Actual/effective tax rate percentage out of 100. For tax calculations with automatic_tax[enabled]=true,this percentage reflects the rate actually used to calculate tax based on the product&apos;s taxabilityand whether the user is registered to collect taxes in the corresponding jurisdiction.</summary>
        public double? EffectivePercentage { get; set; }
        /// <summary>The amount of the tax rate when the `rate_type` is `flat_amount`. Tax rates with `rate_type` `percentage` can vary based on the transaction, resulting in this field being `null`. This field exposes the amount and currency of the flat tax rate.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate_flat_amount? FlatAmount { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate_flat_amount FlatAmount { get; set; }
#endif
        /// <summary>Unique identifier for the object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>This specifies if the tax rate is inclusive or exclusive.</summary>
        public bool? Inclusive { get; set; }
        /// <summary>The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customerâ€™s invoice.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Jurisdiction { get; set; }
#nullable restore
#else
        public string Jurisdiction { get; set; }
#endif
        /// <summary>The level of the jurisdiction that imposes this tax rate. Will be `null` for manually defined tax rates.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate_jurisdiction_level? JurisdictionLevel { get; set; }
        /// <summary>Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.</summary>
        public bool? Livemode { get; set; }
        /// <summary>Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate_metadata? Metadata { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate_metadata Metadata { get; set; }
#endif
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate_object? Object { get; set; }
        /// <summary>Tax rate percentage out of 100. For tax calculations with automatic_tax[enabled]=true, this percentage includes the statutory tax rate of non-taxable jurisdictions.</summary>
        public double? Percentage { get; set; }
        /// <summary>Indicates the type of tax rate applied to the taxable amount. This value can be `null` when no tax applies to the location. This field is only present for TaxRates created by Stripe Tax.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate_rate_type? RateType { get; set; }
        /// <summary>[ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2), without country prefix. For example, &quot;NY&quot; for New York, United States.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? State { get; set; }
#nullable restore
#else
        public string State { get; set; }
#endif
        /// <summary>The high-level tax type, such as `vat` or `sales_tax`.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate_tax_type? TaxType { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate"/> and sets the default values.
        /// </summary>
        public Tax_rate()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "active", n => { Active = n.GetBoolValue(); } },
                { "country", n => { Country = n.GetStringValue(); } },
                { "created", n => { Created = n.GetIntValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "display_name", n => { DisplayName = n.GetStringValue(); } },
                { "effective_percentage", n => { EffectivePercentage = n.GetDoubleValue(); } },
                { "flat_amount", n => { FlatAmount = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate_flat_amount>(global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate_flat_amount.CreateFromDiscriminatorValue); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "inclusive", n => { Inclusive = n.GetBoolValue(); } },
                { "jurisdiction", n => { Jurisdiction = n.GetStringValue(); } },
                { "jurisdiction_level", n => { JurisdictionLevel = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate_jurisdiction_level>(); } },
                { "livemode", n => { Livemode = n.GetBoolValue(); } },
                { "metadata", n => { Metadata = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate_metadata>(global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate_metadata.CreateFromDiscriminatorValue); } },
                { "object", n => { Object = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate_object>(); } },
                { "percentage", n => { Percentage = n.GetDoubleValue(); } },
                { "rate_type", n => { RateType = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate_rate_type>(); } },
                { "state", n => { State = n.GetStringValue(); } },
                { "tax_type", n => { TaxType = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate_tax_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("active", Active);
            writer.WriteStringValue("country", Country);
            writer.WriteIntValue("created", Created);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("display_name", DisplayName);
            writer.WriteDoubleValue("effective_percentage", EffectivePercentage);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate_flat_amount>("flat_amount", FlatAmount);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("inclusive", Inclusive);
            writer.WriteStringValue("jurisdiction", Jurisdiction);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate_jurisdiction_level>("jurisdiction_level", JurisdictionLevel);
            writer.WriteBoolValue("livemode", Livemode);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate_metadata>("metadata", Metadata);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate_object>("object", Object);
            writer.WriteDoubleValue("percentage", Percentage);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate_rate_type>("rate_type", RateType);
            writer.WriteStringValue("state", State);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate_tax_type>("tax_type", TaxType);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
