// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models.Reporting
{
    /// <summary>
    /// The Report Run object represents an instance of a report type generated withspecific run parameters. Once the object is created, Stripe begins processing the report.When the report has finished running, it will give you a reference to a filewhere you can retrieve your results. For an overview, see[API Access to Reports](https://stripe.com/docs/reporting/statements/api).Note that certain report types can only be run based on your live-mode data (not test-modedata), and will error when queried without a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Report_run : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Time at which the object was created. Measured in seconds since the Unix epoch.</summary>
        public int? Created { get; set; }
        /// <summary>If something should go wrong during the run, a message about the failure (populated when `status=failed`).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Error { get; set; }
#nullable restore
#else
        public string Error { get; set; }
#endif
        /// <summary>Unique identifier for the object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>`true` if the report is run on live mode data and `false` if it is run on test mode data.</summary>
        public bool? Livemode { get; set; }
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Reporting.Report_run_object? Object { get; set; }
        /// <summary>The parameters property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Financial_reporting_finance_report_run_run_parameters? Parameters { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Financial_reporting_finance_report_run_run_parameters Parameters { get; set; }
#endif
        /// <summary>The ID of the [report type](https://stripe.com/docs/reports/report-types) to run, such as `&quot;balance.summary.1&quot;`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReportType { get; set; }
#nullable restore
#else
        public string ReportType { get; set; }
#endif
        /// <summary>The file object representing the result of the report run (populated when `status=succeeded`).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.FileObject? Result { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.FileObject Result { get; set; }
#endif
        /// <summary>Status of this report run. This will be `pending` when the run is initially created. When the run finishes, this will be set to `succeeded` and the `result` field will be populated. Rarely, we may encounter an error, at which point this will be set to `failed` and the `error` field will be populated.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>Timestamp at which this run successfully finished (populated when `status=succeeded`). Measured in seconds since the Unix epoch.</summary>
        public int? SucceededAt { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Reporting.Report_run"/> and sets the default values.
        /// </summary>
        public Report_run()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Reporting.Report_run"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Reporting.Report_run CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Reporting.Report_run();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "created", n => { Created = n.GetIntValue(); } },
                { "error", n => { Error = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "livemode", n => { Livemode = n.GetBoolValue(); } },
                { "object", n => { Object = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Reporting.Report_run_object>(); } },
                { "parameters", n => { Parameters = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Financial_reporting_finance_report_run_run_parameters>(global::Soenneker.Stripe.OpenApiClient.Models.Financial_reporting_finance_report_run_run_parameters.CreateFromDiscriminatorValue); } },
                { "report_type", n => { ReportType = n.GetStringValue(); } },
                { "result", n => { Result = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.FileObject>(global::Soenneker.Stripe.OpenApiClient.Models.FileObject.CreateFromDiscriminatorValue); } },
                { "status", n => { Status = n.GetStringValue(); } },
                { "succeeded_at", n => { SucceededAt = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("created", Created);
            writer.WriteStringValue("error", Error);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("livemode", Livemode);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Reporting.Report_run_object>("object", Object);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Financial_reporting_finance_report_run_run_parameters>("parameters", Parameters);
            writer.WriteStringValue("report_type", ReportType);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.FileObject>("result", Result);
            writer.WriteStringValue("status", Status);
            writer.WriteIntValue("succeeded_at", SucceededAt);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
