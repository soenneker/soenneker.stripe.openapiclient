// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models.Reporting
{
    /// <summary>
    /// The Report Type resource corresponds to a particular type of report, such asthe &quot;Activity summary&quot; or &quot;Itemized payouts&quot; reports. These objects areidentified by an ID belonging to a set of enumerated values. See[API Access to Reports documentation](https://stripe.com/docs/reporting/statements/api)for those Report Type IDs, along with required and optional parameters.Note that certain report types can only be run based on your live-mode data (not test-modedata), and will error when queried without a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Report_type : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Most recent time for which this Report Type is available. Measured in seconds since the Unix epoch.</summary>
        public int? DataAvailableEnd { get; set; }
        /// <summary>Earliest time for which this Report Type is available. Measured in seconds since the Unix epoch.</summary>
        public int? DataAvailableStart { get; set; }
        /// <summary>List of column names that are included by default when this Report Type gets run. (If the Report Type doesn&apos;t support the `columns` parameter, this will be null.)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? DefaultColumns { get; set; }
#nullable restore
#else
        public List<string> DefaultColumns { get; set; }
#endif
        /// <summary>The [ID of the Report Type](https://stripe.com/docs/reporting/statements/api#available-report-types), such as `balance.summary.1`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.</summary>
        public bool? Livemode { get; set; }
        /// <summary>Human-readable name of the Report Type</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Reporting.Report_type_object? Object { get; set; }
        /// <summary>When this Report Type was latest updated. Measured in seconds since the Unix epoch.</summary>
        public int? Updated { get; set; }
        /// <summary>Version of the Report Type. Different versions report with the same ID will have the same purpose, but may take different run parameters or have different result schemas.</summary>
        public int? Version { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Reporting.Report_type"/> and sets the default values.
        /// </summary>
        public Report_type()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Reporting.Report_type"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Reporting.Report_type CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Reporting.Report_type();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "data_available_end", n => { DataAvailableEnd = n.GetIntValue(); } },
                { "data_available_start", n => { DataAvailableStart = n.GetIntValue(); } },
                { "default_columns", n => { DefaultColumns = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "livemode", n => { Livemode = n.GetBoolValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "object", n => { Object = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Reporting.Report_type_object>(); } },
                { "updated", n => { Updated = n.GetIntValue(); } },
                { "version", n => { Version = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("data_available_end", DataAvailableEnd);
            writer.WriteIntValue("data_available_start", DataAvailableStart);
            writer.WriteCollectionOfPrimitiveValues<string>("default_columns", DefaultColumns);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("livemode", Livemode);
            writer.WriteStringValue("name", Name);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Reporting.Report_type_object>("object", Object);
            writer.WriteIntValue("updated", Updated);
            writer.WriteIntValue("version", Version);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
