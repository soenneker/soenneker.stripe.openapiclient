// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Legal_entity_company : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The address property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Address? Address { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Address Address { get; set; }
#endif
        /// <summary>The Kana variation of the company&apos;s primary address (Japan only).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_japan_address? AddressKana { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_japan_address AddressKana { get; set; }
#endif
        /// <summary>The Kanji variation of the company&apos;s primary address (Japan only).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_japan_address? AddressKanji { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_japan_address AddressKanji { get; set; }
#endif
        /// <summary>This hash is used to attest that the director information provided to Stripe is both current and correct.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_directorship_declaration? DirectorshipDeclaration { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_directorship_declaration DirectorshipDeclaration { get; set; }
#endif
        /// <summary>Whether the company&apos;s directors have been provided. This Boolean will be `true` if you&apos;ve manually indicated that all directors are provided via [the `directors_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-directors_provided).</summary>
        public bool? DirectorsProvided { get; set; }
        /// <summary>Whether the company&apos;s executives have been provided. This Boolean will be `true` if you&apos;ve manually indicated that all executives are provided via [the `executives_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-executives_provided), or if Stripe determined that sufficient executives were provided.</summary>
        public bool? ExecutivesProvided { get; set; }
        /// <summary>The export license ID number of the company, also referred as Import Export Code (India only).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExportLicenseId { get; set; }
#nullable restore
#else
        public string ExportLicenseId { get; set; }
#endif
        /// <summary>The purpose code to use for export transactions (India only).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExportPurposeCode { get; set; }
#nullable restore
#else
        public string ExportPurposeCode { get; set; }
#endif
        /// <summary>The company&apos;s legal name. Also available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `stripe`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The Kana variation of the company&apos;s legal name (Japan only). Also available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `stripe`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NameKana { get; set; }
#nullable restore
#else
        public string NameKana { get; set; }
#endif
        /// <summary>The Kanji variation of the company&apos;s legal name (Japan only). Also available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `stripe`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NameKanji { get; set; }
#nullable restore
#else
        public string NameKanji { get; set; }
#endif
        /// <summary>This hash is used to attest that the beneficial owner information provided to Stripe is both current and correct.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_ubo_declaration? OwnershipDeclaration { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_ubo_declaration OwnershipDeclaration { get; set; }
#endif
        /// <summary>This value is used to determine if a business is exempt from providing ultimate beneficial owners. See [this support article](https://support.stripe.com/questions/exemption-from-providing-ownership-details) and [changelog](https://docs.stripe.com/changelog/acacia/2025-01-27/ownership-exemption-reason-accounts-api) for more details.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_company_ownership_exemption_reason? OwnershipExemptionReason { get; set; }
        /// <summary>Whether the company&apos;s owners have been provided. This Boolean will be `true` if you&apos;ve manually indicated that all owners are provided via [the `owners_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-owners_provided), or if Stripe determined that sufficient owners were provided. Stripe determines ownership requirements using both the number of owners provided and their total percent ownership (calculated by adding the `percent_ownership` of each owner together).</summary>
        public bool? OwnersProvided { get; set; }
        /// <summary>The company&apos;s phone number (used for verification).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Phone { get; set; }
#nullable restore
#else
        public string Phone { get; set; }
#endif
        /// <summary>The registration_date property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_registration_date? RegistrationDate { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_registration_date RegistrationDate { get; set; }
#endif
        /// <summary>The category identifying the legal structure of the company or legal entity. Also available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `stripe`. See [Business structure](https://stripe.com/docs/connect/identity-verification#business-structure) for more details.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_company_structure? Structure { get; set; }
        /// <summary>Whether the company&apos;s business ID number was provided.</summary>
        public bool? TaxIdProvided { get; set; }
        /// <summary>The jurisdiction in which the `tax_id` is registered (Germany-based companies only).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TaxIdRegistrar { get; set; }
#nullable restore
#else
        public string TaxIdRegistrar { get; set; }
#endif
        /// <summary>Whether the company&apos;s business VAT number was provided.</summary>
        public bool? VatIdProvided { get; set; }
        /// <summary>Information on the verification state of the company.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_company_verification? Verification { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_company_verification Verification { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_company"/> and sets the default values.
        /// </summary>
        public Legal_entity_company()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_company"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_company CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_company();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "address", n => { Address = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Address>(global::Soenneker.Stripe.OpenApiClient.Models.Address.CreateFromDiscriminatorValue); } },
                { "address_kana", n => { AddressKana = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_japan_address>(global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_japan_address.CreateFromDiscriminatorValue); } },
                { "address_kanji", n => { AddressKanji = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_japan_address>(global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_japan_address.CreateFromDiscriminatorValue); } },
                { "directors_provided", n => { DirectorsProvided = n.GetBoolValue(); } },
                { "directorship_declaration", n => { DirectorshipDeclaration = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_directorship_declaration>(global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_directorship_declaration.CreateFromDiscriminatorValue); } },
                { "executives_provided", n => { ExecutivesProvided = n.GetBoolValue(); } },
                { "export_license_id", n => { ExportLicenseId = n.GetStringValue(); } },
                { "export_purpose_code", n => { ExportPurposeCode = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "name_kana", n => { NameKana = n.GetStringValue(); } },
                { "name_kanji", n => { NameKanji = n.GetStringValue(); } },
                { "owners_provided", n => { OwnersProvided = n.GetBoolValue(); } },
                { "ownership_declaration", n => { OwnershipDeclaration = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_ubo_declaration>(global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_ubo_declaration.CreateFromDiscriminatorValue); } },
                { "ownership_exemption_reason", n => { OwnershipExemptionReason = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_company_ownership_exemption_reason>(); } },
                { "phone", n => { Phone = n.GetStringValue(); } },
                { "registration_date", n => { RegistrationDate = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_registration_date>(global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_registration_date.CreateFromDiscriminatorValue); } },
                { "structure", n => { Structure = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_company_structure>(); } },
                { "tax_id_provided", n => { TaxIdProvided = n.GetBoolValue(); } },
                { "tax_id_registrar", n => { TaxIdRegistrar = n.GetStringValue(); } },
                { "vat_id_provided", n => { VatIdProvided = n.GetBoolValue(); } },
                { "verification", n => { Verification = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_company_verification>(global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_company_verification.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Address>("address", Address);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_japan_address>("address_kana", AddressKana);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_japan_address>("address_kanji", AddressKanji);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_directorship_declaration>("directorship_declaration", DirectorshipDeclaration);
            writer.WriteBoolValue("directors_provided", DirectorsProvided);
            writer.WriteBoolValue("executives_provided", ExecutivesProvided);
            writer.WriteStringValue("export_license_id", ExportLicenseId);
            writer.WriteStringValue("export_purpose_code", ExportPurposeCode);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("name_kana", NameKana);
            writer.WriteStringValue("name_kanji", NameKanji);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_ubo_declaration>("ownership_declaration", OwnershipDeclaration);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_company_ownership_exemption_reason>("ownership_exemption_reason", OwnershipExemptionReason);
            writer.WriteBoolValue("owners_provided", OwnersProvided);
            writer.WriteStringValue("phone", Phone);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_registration_date>("registration_date", RegistrationDate);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_company_structure>("structure", Structure);
            writer.WriteBoolValue("tax_id_provided", TaxIdProvided);
            writer.WriteStringValue("tax_id_registrar", TaxIdRegistrar);
            writer.WriteBoolValue("vat_id_provided", VatIdProvided);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_company_verification>("verification", Verification);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
