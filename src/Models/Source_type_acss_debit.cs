// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Source_type_acss_debit : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The bank_address_city property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BankAddressCity { get; set; }
#nullable restore
#else
        public string BankAddressCity { get; set; }
#endif
        /// <summary>The bank_address_line_1 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BankAddressLine1 { get; set; }
#nullable restore
#else
        public string BankAddressLine1 { get; set; }
#endif
        /// <summary>The bank_address_line_2 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BankAddressLine2 { get; set; }
#nullable restore
#else
        public string BankAddressLine2 { get; set; }
#endif
        /// <summary>The bank_address_postal_code property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BankAddressPostalCode { get; set; }
#nullable restore
#else
        public string BankAddressPostalCode { get; set; }
#endif
        /// <summary>The bank_name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BankName { get; set; }
#nullable restore
#else
        public string BankName { get; set; }
#endif
        /// <summary>The category property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Category { get; set; }
#nullable restore
#else
        public string Category { get; set; }
#endif
        /// <summary>The country property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Country { get; set; }
#nullable restore
#else
        public string Country { get; set; }
#endif
        /// <summary>The fingerprint property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Fingerprint { get; set; }
#nullable restore
#else
        public string Fingerprint { get; set; }
#endif
        /// <summary>The last4 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Last4 { get; set; }
#nullable restore
#else
        public string Last4 { get; set; }
#endif
        /// <summary>The routing_number property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RoutingNumber { get; set; }
#nullable restore
#else
        public string RoutingNumber { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Source_type_acss_debit"/> and sets the default values.
        /// </summary>
        public Source_type_acss_debit()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Source_type_acss_debit"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Source_type_acss_debit CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Source_type_acss_debit();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "bank_address_city", n => { BankAddressCity = n.GetStringValue(); } },
                { "bank_address_line_1", n => { BankAddressLine1 = n.GetStringValue(); } },
                { "bank_address_line_2", n => { BankAddressLine2 = n.GetStringValue(); } },
                { "bank_address_postal_code", n => { BankAddressPostalCode = n.GetStringValue(); } },
                { "bank_name", n => { BankName = n.GetStringValue(); } },
                { "category", n => { Category = n.GetStringValue(); } },
                { "country", n => { Country = n.GetStringValue(); } },
                { "fingerprint", n => { Fingerprint = n.GetStringValue(); } },
                { "last4", n => { Last4 = n.GetStringValue(); } },
                { "routing_number", n => { RoutingNumber = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("bank_address_city", BankAddressCity);
            writer.WriteStringValue("bank_address_line_1", BankAddressLine1);
            writer.WriteStringValue("bank_address_line_2", BankAddressLine2);
            writer.WriteStringValue("bank_address_postal_code", BankAddressPostalCode);
            writer.WriteStringValue("bank_name", BankName);
            writer.WriteStringValue("category", Category);
            writer.WriteStringValue("country", Country);
            writer.WriteStringValue("fingerprint", Fingerprint);
            writer.WriteStringValue("last4", Last4);
            writer.WriteStringValue("routing_number", RoutingNumber);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
