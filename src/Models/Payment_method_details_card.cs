// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Payment_method_details_card : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The authorized amount.</summary>
        public int? AmountAuthorized { get; set; }
        /// <summary>Authorization code on the charge.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AuthorizationCode { get; set; }
#nullable restore
#else
        public string AuthorizationCode { get; set; }
#endif
        /// <summary>Card brand. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `jcb`, `link`, `mastercard`, `unionpay`, `visa` or `unknown`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Brand { get; set; }
#nullable restore
#else
        public string Brand { get; set; }
#endif
        /// <summary>When using manual capture, a future timestamp at which the charge will be automatically refunded if uncaptured.</summary>
        public int? CaptureBefore { get; set; }
        /// <summary>Check results by Card networks on Card address and CVC at time of payment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_checks? Checks { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_checks Checks { get; set; }
#endif
        /// <summary>Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you&apos;ve collected.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Country { get; set; }
#nullable restore
#else
        public string Country { get; set; }
#endif
        /// <summary>Two-digit number representing the card&apos;s expiration month.</summary>
        public int? ExpMonth { get; set; }
        /// <summary>Four-digit number representing the card&apos;s expiration year.</summary>
        public int? ExpYear { get; set; }
        /// <summary>The extended_authorization property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_private_payment_methods_card_details_api_resource_enterprise_features_extended_authorization_extended_authorization? ExtendedAuthorization { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_private_payment_methods_card_details_api_resource_enterprise_features_extended_authorization_extended_authorization ExtendedAuthorization { get; set; }
#endif
        /// <summary>Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâ€™ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.*As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Fingerprint { get; set; }
#nullable restore
#else
        public string Fingerprint { get; set; }
#endif
        /// <summary>Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Funding { get; set; }
#nullable restore
#else
        public string Funding { get; set; }
#endif
        /// <summary>The incremental_authorization property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_private_payment_methods_card_details_api_resource_enterprise_features_incremental_authorization_incremental_authorization? IncrementalAuthorization { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_private_payment_methods_card_details_api_resource_enterprise_features_incremental_authorization_incremental_authorization IncrementalAuthorization { get; set; }
#endif
        /// <summary>Installment details for this payment.For more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_installments? Installments { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_installments Installments { get; set; }
#endif
        /// <summary>The last four digits of the card.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Last4 { get; set; }
#nullable restore
#else
        public string Last4 { get; set; }
#endif
        /// <summary>ID of the mandate used to make this payment or created by it.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Mandate { get; set; }
#nullable restore
#else
        public string Mandate { get; set; }
#endif
        /// <summary>The multicapture property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_private_payment_methods_card_details_api_resource_multicapture? Multicapture { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_private_payment_methods_card_details_api_resource_multicapture Multicapture { get; set; }
#endif
        /// <summary>Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Network { get; set; }
#nullable restore
#else
        public string Network { get; set; }
#endif
        /// <summary>If this card has network token credentials, this contains the details of the network token credentials.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_network_token? NetworkToken { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_network_token NetworkToken { get; set; }
#endif
        /// <summary>This is used by the financial networks to identify a transaction. Visa calls this the Transaction ID, Mastercard calls this the Trace ID, and American Express calls this the Acquirer Reference Data. This value will be present if it is returned by the financial network in the authorization response, and null otherwise.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NetworkTransactionId { get; set; }
#nullable restore
#else
        public string NetworkTransactionId { get; set; }
#endif
        /// <summary>The overcapture property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_private_payment_methods_card_details_api_resource_enterprise_features_overcapture_overcapture? Overcapture { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_private_payment_methods_card_details_api_resource_enterprise_features_overcapture_overcapture Overcapture { get; set; }
#endif
        /// <summary>Status of a card based on the card issuer.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_regulated_status? RegulatedStatus { get; set; }
        /// <summary>Populated if this transaction used 3D Secure authentication.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Three_d_secure_details_charge? ThreeDSecure { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Three_d_secure_details_charge ThreeDSecure { get; set; }
#endif
        /// <summary>If this Card is part of a card wallet, this contains the details of the card wallet.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_wallet? Wallet { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_wallet Wallet { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card"/> and sets the default values.
        /// </summary>
        public Payment_method_details_card()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount_authorized", n => { AmountAuthorized = n.GetIntValue(); } },
                { "authorization_code", n => { AuthorizationCode = n.GetStringValue(); } },
                { "brand", n => { Brand = n.GetStringValue(); } },
                { "capture_before", n => { CaptureBefore = n.GetIntValue(); } },
                { "checks", n => { Checks = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_checks>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_checks.CreateFromDiscriminatorValue); } },
                { "country", n => { Country = n.GetStringValue(); } },
                { "exp_month", n => { ExpMonth = n.GetIntValue(); } },
                { "exp_year", n => { ExpYear = n.GetIntValue(); } },
                { "extended_authorization", n => { ExtendedAuthorization = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_private_payment_methods_card_details_api_resource_enterprise_features_extended_authorization_extended_authorization>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_private_payment_methods_card_details_api_resource_enterprise_features_extended_authorization_extended_authorization.CreateFromDiscriminatorValue); } },
                { "fingerprint", n => { Fingerprint = n.GetStringValue(); } },
                { "funding", n => { Funding = n.GetStringValue(); } },
                { "incremental_authorization", n => { IncrementalAuthorization = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_private_payment_methods_card_details_api_resource_enterprise_features_incremental_authorization_incremental_authorization>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_private_payment_methods_card_details_api_resource_enterprise_features_incremental_authorization_incremental_authorization.CreateFromDiscriminatorValue); } },
                { "installments", n => { Installments = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_installments>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_installments.CreateFromDiscriminatorValue); } },
                { "last4", n => { Last4 = n.GetStringValue(); } },
                { "mandate", n => { Mandate = n.GetStringValue(); } },
                { "multicapture", n => { Multicapture = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_private_payment_methods_card_details_api_resource_multicapture>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_private_payment_methods_card_details_api_resource_multicapture.CreateFromDiscriminatorValue); } },
                { "network", n => { Network = n.GetStringValue(); } },
                { "network_token", n => { NetworkToken = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_network_token>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_network_token.CreateFromDiscriminatorValue); } },
                { "network_transaction_id", n => { NetworkTransactionId = n.GetStringValue(); } },
                { "overcapture", n => { Overcapture = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_private_payment_methods_card_details_api_resource_enterprise_features_overcapture_overcapture>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_private_payment_methods_card_details_api_resource_enterprise_features_overcapture_overcapture.CreateFromDiscriminatorValue); } },
                { "regulated_status", n => { RegulatedStatus = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_regulated_status>(); } },
                { "three_d_secure", n => { ThreeDSecure = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Three_d_secure_details_charge>(global::Soenneker.Stripe.OpenApiClient.Models.Three_d_secure_details_charge.CreateFromDiscriminatorValue); } },
                { "wallet", n => { Wallet = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_wallet>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_wallet.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("amount_authorized", AmountAuthorized);
            writer.WriteStringValue("authorization_code", AuthorizationCode);
            writer.WriteStringValue("brand", Brand);
            writer.WriteIntValue("capture_before", CaptureBefore);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_checks>("checks", Checks);
            writer.WriteStringValue("country", Country);
            writer.WriteIntValue("exp_month", ExpMonth);
            writer.WriteIntValue("exp_year", ExpYear);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_private_payment_methods_card_details_api_resource_enterprise_features_extended_authorization_extended_authorization>("extended_authorization", ExtendedAuthorization);
            writer.WriteStringValue("fingerprint", Fingerprint);
            writer.WriteStringValue("funding", Funding);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_private_payment_methods_card_details_api_resource_enterprise_features_incremental_authorization_incremental_authorization>("incremental_authorization", IncrementalAuthorization);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_installments>("installments", Installments);
            writer.WriteStringValue("last4", Last4);
            writer.WriteStringValue("mandate", Mandate);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_private_payment_methods_card_details_api_resource_multicapture>("multicapture", Multicapture);
            writer.WriteStringValue("network", Network);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_network_token>("network_token", NetworkToken);
            writer.WriteStringValue("network_transaction_id", NetworkTransactionId);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_private_payment_methods_card_details_api_resource_enterprise_features_overcapture_overcapture>("overcapture", Overcapture);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_regulated_status>("regulated_status", RegulatedStatus);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Three_d_secure_details_charge>("three_d_secure", ThreeDSecure);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_wallet>("wallet", Wallet);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
