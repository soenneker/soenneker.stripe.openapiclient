// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    /// <summary>
    /// Customers with certain payments enabled have a cash balance, representing funds that were paidby the customer to a merchant, but have not yet been allocated to a payment. Cash Balance Transactionsrepresent when funds are moved into or out of this balance. This includes funding by the customer, allocationto payments, and refunds to the customer.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Customer_cash_balance_transaction : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The adjusted_for_overdraft property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Customer_balance_resource_cash_balance_transaction_resource_adjusted_for_overdraft? AdjustedForOverdraft { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Customer_balance_resource_cash_balance_transaction_resource_adjusted_for_overdraft AdjustedForOverdraft { get; set; }
#endif
        /// <summary>The applied_to_payment property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Customer_balance_resource_cash_balance_transaction_resource_applied_to_payment_transaction? AppliedToPayment { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Customer_balance_resource_cash_balance_transaction_resource_applied_to_payment_transaction AppliedToPayment { get; set; }
#endif
        /// <summary>Time at which the object was created. Measured in seconds since the Unix epoch.</summary>
        public int? Created { get; set; }
        /// <summary>Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>The customer whose available cash balance changed as a result of this transaction.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Customer_cash_balance_transaction.Customer_cash_balance_transaction_customer? Customer { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Customer_cash_balance_transaction.Customer_cash_balance_transaction_customer Customer { get; set; }
#endif
        /// <summary>The total available cash balance for the specified currency after this transaction was applied. Represented in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).</summary>
        public int? EndingBalance { get; set; }
        /// <summary>The funded property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Customer_balance_resource_cash_balance_transaction_resource_funded_transaction? Funded { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Customer_balance_resource_cash_balance_transaction_resource_funded_transaction Funded { get; set; }
#endif
        /// <summary>Unique identifier for the object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.</summary>
        public bool? Livemode { get; set; }
        /// <summary>The amount by which the cash balance changed, represented in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). A positive value represents funds being added to the cash balance, a negative value represents funds being removed from the cash balance.</summary>
        public int? NetAmount { get; set; }
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Customer_cash_balance_transaction_object? Object { get; set; }
        /// <summary>The refunded_from_payment property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Customer_balance_resource_cash_balance_transaction_resource_refunded_from_payment_transaction? RefundedFromPayment { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Customer_balance_resource_cash_balance_transaction_resource_refunded_from_payment_transaction RefundedFromPayment { get; set; }
#endif
        /// <summary>The transferred_to_balance property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Customer_balance_resource_cash_balance_transaction_resource_transferred_to_balance? TransferredToBalance { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Customer_balance_resource_cash_balance_transaction_resource_transferred_to_balance TransferredToBalance { get; set; }
#endif
        /// <summary>The type of the cash balance transaction. New types may be added in future. See [Customer Balance](https://stripe.com/docs/payments/customer-balance#types) to learn more about these types.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Customer_cash_balance_transaction_type? Type { get; set; }
        /// <summary>The unapplied_from_payment property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Customer_balance_resource_cash_balance_transaction_resource_unapplied_from_payment_transaction? UnappliedFromPayment { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Customer_balance_resource_cash_balance_transaction_resource_unapplied_from_payment_transaction UnappliedFromPayment { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Customer_cash_balance_transaction"/> and sets the default values.
        /// </summary>
        public Customer_cash_balance_transaction()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Customer_cash_balance_transaction"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Customer_cash_balance_transaction CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Customer_cash_balance_transaction();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "adjusted_for_overdraft", n => { AdjustedForOverdraft = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Customer_balance_resource_cash_balance_transaction_resource_adjusted_for_overdraft>(global::Soenneker.Stripe.OpenApiClient.Models.Customer_balance_resource_cash_balance_transaction_resource_adjusted_for_overdraft.CreateFromDiscriminatorValue); } },
                { "applied_to_payment", n => { AppliedToPayment = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Customer_balance_resource_cash_balance_transaction_resource_applied_to_payment_transaction>(global::Soenneker.Stripe.OpenApiClient.Models.Customer_balance_resource_cash_balance_transaction_resource_applied_to_payment_transaction.CreateFromDiscriminatorValue); } },
                { "created", n => { Created = n.GetIntValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "customer", n => { Customer = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Customer_cash_balance_transaction.Customer_cash_balance_transaction_customer>(global::Soenneker.Stripe.OpenApiClient.Models.Customer_cash_balance_transaction.Customer_cash_balance_transaction_customer.CreateFromDiscriminatorValue); } },
                { "ending_balance", n => { EndingBalance = n.GetIntValue(); } },
                { "funded", n => { Funded = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Customer_balance_resource_cash_balance_transaction_resource_funded_transaction>(global::Soenneker.Stripe.OpenApiClient.Models.Customer_balance_resource_cash_balance_transaction_resource_funded_transaction.CreateFromDiscriminatorValue); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "livemode", n => { Livemode = n.GetBoolValue(); } },
                { "net_amount", n => { NetAmount = n.GetIntValue(); } },
                { "object", n => { Object = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Customer_cash_balance_transaction_object>(); } },
                { "refunded_from_payment", n => { RefundedFromPayment = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Customer_balance_resource_cash_balance_transaction_resource_refunded_from_payment_transaction>(global::Soenneker.Stripe.OpenApiClient.Models.Customer_balance_resource_cash_balance_transaction_resource_refunded_from_payment_transaction.CreateFromDiscriminatorValue); } },
                { "transferred_to_balance", n => { TransferredToBalance = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Customer_balance_resource_cash_balance_transaction_resource_transferred_to_balance>(global::Soenneker.Stripe.OpenApiClient.Models.Customer_balance_resource_cash_balance_transaction_resource_transferred_to_balance.CreateFromDiscriminatorValue); } },
                { "type", n => { Type = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Customer_cash_balance_transaction_type>(); } },
                { "unapplied_from_payment", n => { UnappliedFromPayment = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Customer_balance_resource_cash_balance_transaction_resource_unapplied_from_payment_transaction>(global::Soenneker.Stripe.OpenApiClient.Models.Customer_balance_resource_cash_balance_transaction_resource_unapplied_from_payment_transaction.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Customer_balance_resource_cash_balance_transaction_resource_adjusted_for_overdraft>("adjusted_for_overdraft", AdjustedForOverdraft);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Customer_balance_resource_cash_balance_transaction_resource_applied_to_payment_transaction>("applied_to_payment", AppliedToPayment);
            writer.WriteIntValue("created", Created);
            writer.WriteStringValue("currency", Currency);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Customer_cash_balance_transaction.Customer_cash_balance_transaction_customer>("customer", Customer);
            writer.WriteIntValue("ending_balance", EndingBalance);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Customer_balance_resource_cash_balance_transaction_resource_funded_transaction>("funded", Funded);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("livemode", Livemode);
            writer.WriteIntValue("net_amount", NetAmount);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Customer_cash_balance_transaction_object>("object", Object);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Customer_balance_resource_cash_balance_transaction_resource_refunded_from_payment_transaction>("refunded_from_payment", RefundedFromPayment);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Customer_balance_resource_cash_balance_transaction_resource_transferred_to_balance>("transferred_to_balance", TransferredToBalance);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Customer_cash_balance_transaction_type>("type", Type);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Customer_balance_resource_cash_balance_transaction_resource_unapplied_from_payment_transaction>("unapplied_from_payment", UnappliedFromPayment);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Customer"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Customer_cash_balance_transaction_customer : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Customer"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Customer? Customer { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Customer Customer { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Customer_cash_balance_transaction.Customer_cash_balance_transaction_customer"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Customer_cash_balance_transaction.Customer_cash_balance_transaction_customer CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Customer_cash_balance_transaction.Customer_cash_balance_transaction_customer();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.Customer = new global::Soenneker.Stripe.OpenApiClient.Models.Customer();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(Customer != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(Customer);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Customer>(null, Customer);
                }
            }
        }
    }
}
#pragma warning restore CS0618
