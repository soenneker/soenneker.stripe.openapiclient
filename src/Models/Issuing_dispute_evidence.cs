// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Issuing_dispute_evidence : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The canceled property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_canceled_evidence? Canceled { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_canceled_evidence Canceled { get; set; }
#endif
        /// <summary>The duplicate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence? Duplicate { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence Duplicate { get; set; }
#endif
        /// <summary>The fraudulent property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_fraudulent_evidence? Fraudulent { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_fraudulent_evidence Fraudulent { get; set; }
#endif
        /// <summary>The merchandise_not_as_described property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_merchandise_not_as_described_evidence? MerchandiseNotAsDescribed { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_merchandise_not_as_described_evidence MerchandiseNotAsDescribed { get; set; }
#endif
        /// <summary>The not_received property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_not_received_evidence? NotReceived { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_not_received_evidence NotReceived { get; set; }
#endif
        /// <summary>The no_valid_authorization property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_no_valid_authorization_evidence? NoValidAuthorization { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_no_valid_authorization_evidence NoValidAuthorization { get; set; }
#endif
        /// <summary>The other property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_other_evidence? Other { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_other_evidence Other { get; set; }
#endif
        /// <summary>The reason for filing the dispute. Its value will match the field containing the evidence.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_evidence_reason? Reason { get; set; }
        /// <summary>The service_not_as_described property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_service_not_as_described_evidence? ServiceNotAsDescribed { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_service_not_as_described_evidence ServiceNotAsDescribed { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_evidence"/> and sets the default values.
        /// </summary>
        public Issuing_dispute_evidence()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_evidence"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_evidence CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_evidence();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "canceled", n => { Canceled = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_canceled_evidence>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_canceled_evidence.CreateFromDiscriminatorValue); } },
                { "duplicate", n => { Duplicate = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence.CreateFromDiscriminatorValue); } },
                { "fraudulent", n => { Fraudulent = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_fraudulent_evidence>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_fraudulent_evidence.CreateFromDiscriminatorValue); } },
                { "merchandise_not_as_described", n => { MerchandiseNotAsDescribed = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_merchandise_not_as_described_evidence>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_merchandise_not_as_described_evidence.CreateFromDiscriminatorValue); } },
                { "no_valid_authorization", n => { NoValidAuthorization = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_no_valid_authorization_evidence>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_no_valid_authorization_evidence.CreateFromDiscriminatorValue); } },
                { "not_received", n => { NotReceived = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_not_received_evidence>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_not_received_evidence.CreateFromDiscriminatorValue); } },
                { "other", n => { Other = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_other_evidence>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_other_evidence.CreateFromDiscriminatorValue); } },
                { "reason", n => { Reason = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_evidence_reason>(); } },
                { "service_not_as_described", n => { ServiceNotAsDescribed = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_service_not_as_described_evidence>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_service_not_as_described_evidence.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_canceled_evidence>("canceled", Canceled);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence>("duplicate", Duplicate);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_fraudulent_evidence>("fraudulent", Fraudulent);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_merchandise_not_as_described_evidence>("merchandise_not_as_described", MerchandiseNotAsDescribed);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_not_received_evidence>("not_received", NotReceived);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_no_valid_authorization_evidence>("no_valid_authorization", NoValidAuthorization);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_other_evidence>("other", Other);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_evidence_reason>("reason", Reason);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_service_not_as_described_evidence>("service_not_as_described", ServiceNotAsDescribed);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
