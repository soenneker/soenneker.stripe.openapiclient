// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Tax_product_resource_tax_transaction_shipping_cost : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The shipping amount in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). If `tax_behavior=inclusive`, then this amount includes taxes. Otherwise, taxes were calculated on top of this amount.</summary>
        public int? Amount { get; set; }
        /// <summary>The amount of tax calculated for shipping, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).</summary>
        public int? AmountTax { get; set; }
        /// <summary>The ID of an existing [ShippingRate](https://stripe.com/docs/api/shipping_rates/object).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ShippingRate { get; set; }
#nullable restore
#else
        public string ShippingRate { get; set; }
#endif
        /// <summary>Specifies whether the `amount` includes taxes. If `tax_behavior=inclusive`, then the amount includes taxes.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Tax_product_resource_tax_transaction_shipping_cost_tax_behavior? TaxBehavior { get; set; }
        /// <summary>The [tax code](https://stripe.com/docs/tax/tax-categories) ID used for shipping.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TaxCode { get; set; }
#nullable restore
#else
        public string TaxCode { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Tax_product_resource_tax_transaction_shipping_cost"/> and sets the default values.
        /// </summary>
        public Tax_product_resource_tax_transaction_shipping_cost()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Tax_product_resource_tax_transaction_shipping_cost"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Tax_product_resource_tax_transaction_shipping_cost CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Tax_product_resource_tax_transaction_shipping_cost();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount", n => { Amount = n.GetIntValue(); } },
                { "amount_tax", n => { AmountTax = n.GetIntValue(); } },
                { "shipping_rate", n => { ShippingRate = n.GetStringValue(); } },
                { "tax_behavior", n => { TaxBehavior = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Tax_product_resource_tax_transaction_shipping_cost_tax_behavior>(); } },
                { "tax_code", n => { TaxCode = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("amount", Amount);
            writer.WriteIntValue("amount_tax", AmountTax);
            writer.WriteStringValue("shipping_rate", ShippingRate);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Tax_product_resource_tax_transaction_shipping_cost_tax_behavior>("tax_behavior", TaxBehavior);
            writer.WriteStringValue("tax_code", TaxCode);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
