// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Three_d_secure_details_charge : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>For authenticated transactions: how the customer was authenticated bythe issuing bank.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Three_d_secure_details_charge_authentication_flow? AuthenticationFlow { get; set; }
        /// <summary>The Electronic Commerce Indicator (ECI). A protocol-level fieldindicating what degree of authentication was performed.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Three_d_secure_details_charge_electronic_commerce_indicator? ElectronicCommerceIndicator { get; set; }
        /// <summary>The exemption requested via 3DS and accepted by the issuer at authentication time.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Three_d_secure_details_charge_exemption_indicator? ExemptionIndicator { get; set; }
        /// <summary>Whether Stripe requested the value of `exemption_indicator` in the transaction. This will depend onthe outcome of Stripe&apos;s internal risk assessment.</summary>
        public bool? ExemptionIndicatorApplied { get; set; }
        /// <summary>Indicates the outcome of 3D Secure authentication.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Three_d_secure_details_charge_result? Result { get; set; }
        /// <summary>Additional information about why 3D Secure succeeded or failed basedon the `result`.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Three_d_secure_details_charge_result_reason? ResultReason { get; set; }
        /// <summary>The 3D Secure 1 XID or 3D Secure 2 Directory Server Transaction ID(dsTransId) for this payment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TransactionId { get; set; }
#nullable restore
#else
        public string TransactionId { get; set; }
#endif
        /// <summary>The version of 3D Secure that was used.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Three_d_secure_details_charge_version? Version { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Three_d_secure_details_charge"/> and sets the default values.
        /// </summary>
        public Three_d_secure_details_charge()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Three_d_secure_details_charge"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Three_d_secure_details_charge CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Three_d_secure_details_charge();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "authentication_flow", n => { AuthenticationFlow = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Three_d_secure_details_charge_authentication_flow>(); } },
                { "electronic_commerce_indicator", n => { ElectronicCommerceIndicator = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Three_d_secure_details_charge_electronic_commerce_indicator>(); } },
                { "exemption_indicator", n => { ExemptionIndicator = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Three_d_secure_details_charge_exemption_indicator>(); } },
                { "exemption_indicator_applied", n => { ExemptionIndicatorApplied = n.GetBoolValue(); } },
                { "result", n => { Result = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Three_d_secure_details_charge_result>(); } },
                { "result_reason", n => { ResultReason = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Three_d_secure_details_charge_result_reason>(); } },
                { "transaction_id", n => { TransactionId = n.GetStringValue(); } },
                { "version", n => { Version = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Three_d_secure_details_charge_version>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Three_d_secure_details_charge_authentication_flow>("authentication_flow", AuthenticationFlow);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Three_d_secure_details_charge_electronic_commerce_indicator>("electronic_commerce_indicator", ElectronicCommerceIndicator);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Three_d_secure_details_charge_exemption_indicator>("exemption_indicator", ExemptionIndicator);
            writer.WriteBoolValue("exemption_indicator_applied", ExemptionIndicatorApplied);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Three_d_secure_details_charge_result>("result", Result);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Three_d_secure_details_charge_result_reason>("result_reason", ResultReason);
            writer.WriteStringValue("transaction_id", TransactionId);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Three_d_secure_details_charge_version>("version", Version);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
