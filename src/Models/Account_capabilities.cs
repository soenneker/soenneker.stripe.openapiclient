// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Account_capabilities : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The status of the Canadian pre-authorized debits payments capability of the account, or whether the account can directly process Canadian pre-authorized debits charges.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_acss_debit_payments? AcssDebitPayments { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The status of the Affirm capability of the account, or whether the account can directly process Affirm charges.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_affirm_payments? AffirmPayments { get; set; }
        /// <summary>The status of the Afterpay Clearpay capability of the account, or whether the account can directly process Afterpay Clearpay charges.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_afterpay_clearpay_payments? AfterpayClearpayPayments { get; set; }
        /// <summary>The status of the Alma capability of the account, or whether the account can directly process Alma payments.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_alma_payments? AlmaPayments { get; set; }
        /// <summary>The status of the AmazonPay capability of the account, or whether the account can directly process AmazonPay payments.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_amazon_pay_payments? AmazonPayPayments { get; set; }
        /// <summary>The status of the BECS Direct Debit (AU) payments capability of the account, or whether the account can directly process BECS Direct Debit (AU) charges.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_au_becs_debit_payments? AuBecsDebitPayments { get; set; }
        /// <summary>The status of the Bacs Direct Debits payments capability of the account, or whether the account can directly process Bacs Direct Debits charges.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_bacs_debit_payments? BacsDebitPayments { get; set; }
        /// <summary>The status of the Bancontact payments capability of the account, or whether the account can directly process Bancontact charges.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_bancontact_payments? BancontactPayments { get; set; }
        /// <summary>The status of the customer_balance payments capability of the account, or whether the account can directly process customer_balance charges.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_bank_transfer_payments? BankTransferPayments { get; set; }
        /// <summary>The status of the Billie capability of the account, or whether the account can directly process Billie payments.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_billie_payments? BilliePayments { get; set; }
        /// <summary>The status of the blik payments capability of the account, or whether the account can directly process blik charges.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_blik_payments? BlikPayments { get; set; }
        /// <summary>The status of the boleto payments capability of the account, or whether the account can directly process boleto charges.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_boleto_payments? BoletoPayments { get; set; }
        /// <summary>The status of the card issuing capability of the account, or whether you can use Issuing to distribute funds on cards</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_card_issuing? CardIssuing { get; set; }
        /// <summary>The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_card_payments? CardPayments { get; set; }
        /// <summary>The status of the Cartes Bancaires payments capability of the account, or whether the account can directly process Cartes Bancaires card charges in EUR currency.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_cartes_bancaires_payments? CartesBancairesPayments { get; set; }
        /// <summary>The status of the Cash App Pay capability of the account, or whether the account can directly process Cash App Pay payments.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_cashapp_payments? CashappPayments { get; set; }
        /// <summary>The status of the Crypto capability of the account, or whether the account can directly process Crypto payments.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_crypto_payments? CryptoPayments { get; set; }
        /// <summary>The status of the EPS payments capability of the account, or whether the account can directly process EPS charges.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_eps_payments? EpsPayments { get; set; }
        /// <summary>The status of the FPX payments capability of the account, or whether the account can directly process FPX charges.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_fpx_payments? FpxPayments { get; set; }
        /// <summary>The status of the GB customer_balance payments (GBP currency) capability of the account, or whether the account can directly process GB customer_balance charges.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_gb_bank_transfer_payments? GbBankTransferPayments { get; set; }
        /// <summary>The status of the giropay payments capability of the account, or whether the account can directly process giropay charges.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_giropay_payments? GiropayPayments { get; set; }
        /// <summary>The status of the GrabPay payments capability of the account, or whether the account can directly process GrabPay charges.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_grabpay_payments? GrabpayPayments { get; set; }
        /// <summary>The status of the iDEAL payments capability of the account, or whether the account can directly process iDEAL charges.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_ideal_payments? IdealPayments { get; set; }
        /// <summary>The status of the india_international_payments capability of the account, or whether the account can process international charges (non INR) in India.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_india_international_payments? IndiaInternationalPayments { get; set; }
        /// <summary>The status of the JCB payments capability of the account, or whether the account (Japan only) can directly process JCB credit card charges in JPY currency.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_jcb_payments? JcbPayments { get; set; }
        /// <summary>The status of the Japanese customer_balance payments (JPY currency) capability of the account, or whether the account can directly process Japanese customer_balance charges.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_jp_bank_transfer_payments? JpBankTransferPayments { get; set; }
        /// <summary>The status of the KakaoPay capability of the account, or whether the account can directly process KakaoPay payments.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_kakao_pay_payments? KakaoPayPayments { get; set; }
        /// <summary>The status of the Klarna payments capability of the account, or whether the account can directly process Klarna charges.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_klarna_payments? KlarnaPayments { get; set; }
        /// <summary>The status of the konbini payments capability of the account, or whether the account can directly process konbini charges.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_konbini_payments? KonbiniPayments { get; set; }
        /// <summary>The status of the KrCard capability of the account, or whether the account can directly process KrCard payments.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_kr_card_payments? KrCardPayments { get; set; }
        /// <summary>The status of the legacy payments capability of the account.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_legacy_payments? LegacyPayments { get; set; }
        /// <summary>The status of the link_payments capability of the account, or whether the account can directly process Link charges.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_link_payments? LinkPayments { get; set; }
        /// <summary>The status of the MobilePay capability of the account, or whether the account can directly process MobilePay charges.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_mobilepay_payments? MobilepayPayments { get; set; }
        /// <summary>The status of the Multibanco payments capability of the account, or whether the account can directly process Multibanco charges.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_multibanco_payments? MultibancoPayments { get; set; }
        /// <summary>The status of the Mexican customer_balance payments (MXN currency) capability of the account, or whether the account can directly process Mexican customer_balance charges.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_mx_bank_transfer_payments? MxBankTransferPayments { get; set; }
        /// <summary>The status of the NaverPay capability of the account, or whether the account can directly process NaverPay payments.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_naver_pay_payments? NaverPayPayments { get; set; }
        /// <summary>The status of the New Zealand BECS Direct Debit payments capability of the account, or whether the account can directly process New Zealand BECS Direct Debit charges.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_nz_bank_account_becs_debit_payments? NzBankAccountBecsDebitPayments { get; set; }
        /// <summary>The status of the OXXO payments capability of the account, or whether the account can directly process OXXO charges.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_oxxo_payments? OxxoPayments { get; set; }
        /// <summary>The status of the P24 payments capability of the account, or whether the account can directly process P24 charges.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_p24_payments? P24Payments { get; set; }
        /// <summary>The status of the pay_by_bank payments capability of the account, or whether the account can directly process pay_by_bank charges.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_pay_by_bank_payments? PayByBankPayments { get; set; }
        /// <summary>The status of the Payco capability of the account, or whether the account can directly process Payco payments.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_payco_payments? PaycoPayments { get; set; }
        /// <summary>The status of the paynow payments capability of the account, or whether the account can directly process paynow charges.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_paynow_payments? PaynowPayments { get; set; }
        /// <summary>The status of the pix payments capability of the account, or whether the account can directly process pix charges.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_pix_payments? PixPayments { get; set; }
        /// <summary>The status of the promptpay payments capability of the account, or whether the account can directly process promptpay charges.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_promptpay_payments? PromptpayPayments { get; set; }
        /// <summary>The status of the RevolutPay capability of the account, or whether the account can directly process RevolutPay payments.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_revolut_pay_payments? RevolutPayPayments { get; set; }
        /// <summary>The status of the SamsungPay capability of the account, or whether the account can directly process SamsungPay payments.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_samsung_pay_payments? SamsungPayPayments { get; set; }
        /// <summary>The status of the Satispay capability of the account, or whether the account can directly process Satispay payments.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_satispay_payments? SatispayPayments { get; set; }
        /// <summary>The status of the SEPA customer_balance payments (EUR currency) capability of the account, or whether the account can directly process SEPA customer_balance charges.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_sepa_bank_transfer_payments? SepaBankTransferPayments { get; set; }
        /// <summary>The status of the SEPA Direct Debits payments capability of the account, or whether the account can directly process SEPA Direct Debits charges.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_sepa_debit_payments? SepaDebitPayments { get; set; }
        /// <summary>The status of the Sofort payments capability of the account, or whether the account can directly process Sofort charges.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_sofort_payments? SofortPayments { get; set; }
        /// <summary>The status of the Swish capability of the account, or whether the account can directly process Swish payments.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_swish_payments? SwishPayments { get; set; }
        /// <summary>The status of the tax reporting 1099-K (US) capability of the account.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_tax_reporting_us_1099_k? TaxReportingUs1099K { get; set; }
        /// <summary>The status of the tax reporting 1099-MISC (US) capability of the account.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_tax_reporting_us_1099_misc? TaxReportingUs1099Misc { get; set; }
        /// <summary>The status of the transfers capability of the account, or whether your platform can transfer funds to the account.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_transfers? Transfers { get; set; }
        /// <summary>The status of the banking capability, or whether the account can have bank accounts.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_treasury? Treasury { get; set; }
        /// <summary>The status of the TWINT capability of the account, or whether the account can directly process TWINT charges.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_twint_payments? TwintPayments { get; set; }
        /// <summary>The status of the US bank account ACH payments capability of the account, or whether the account can directly process US bank account charges.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_us_bank_account_ach_payments? UsBankAccountAchPayments { get; set; }
        /// <summary>The status of the US customer_balance payments (USD currency) capability of the account, or whether the account can directly process US customer_balance charges.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_us_bank_transfer_payments? UsBankTransferPayments { get; set; }
        /// <summary>The status of the Zip capability of the account, or whether the account can directly process Zip charges.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_zip_payments? ZipPayments { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities"/> and sets the default values.
        /// </summary>
        public Account_capabilities()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "acss_debit_payments", n => { AcssDebitPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_acss_debit_payments>(); } },
                { "affirm_payments", n => { AffirmPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_affirm_payments>(); } },
                { "afterpay_clearpay_payments", n => { AfterpayClearpayPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_afterpay_clearpay_payments>(); } },
                { "alma_payments", n => { AlmaPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_alma_payments>(); } },
                { "amazon_pay_payments", n => { AmazonPayPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_amazon_pay_payments>(); } },
                { "au_becs_debit_payments", n => { AuBecsDebitPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_au_becs_debit_payments>(); } },
                { "bacs_debit_payments", n => { BacsDebitPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_bacs_debit_payments>(); } },
                { "bancontact_payments", n => { BancontactPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_bancontact_payments>(); } },
                { "bank_transfer_payments", n => { BankTransferPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_bank_transfer_payments>(); } },
                { "billie_payments", n => { BilliePayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_billie_payments>(); } },
                { "blik_payments", n => { BlikPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_blik_payments>(); } },
                { "boleto_payments", n => { BoletoPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_boleto_payments>(); } },
                { "card_issuing", n => { CardIssuing = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_card_issuing>(); } },
                { "card_payments", n => { CardPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_card_payments>(); } },
                { "cartes_bancaires_payments", n => { CartesBancairesPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_cartes_bancaires_payments>(); } },
                { "cashapp_payments", n => { CashappPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_cashapp_payments>(); } },
                { "crypto_payments", n => { CryptoPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_crypto_payments>(); } },
                { "eps_payments", n => { EpsPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_eps_payments>(); } },
                { "fpx_payments", n => { FpxPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_fpx_payments>(); } },
                { "gb_bank_transfer_payments", n => { GbBankTransferPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_gb_bank_transfer_payments>(); } },
                { "giropay_payments", n => { GiropayPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_giropay_payments>(); } },
                { "grabpay_payments", n => { GrabpayPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_grabpay_payments>(); } },
                { "ideal_payments", n => { IdealPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_ideal_payments>(); } },
                { "india_international_payments", n => { IndiaInternationalPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_india_international_payments>(); } },
                { "jcb_payments", n => { JcbPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_jcb_payments>(); } },
                { "jp_bank_transfer_payments", n => { JpBankTransferPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_jp_bank_transfer_payments>(); } },
                { "kakao_pay_payments", n => { KakaoPayPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_kakao_pay_payments>(); } },
                { "klarna_payments", n => { KlarnaPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_klarna_payments>(); } },
                { "konbini_payments", n => { KonbiniPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_konbini_payments>(); } },
                { "kr_card_payments", n => { KrCardPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_kr_card_payments>(); } },
                { "legacy_payments", n => { LegacyPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_legacy_payments>(); } },
                { "link_payments", n => { LinkPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_link_payments>(); } },
                { "mobilepay_payments", n => { MobilepayPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_mobilepay_payments>(); } },
                { "multibanco_payments", n => { MultibancoPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_multibanco_payments>(); } },
                { "mx_bank_transfer_payments", n => { MxBankTransferPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_mx_bank_transfer_payments>(); } },
                { "naver_pay_payments", n => { NaverPayPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_naver_pay_payments>(); } },
                { "nz_bank_account_becs_debit_payments", n => { NzBankAccountBecsDebitPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_nz_bank_account_becs_debit_payments>(); } },
                { "oxxo_payments", n => { OxxoPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_oxxo_payments>(); } },
                { "p24_payments", n => { P24Payments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_p24_payments>(); } },
                { "pay_by_bank_payments", n => { PayByBankPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_pay_by_bank_payments>(); } },
                { "payco_payments", n => { PaycoPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_payco_payments>(); } },
                { "paynow_payments", n => { PaynowPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_paynow_payments>(); } },
                { "pix_payments", n => { PixPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_pix_payments>(); } },
                { "promptpay_payments", n => { PromptpayPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_promptpay_payments>(); } },
                { "revolut_pay_payments", n => { RevolutPayPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_revolut_pay_payments>(); } },
                { "samsung_pay_payments", n => { SamsungPayPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_samsung_pay_payments>(); } },
                { "satispay_payments", n => { SatispayPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_satispay_payments>(); } },
                { "sepa_bank_transfer_payments", n => { SepaBankTransferPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_sepa_bank_transfer_payments>(); } },
                { "sepa_debit_payments", n => { SepaDebitPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_sepa_debit_payments>(); } },
                { "sofort_payments", n => { SofortPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_sofort_payments>(); } },
                { "swish_payments", n => { SwishPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_swish_payments>(); } },
                { "tax_reporting_us_1099_k", n => { TaxReportingUs1099K = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_tax_reporting_us_1099_k>(); } },
                { "tax_reporting_us_1099_misc", n => { TaxReportingUs1099Misc = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_tax_reporting_us_1099_misc>(); } },
                { "transfers", n => { Transfers = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_transfers>(); } },
                { "treasury", n => { Treasury = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_treasury>(); } },
                { "twint_payments", n => { TwintPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_twint_payments>(); } },
                { "us_bank_account_ach_payments", n => { UsBankAccountAchPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_us_bank_account_ach_payments>(); } },
                { "us_bank_transfer_payments", n => { UsBankTransferPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_us_bank_transfer_payments>(); } },
                { "zip_payments", n => { ZipPayments = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_zip_payments>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_acss_debit_payments>("acss_debit_payments", AcssDebitPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_affirm_payments>("affirm_payments", AffirmPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_afterpay_clearpay_payments>("afterpay_clearpay_payments", AfterpayClearpayPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_alma_payments>("alma_payments", AlmaPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_amazon_pay_payments>("amazon_pay_payments", AmazonPayPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_au_becs_debit_payments>("au_becs_debit_payments", AuBecsDebitPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_bacs_debit_payments>("bacs_debit_payments", BacsDebitPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_bancontact_payments>("bancontact_payments", BancontactPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_bank_transfer_payments>("bank_transfer_payments", BankTransferPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_billie_payments>("billie_payments", BilliePayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_blik_payments>("blik_payments", BlikPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_boleto_payments>("boleto_payments", BoletoPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_card_issuing>("card_issuing", CardIssuing);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_card_payments>("card_payments", CardPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_cartes_bancaires_payments>("cartes_bancaires_payments", CartesBancairesPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_cashapp_payments>("cashapp_payments", CashappPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_crypto_payments>("crypto_payments", CryptoPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_eps_payments>("eps_payments", EpsPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_fpx_payments>("fpx_payments", FpxPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_gb_bank_transfer_payments>("gb_bank_transfer_payments", GbBankTransferPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_giropay_payments>("giropay_payments", GiropayPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_grabpay_payments>("grabpay_payments", GrabpayPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_ideal_payments>("ideal_payments", IdealPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_india_international_payments>("india_international_payments", IndiaInternationalPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_jcb_payments>("jcb_payments", JcbPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_jp_bank_transfer_payments>("jp_bank_transfer_payments", JpBankTransferPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_kakao_pay_payments>("kakao_pay_payments", KakaoPayPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_klarna_payments>("klarna_payments", KlarnaPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_konbini_payments>("konbini_payments", KonbiniPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_kr_card_payments>("kr_card_payments", KrCardPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_legacy_payments>("legacy_payments", LegacyPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_link_payments>("link_payments", LinkPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_mobilepay_payments>("mobilepay_payments", MobilepayPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_multibanco_payments>("multibanco_payments", MultibancoPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_mx_bank_transfer_payments>("mx_bank_transfer_payments", MxBankTransferPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_naver_pay_payments>("naver_pay_payments", NaverPayPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_nz_bank_account_becs_debit_payments>("nz_bank_account_becs_debit_payments", NzBankAccountBecsDebitPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_oxxo_payments>("oxxo_payments", OxxoPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_p24_payments>("p24_payments", P24Payments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_pay_by_bank_payments>("pay_by_bank_payments", PayByBankPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_payco_payments>("payco_payments", PaycoPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_paynow_payments>("paynow_payments", PaynowPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_pix_payments>("pix_payments", PixPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_promptpay_payments>("promptpay_payments", PromptpayPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_revolut_pay_payments>("revolut_pay_payments", RevolutPayPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_samsung_pay_payments>("samsung_pay_payments", SamsungPayPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_satispay_payments>("satispay_payments", SatispayPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_sepa_bank_transfer_payments>("sepa_bank_transfer_payments", SepaBankTransferPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_sepa_debit_payments>("sepa_debit_payments", SepaDebitPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_sofort_payments>("sofort_payments", SofortPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_swish_payments>("swish_payments", SwishPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_tax_reporting_us_1099_k>("tax_reporting_us_1099_k", TaxReportingUs1099K);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_tax_reporting_us_1099_misc>("tax_reporting_us_1099_misc", TaxReportingUs1099Misc);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_transfers>("transfers", Transfers);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_treasury>("treasury", Treasury);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_twint_payments>("twint_payments", TwintPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_us_bank_account_ach_payments>("us_bank_account_ach_payments", UsBankAccountAchPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_us_bank_transfer_payments>("us_bank_transfer_payments", UsBankTransferPayments);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities_zip_payments>("zip_payments", ZipPayments);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
