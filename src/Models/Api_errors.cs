// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Api_errors : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>For card errors resulting from a card issuer decline, a short string indicating [how to proceed with an error](https://stripe.com/docs/declines#retrying-issuer-declines) if they provide one.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AdviceCode { get; set; }
#nullable restore
#else
        public string AdviceCode { get; set; }
#endif
        /// <summary>For card errors, the ID of the failed charge.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Charge { get; set; }
#nullable restore
#else
        public string Charge { get; set; }
#endif
        /// <summary>For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Code { get; set; }
#nullable restore
#else
        public string Code { get; set; }
#endif
        /// <summary>For card errors resulting from a card issuer decline, a short string indicating the [card issuer&apos;s reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeclineCode { get; set; }
#nullable restore
#else
        public string DeclineCode { get; set; }
#endif
        /// <summary>A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DocUrl { get; set; }
#nullable restore
#else
        public string DocUrl { get; set; }
#endif
        /// <summary>A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Message { get; set; }
#nullable restore
#else
        public string Message { get; set; }
#endif
        /// <summary>For card errors resulting from a card issuer decline, a 2 digit code which indicates the advice given to merchant by the card network on how to proceed with an error.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NetworkAdviceCode { get; set; }
#nullable restore
#else
        public string NetworkAdviceCode { get; set; }
#endif
        /// <summary>For card errors resulting from a card issuer decline, a brand specific 2, 3, or 4 digit code which indicates the reason the authorization failed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NetworkDeclineCode { get; set; }
#nullable restore
#else
        public string NetworkDeclineCode { get; set; }
#endif
        /// <summary>If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Param { get; set; }
#nullable restore
#else
        public string Param { get; set; }
#endif
        /// <summary>A PaymentIntent guides you through the process of collecting a payment from your customer.We recommend that you create exactly one PaymentIntent for each order orcustomer session in your system. You can reference the PaymentIntent later tosee the history of payment attempts for a particular session.A PaymentIntent transitions through[multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)throughout its lifetime as it interfaces with Stripe.js to performauthentication flows and ultimately creates at most one successful charge.Related guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent? PaymentIntent { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent PaymentIntent { get; set; }
#endif
        /// <summary>PaymentMethod objects represent your customer&apos;s payment instruments.You can use them with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or save them toCustomer objects to store instrument details for future payments.Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method? PaymentMethod { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method PaymentMethod { get; set; }
#endif
        /// <summary>If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PaymentMethodType { get; set; }
#nullable restore
#else
        public string PaymentMethodType { get; set; }
#endif
        /// <summary>A URL to the request log entry in your dashboard.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RequestLogUrl { get; set; }
#nullable restore
#else
        public string RequestLogUrl { get; set; }
#endif
        /// <summary>A SetupIntent guides you through the process of setting up and saving a customer&apos;s payment credentials for future payments.For example, you can use a SetupIntent to set up and save your customer&apos;s card without immediately collecting a payment.Later, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.Create a SetupIntent when you&apos;re ready to collect your customer&apos;s payment credentials.Don&apos;t maintain long-lived, unconfirmed SetupIntents because they might not be valid.The SetupIntent transitions through multiple [statuses](https://docs.stripe.com/payments/intents#intent-statuses) as it guidesyou through the setup process.Successful SetupIntents result in payment credentials that are optimized for future payments.For example, cardholders in [certain regions](https://stripe.com/guides/strong-customer-authentication) might need to be run through[Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication) during payment method collectionto streamline later [off-session payments](https://docs.stripe.com/payments/setup-intents).If you use the SetupIntent with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer),it automatically attaches the resulting payment method to that Customer after successful setup.We recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) onPaymentIntents to save payment methods to prevent saving invalid or unoptimized payment methods.By using SetupIntents, you can reduce friction for your customers, even as regulations change over time.Related guide: [Setup Intents API](https://docs.stripe.com/payments/setup-intents)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Setup_intent? SetupIntent { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Setup_intent SetupIntent { get; set; }
#endif
        /// <summary>The [source object](https://stripe.com/docs/api/sources/object) for errors returned on a request involving a source.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Api_errors.Api_errors_source? Source { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Api_errors.Api_errors_source Source { get; set; }
#endif
        /// <summary>The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error`</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Api_errors_type? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Api_errors"/> and sets the default values.
        /// </summary>
        public Api_errors()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Api_errors"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Api_errors CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Api_errors();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "advice_code", n => { AdviceCode = n.GetStringValue(); } },
                { "charge", n => { Charge = n.GetStringValue(); } },
                { "code", n => { Code = n.GetStringValue(); } },
                { "decline_code", n => { DeclineCode = n.GetStringValue(); } },
                { "doc_url", n => { DocUrl = n.GetStringValue(); } },
                { "message", n => { Message = n.GetStringValue(); } },
                { "network_advice_code", n => { NetworkAdviceCode = n.GetStringValue(); } },
                { "network_decline_code", n => { NetworkDeclineCode = n.GetStringValue(); } },
                { "param", n => { Param = n.GetStringValue(); } },
                { "payment_intent", n => { PaymentIntent = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent.CreateFromDiscriminatorValue); } },
                { "payment_method", n => { PaymentMethod = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_method.CreateFromDiscriminatorValue); } },
                { "payment_method_type", n => { PaymentMethodType = n.GetStringValue(); } },
                { "request_log_url", n => { RequestLogUrl = n.GetStringValue(); } },
                { "setup_intent", n => { SetupIntent = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Setup_intent>(global::Soenneker.Stripe.OpenApiClient.Models.Setup_intent.CreateFromDiscriminatorValue); } },
                { "source", n => { Source = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Api_errors.Api_errors_source>(global::Soenneker.Stripe.OpenApiClient.Models.Api_errors.Api_errors_source.CreateFromDiscriminatorValue); } },
                { "type", n => { Type = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Api_errors_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("advice_code", AdviceCode);
            writer.WriteStringValue("charge", Charge);
            writer.WriteStringValue("code", Code);
            writer.WriteStringValue("decline_code", DeclineCode);
            writer.WriteStringValue("doc_url", DocUrl);
            writer.WriteStringValue("message", Message);
            writer.WriteStringValue("network_advice_code", NetworkAdviceCode);
            writer.WriteStringValue("network_decline_code", NetworkDeclineCode);
            writer.WriteStringValue("param", Param);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent>("payment_intent", PaymentIntent);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method>("payment_method", PaymentMethod);
            writer.WriteStringValue("payment_method_type", PaymentMethodType);
            writer.WriteStringValue("request_log_url", RequestLogUrl);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Setup_intent>("setup_intent", SetupIntent);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Api_errors.Api_errors_source>("source", Source);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Api_errors_type>("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Bank_account"/>, <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Card"/>, <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Source"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Api_errors_source : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Bank_account"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Bank_account? BankAccount { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Bank_account BankAccount { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Card"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Card? Card { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Card Card { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Source"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Source? Source { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Source Source { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Api_errors.Api_errors_source"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Api_errors.Api_errors_source CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Api_errors.Api_errors_source();
                result.BankAccount = new global::Soenneker.Stripe.OpenApiClient.Models.Bank_account();
                result.Card = new global::Soenneker.Stripe.OpenApiClient.Models.Card();
                result.Source = new global::Soenneker.Stripe.OpenApiClient.Models.Source();
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(BankAccount != null || Card != null || Source != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(BankAccount, Card, Source);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Bank_account>(null, BankAccount, Card, Source);
            }
        }
    }
}
#pragma warning restore CS0618
