// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    /// <summary>
    /// Issue a credit note to adjust an invoice&apos;s amount after the invoice is finalized.Related guide: [Credit notes](https://stripe.com/docs/billing/invoices/credit-notes)
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Credit_note : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The integer amount in cents (or local equivalent) representing the total amount of the credit note, including tax.</summary>
        public int? Amount { get; set; }
        /// <summary>This is the sum of all the shipping amounts.</summary>
        public int? AmountShipping { get; set; }
        /// <summary>Time at which the object was created. Measured in seconds since the Unix epoch.</summary>
        public int? Created { get; set; }
        /// <summary>Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>ID of the customer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Credit_note.Credit_note_customer? Customer { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Credit_note.Credit_note_customer Customer { get; set; }
#endif
        /// <summary>Customer balance transaction related to this credit note.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Credit_note.Credit_note_customer_balance_transaction? CustomerBalanceTransaction { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Credit_note.Credit_note_customer_balance_transaction CustomerBalanceTransaction { get; set; }
#endif
        /// <summary>The integer amount in cents (or local equivalent) representing the total amount of discount that was credited.</summary>
        public int? DiscountAmount { get; set; }
        /// <summary>The aggregate amounts calculated per discount for all line items.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Discounts_resource_discount_amount>? DiscountAmounts { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Discounts_resource_discount_amount> DiscountAmounts { get; set; }
#endif
        /// <summary>The date when this credit note is in effect. Same as `created` unless overwritten. When defined, this value replaces the system-generated &apos;Date of issue&apos; printed on the credit note PDF.</summary>
        public int? EffectiveAt { get; set; }
        /// <summary>Unique identifier for the object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>ID of the invoice.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Credit_note.Credit_note_invoice? Invoice { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Credit_note.Credit_note_invoice Invoice { get; set; }
#endif
        /// <summary>Line items that make up the credit note</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Credit_note_lines? Lines { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Credit_note_lines Lines { get; set; }
#endif
        /// <summary>Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.</summary>
        public bool? Livemode { get; set; }
        /// <summary>Customer-facing text that appears on the credit note PDF.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Memo { get; set; }
#nullable restore
#else
        public string Memo { get; set; }
#endif
        /// <summary>Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Credit_note_metadata? Metadata { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Credit_note_metadata Metadata { get; set; }
#endif
        /// <summary>A unique number that identifies this particular credit note and appears on the PDF of the credit note and its associated invoice.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Number { get; set; }
#nullable restore
#else
        public string Number { get; set; }
#endif
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Credit_note_object? Object { get; set; }
        /// <summary>Amount that was credited outside of Stripe.</summary>
        public int? OutOfBandAmount { get; set; }
        /// <summary>The link to download the PDF of the credit note.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Pdf { get; set; }
#nullable restore
#else
        public string Pdf { get; set; }
#endif
        /// <summary>The amount of the credit note that was refunded to the customer, credited to the customer&apos;s balance, credited outside of Stripe, or any combination thereof.</summary>
        public int? PostPaymentAmount { get; set; }
        /// <summary>The amount of the credit note by which the invoice&apos;s `amount_remaining` and `amount_due` were reduced.</summary>
        public int? PrePaymentAmount { get; set; }
        /// <summary>The pretax credit amounts (ex: discount, credit grants, etc) for all line items.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Credit_notes_pretax_credit_amount>? PretaxCreditAmounts { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Credit_notes_pretax_credit_amount> PretaxCreditAmounts { get; set; }
#endif
        /// <summary>Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Credit_note_reason? Reason { get; set; }
        /// <summary>Refunds related to this credit note.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Credit_note_refund>? Refunds { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Credit_note_refund> Refunds { get; set; }
#endif
        /// <summary>The details of the cost of shipping, including the ShippingRate applied to the invoice.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Invoices_resource_shipping_cost? ShippingCost { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Invoices_resource_shipping_cost ShippingCost { get; set; }
#endif
        /// <summary>Status of this credit note, one of `issued` or `void`. Learn more about [voiding credit notes](https://stripe.com/docs/billing/invoices/credit-notes#voiding).</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Credit_note_status? Status { get; set; }
        /// <summary>The integer amount in cents (or local equivalent) representing the amount of the credit note, excluding exclusive tax and invoice level discounts.</summary>
        public int? Subtotal { get; set; }
        /// <summary>The integer amount in cents (or local equivalent) representing the amount of the credit note, excluding all tax and invoice level discounts.</summary>
        public int? SubtotalExcludingTax { get; set; }
        /// <summary>The integer amount in cents (or local equivalent) representing the total amount of the credit note, including tax and all discount.</summary>
        public int? Total { get; set; }
        /// <summary>The integer amount in cents (or local equivalent) representing the total amount of the credit note, excluding tax, but including discounts.</summary>
        public int? TotalExcludingTax { get; set; }
        /// <summary>The aggregate tax information for all line items.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Billing_bill_resource_invoicing_taxes_tax>? TotalTaxes { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Billing_bill_resource_invoicing_taxes_tax> TotalTaxes { get; set; }
#endif
        /// <summary>Type of this credit note, one of `pre_payment` or `post_payment`. A `pre_payment` credit note means it was issued when the invoice was open. A `post_payment` credit note means it was issued when the invoice was paid.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Credit_note_type? Type { get; set; }
        /// <summary>The time that the credit note was voided.</summary>
        public int? VoidedAt { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Credit_note"/> and sets the default values.
        /// </summary>
        public Credit_note()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Credit_note"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Credit_note CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Credit_note();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount", n => { Amount = n.GetIntValue(); } },
                { "amount_shipping", n => { AmountShipping = n.GetIntValue(); } },
                { "created", n => { Created = n.GetIntValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "customer", n => { Customer = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Credit_note.Credit_note_customer>(global::Soenneker.Stripe.OpenApiClient.Models.Credit_note.Credit_note_customer.CreateFromDiscriminatorValue); } },
                { "customer_balance_transaction", n => { CustomerBalanceTransaction = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Credit_note.Credit_note_customer_balance_transaction>(global::Soenneker.Stripe.OpenApiClient.Models.Credit_note.Credit_note_customer_balance_transaction.CreateFromDiscriminatorValue); } },
                { "discount_amount", n => { DiscountAmount = n.GetIntValue(); } },
                { "discount_amounts", n => { DiscountAmounts = n.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Discounts_resource_discount_amount>(global::Soenneker.Stripe.OpenApiClient.Models.Discounts_resource_discount_amount.CreateFromDiscriminatorValue)?.AsList(); } },
                { "effective_at", n => { EffectiveAt = n.GetIntValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "invoice", n => { Invoice = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Credit_note.Credit_note_invoice>(global::Soenneker.Stripe.OpenApiClient.Models.Credit_note.Credit_note_invoice.CreateFromDiscriminatorValue); } },
                { "lines", n => { Lines = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Credit_note_lines>(global::Soenneker.Stripe.OpenApiClient.Models.Credit_note_lines.CreateFromDiscriminatorValue); } },
                { "livemode", n => { Livemode = n.GetBoolValue(); } },
                { "memo", n => { Memo = n.GetStringValue(); } },
                { "metadata", n => { Metadata = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Credit_note_metadata>(global::Soenneker.Stripe.OpenApiClient.Models.Credit_note_metadata.CreateFromDiscriminatorValue); } },
                { "number", n => { Number = n.GetStringValue(); } },
                { "object", n => { Object = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Credit_note_object>(); } },
                { "out_of_band_amount", n => { OutOfBandAmount = n.GetIntValue(); } },
                { "pdf", n => { Pdf = n.GetStringValue(); } },
                { "post_payment_amount", n => { PostPaymentAmount = n.GetIntValue(); } },
                { "pre_payment_amount", n => { PrePaymentAmount = n.GetIntValue(); } },
                { "pretax_credit_amounts", n => { PretaxCreditAmounts = n.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Credit_notes_pretax_credit_amount>(global::Soenneker.Stripe.OpenApiClient.Models.Credit_notes_pretax_credit_amount.CreateFromDiscriminatorValue)?.AsList(); } },
                { "reason", n => { Reason = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Credit_note_reason>(); } },
                { "refunds", n => { Refunds = n.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Credit_note_refund>(global::Soenneker.Stripe.OpenApiClient.Models.Credit_note_refund.CreateFromDiscriminatorValue)?.AsList(); } },
                { "shipping_cost", n => { ShippingCost = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Invoices_resource_shipping_cost>(global::Soenneker.Stripe.OpenApiClient.Models.Invoices_resource_shipping_cost.CreateFromDiscriminatorValue); } },
                { "status", n => { Status = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Credit_note_status>(); } },
                { "subtotal", n => { Subtotal = n.GetIntValue(); } },
                { "subtotal_excluding_tax", n => { SubtotalExcludingTax = n.GetIntValue(); } },
                { "total", n => { Total = n.GetIntValue(); } },
                { "total_excluding_tax", n => { TotalExcludingTax = n.GetIntValue(); } },
                { "total_taxes", n => { TotalTaxes = n.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Billing_bill_resource_invoicing_taxes_tax>(global::Soenneker.Stripe.OpenApiClient.Models.Billing_bill_resource_invoicing_taxes_tax.CreateFromDiscriminatorValue)?.AsList(); } },
                { "type", n => { Type = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Credit_note_type>(); } },
                { "voided_at", n => { VoidedAt = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("amount", Amount);
            writer.WriteIntValue("amount_shipping", AmountShipping);
            writer.WriteIntValue("created", Created);
            writer.WriteStringValue("currency", Currency);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Credit_note.Credit_note_customer>("customer", Customer);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Credit_note.Credit_note_customer_balance_transaction>("customer_balance_transaction", CustomerBalanceTransaction);
            writer.WriteIntValue("discount_amount", DiscountAmount);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Discounts_resource_discount_amount>("discount_amounts", DiscountAmounts);
            writer.WriteIntValue("effective_at", EffectiveAt);
            writer.WriteStringValue("id", Id);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Credit_note.Credit_note_invoice>("invoice", Invoice);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Credit_note_lines>("lines", Lines);
            writer.WriteBoolValue("livemode", Livemode);
            writer.WriteStringValue("memo", Memo);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Credit_note_metadata>("metadata", Metadata);
            writer.WriteStringValue("number", Number);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Credit_note_object>("object", Object);
            writer.WriteIntValue("out_of_band_amount", OutOfBandAmount);
            writer.WriteStringValue("pdf", Pdf);
            writer.WriteIntValue("post_payment_amount", PostPaymentAmount);
            writer.WriteIntValue("pre_payment_amount", PrePaymentAmount);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Credit_notes_pretax_credit_amount>("pretax_credit_amounts", PretaxCreditAmounts);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Credit_note_reason>("reason", Reason);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Credit_note_refund>("refunds", Refunds);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Invoices_resource_shipping_cost>("shipping_cost", ShippingCost);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Credit_note_status>("status", Status);
            writer.WriteIntValue("subtotal", Subtotal);
            writer.WriteIntValue("subtotal_excluding_tax", SubtotalExcludingTax);
            writer.WriteIntValue("total", Total);
            writer.WriteIntValue("total_excluding_tax", TotalExcludingTax);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Billing_bill_resource_invoicing_taxes_tax>("total_taxes", TotalTaxes);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Credit_note_type>("type", Type);
            writer.WriteIntValue("voided_at", VoidedAt);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Customer"/>, <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Deleted_customer"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Credit_note_customer : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Customer"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Customer? Customer { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Customer Customer { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Deleted_customer"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Deleted_customer? DeletedCustomer { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Deleted_customer DeletedCustomer { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Credit_note.Credit_note_customer"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Credit_note.Credit_note_customer CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Credit_note.Credit_note_customer();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.Customer = new global::Soenneker.Stripe.OpenApiClient.Models.Customer();
                    result.DeletedCustomer = new global::Soenneker.Stripe.OpenApiClient.Models.Deleted_customer();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(Customer != null || DeletedCustomer != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(Customer, DeletedCustomer);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Customer>(null, Customer, DeletedCustomer);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Customer_balance_transaction"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Credit_note_customer_balance_transaction : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Customer_balance_transaction"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Customer_balance_transaction? CustomerBalanceTransaction { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Customer_balance_transaction CustomerBalanceTransaction { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Credit_note.Credit_note_customer_balance_transaction"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Credit_note.Credit_note_customer_balance_transaction CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Credit_note.Credit_note_customer_balance_transaction();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.CustomerBalanceTransaction = new global::Soenneker.Stripe.OpenApiClient.Models.Customer_balance_transaction();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(CustomerBalanceTransaction != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(CustomerBalanceTransaction);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Customer_balance_transaction>(null, CustomerBalanceTransaction);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Invoice"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Credit_note_invoice : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Invoice"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Invoice? Invoice { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Invoice Invoice { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Credit_note.Credit_note_invoice"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Credit_note.Credit_note_invoice CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Credit_note.Credit_note_invoice();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.Invoice = new global::Soenneker.Stripe.OpenApiClient.Models.Invoice();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(Invoice != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(Invoice);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Invoice>(null, Invoice);
                }
            }
        }
    }
}
#pragma warning restore CS0618
