// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Payment_intent_type_specific_payment_method_options_client : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Controls when the funds will be captured from the customer&apos;s account.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent_type_specific_payment_method_options_client_capture_method? CaptureMethod { get; set; }
        /// <summary>The installments property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_installment_options? Installments { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_installment_options Installments { get; set; }
#endif
        /// <summary>Request ability to [increment](https://stripe.com/docs/terminal/features/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https://stripe.com/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https://stripe.com/docs/api/payment_intents/confirm) response to verify support.</summary>
        public bool? RequestIncrementalAuthorizationSupport { get; set; }
        /// <summary>When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).</summary>
        public bool? RequireCvcRecollection { get; set; }
        /// <summary>The routing property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_options_card_present_routing? Routing { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_options_card_present_routing Routing { get; set; }
#endif
        /// <summary>Indicates that you intend to make future payments with this PaymentIntent&apos;s payment method.If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don&apos;t provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.If the payment method is `card_present` and isn&apos;t a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent_type_specific_payment_method_options_client_setup_future_usage? SetupFutureUsage { get; set; }
        /// <summary>Bank account verification method.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent_type_specific_payment_method_options_client_verification_method? VerificationMethod { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent_type_specific_payment_method_options_client"/> and sets the default values.
        /// </summary>
        public Payment_intent_type_specific_payment_method_options_client()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent_type_specific_payment_method_options_client"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent_type_specific_payment_method_options_client CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent_type_specific_payment_method_options_client();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "capture_method", n => { CaptureMethod = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent_type_specific_payment_method_options_client_capture_method>(); } },
                { "installments", n => { Installments = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_installment_options>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_installment_options.CreateFromDiscriminatorValue); } },
                { "request_incremental_authorization_support", n => { RequestIncrementalAuthorizationSupport = n.GetBoolValue(); } },
                { "require_cvc_recollection", n => { RequireCvcRecollection = n.GetBoolValue(); } },
                { "routing", n => { Routing = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_options_card_present_routing>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_options_card_present_routing.CreateFromDiscriminatorValue); } },
                { "setup_future_usage", n => { SetupFutureUsage = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent_type_specific_payment_method_options_client_setup_future_usage>(); } },
                { "verification_method", n => { VerificationMethod = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent_type_specific_payment_method_options_client_verification_method>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent_type_specific_payment_method_options_client_capture_method>("capture_method", CaptureMethod);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_installment_options>("installments", Installments);
            writer.WriteBoolValue("request_incremental_authorization_support", RequestIncrementalAuthorizationSupport);
            writer.WriteBoolValue("require_cvc_recollection", RequireCvcRecollection);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_options_card_present_routing>("routing", Routing);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent_type_specific_payment_method_options_client_setup_future_usage>("setup_future_usage", SetupFutureUsage);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent_type_specific_payment_method_options_client_verification_method>("verification_method", VerificationMethod);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
