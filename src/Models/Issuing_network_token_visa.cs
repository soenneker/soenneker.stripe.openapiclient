// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Issuing_network_token_visa : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A unique reference ID from Visa to represent the card account number.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CardReferenceId { get; set; }
#nullable restore
#else
        public string CardReferenceId { get; set; }
#endif
        /// <summary>The network-unique identifier for the token.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TokenReferenceId { get; set; }
#nullable restore
#else
        public string TokenReferenceId { get; set; }
#endif
        /// <summary>The ID of the entity requesting tokenization, specific to Visa.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TokenRequestorId { get; set; }
#nullable restore
#else
        public string TokenRequestorId { get; set; }
#endif
        /// <summary>Degree of risk associated with the token between `01` and `99`, with higher number indicating higher risk. A `00` value indicates the token was not scored by Visa.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TokenRiskScore { get; set; }
#nullable restore
#else
        public string TokenRiskScore { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing_network_token_visa"/> and sets the default values.
        /// </summary>
        public Issuing_network_token_visa()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing_network_token_visa"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Issuing_network_token_visa CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Issuing_network_token_visa();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "card_reference_id", n => { CardReferenceId = n.GetStringValue(); } },
                { "token_reference_id", n => { TokenReferenceId = n.GetStringValue(); } },
                { "token_requestor_id", n => { TokenRequestorId = n.GetStringValue(); } },
                { "token_risk_score", n => { TokenRiskScore = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("card_reference_id", CardReferenceId);
            writer.WriteStringValue("token_reference_id", TokenReferenceId);
            writer.WriteStringValue("token_requestor_id", TokenRequestorId);
            writer.WriteStringValue("token_risk_score", TokenRiskScore);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
