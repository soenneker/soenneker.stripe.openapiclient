// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Issuing_dispute_duplicate_evidence : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence.Issuing_dispute_duplicate_evidence_additional_documentation? AdditionalDocumentation { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence.Issuing_dispute_duplicate_evidence_additional_documentation AdditionalDocumentation { get; set; }
#endif
        /// <summary>(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Copy of the card statement showing that the product had already been paid for.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence.Issuing_dispute_duplicate_evidence_card_statement? CardStatement { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence.Issuing_dispute_duplicate_evidence_card_statement CardStatement { get; set; }
#endif
        /// <summary>(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Copy of the receipt showing that the product had been paid for in cash.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence.Issuing_dispute_duplicate_evidence_cash_receipt? CashReceipt { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence.Issuing_dispute_duplicate_evidence_cash_receipt CashReceipt { get; set; }
#endif
        /// <summary>(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Image of the front and back of the check that was used to pay for the product.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence.Issuing_dispute_duplicate_evidence_check_image? CheckImage { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence.Issuing_dispute_duplicate_evidence_check_image CheckImage { get; set; }
#endif
        /// <summary>Explanation of why the cardholder is disputing this transaction.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Explanation { get; set; }
#nullable restore
#else
        public string Explanation { get; set; }
#endif
        /// <summary>Transaction (e.g., ipi_...) that the disputed transaction is a duplicate of. Of the two or more transactions that are copies of each other, this is original undisputed one.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalTransaction { get; set; }
#nullable restore
#else
        public string OriginalTransaction { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence"/> and sets the default values.
        /// </summary>
        public Issuing_dispute_duplicate_evidence()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "additional_documentation", n => { AdditionalDocumentation = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence.Issuing_dispute_duplicate_evidence_additional_documentation>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence.Issuing_dispute_duplicate_evidence_additional_documentation.CreateFromDiscriminatorValue); } },
                { "card_statement", n => { CardStatement = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence.Issuing_dispute_duplicate_evidence_card_statement>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence.Issuing_dispute_duplicate_evidence_card_statement.CreateFromDiscriminatorValue); } },
                { "cash_receipt", n => { CashReceipt = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence.Issuing_dispute_duplicate_evidence_cash_receipt>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence.Issuing_dispute_duplicate_evidence_cash_receipt.CreateFromDiscriminatorValue); } },
                { "check_image", n => { CheckImage = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence.Issuing_dispute_duplicate_evidence_check_image>(global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence.Issuing_dispute_duplicate_evidence_check_image.CreateFromDiscriminatorValue); } },
                { "explanation", n => { Explanation = n.GetStringValue(); } },
                { "original_transaction", n => { OriginalTransaction = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence.Issuing_dispute_duplicate_evidence_additional_documentation>("additional_documentation", AdditionalDocumentation);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence.Issuing_dispute_duplicate_evidence_card_statement>("card_statement", CardStatement);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence.Issuing_dispute_duplicate_evidence_cash_receipt>("cash_receipt", CashReceipt);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence.Issuing_dispute_duplicate_evidence_check_image>("check_image", CheckImage);
            writer.WriteStringValue("explanation", Explanation);
            writer.WriteStringValue("original_transaction", OriginalTransaction);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.FileObject"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Issuing_dispute_duplicate_evidence_additional_documentation : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.FileObject"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.FileObject? File { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.FileObject File { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence.Issuing_dispute_duplicate_evidence_additional_documentation"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence.Issuing_dispute_duplicate_evidence_additional_documentation CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence.Issuing_dispute_duplicate_evidence_additional_documentation();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.File = new global::Soenneker.Stripe.OpenApiClient.Models.FileObject();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(File != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(File);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.FileObject>(null, File);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.FileObject"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Issuing_dispute_duplicate_evidence_card_statement : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.FileObject"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.FileObject? File { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.FileObject File { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence.Issuing_dispute_duplicate_evidence_card_statement"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence.Issuing_dispute_duplicate_evidence_card_statement CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence.Issuing_dispute_duplicate_evidence_card_statement();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.File = new global::Soenneker.Stripe.OpenApiClient.Models.FileObject();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(File != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(File);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.FileObject>(null, File);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.FileObject"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Issuing_dispute_duplicate_evidence_cash_receipt : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.FileObject"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.FileObject? File { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.FileObject File { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence.Issuing_dispute_duplicate_evidence_cash_receipt"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence.Issuing_dispute_duplicate_evidence_cash_receipt CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence.Issuing_dispute_duplicate_evidence_cash_receipt();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.File = new global::Soenneker.Stripe.OpenApiClient.Models.FileObject();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(File != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(File);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.FileObject>(null, File);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.FileObject"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Issuing_dispute_duplicate_evidence_check_image : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.FileObject"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.FileObject? File { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.FileObject File { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence.Issuing_dispute_duplicate_evidence_check_image"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence.Issuing_dispute_duplicate_evidence_check_image CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Issuing_dispute_duplicate_evidence.Issuing_dispute_duplicate_evidence_check_image();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.File = new global::Soenneker.Stripe.OpenApiClient.Models.FileObject();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(File != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(File);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.FileObject>(null, File);
                }
            }
        }
    }
}
#pragma warning restore CS0618
