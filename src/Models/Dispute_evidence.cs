// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Dispute_evidence : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Any server or activity logs showing proof that the customer accessed or downloaded the purchased digital product. This information should include IP addresses, corresponding timestamps, and any detailed recorded activity.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccessActivityLog { get; set; }
#nullable restore
#else
        public string AccessActivityLog { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The billing address provided by the customer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BillingAddress { get; set; }
#nullable restore
#else
        public string BillingAddress { get; set; }
#endif
        /// <summary>(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your subscription cancellation policy, as shown to the customer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_cancellation_policy? CancellationPolicy { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_cancellation_policy CancellationPolicy { get; set; }
#endif
        /// <summary>An explanation of how and when the customer was shown your refund policy prior to purchase.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CancellationPolicyDisclosure { get; set; }
#nullable restore
#else
        public string CancellationPolicyDisclosure { get; set; }
#endif
        /// <summary>A justification for why the customer&apos;s subscription was not canceled.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CancellationRebuttal { get; set; }
#nullable restore
#else
        public string CancellationRebuttal { get; set; }
#endif
        /// <summary>(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any communication with the customer that you feel is relevant to your case. Examples include emails proving that the customer received the product or service, or demonstrating their use of or satisfaction with the product or service.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_customer_communication? CustomerCommunication { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_customer_communication CustomerCommunication { get; set; }
#endif
        /// <summary>The email address of the customer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomerEmailAddress { get; set; }
#nullable restore
#else
        public string CustomerEmailAddress { get; set; }
#endif
        /// <summary>The name of the customer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomerName { get; set; }
#nullable restore
#else
        public string CustomerName { get; set; }
#endif
        /// <summary>The IP address that the customer used when making the purchase.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomerPurchaseIp { get; set; }
#nullable restore
#else
        public string CustomerPurchaseIp { get; set; }
#endif
        /// <summary>(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A relevant document or contract showing the customer&apos;s signature.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_customer_signature? CustomerSignature { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_customer_signature CustomerSignature { get; set; }
#endif
        /// <summary>(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation for the prior charge that can uniquely identify the charge, such as a receipt, shipping label, work order, etc. This document should be paired with a similar document from the disputed payment that proves the two payments are separate.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_duplicate_charge_documentation? DuplicateChargeDocumentation { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_duplicate_charge_documentation DuplicateChargeDocumentation { get; set; }
#endif
        /// <summary>An explanation of the difference between the disputed charge versus the prior charge that appears to be a duplicate.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DuplicateChargeExplanation { get; set; }
#nullable restore
#else
        public string DuplicateChargeExplanation { get; set; }
#endif
        /// <summary>The Stripe ID for the prior charge which appears to be a duplicate of the disputed charge.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DuplicateChargeId { get; set; }
#nullable restore
#else
        public string DuplicateChargeId { get; set; }
#endif
        /// <summary>The enhanced_evidence property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Dispute_enhanced_evidence? EnhancedEvidence { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Dispute_enhanced_evidence EnhancedEvidence { get; set; }
#endif
        /// <summary>A description of the product or service that was sold.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProductDescription { get; set; }
#nullable restore
#else
        public string ProductDescription { get; set; }
#endif
        /// <summary>(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any receipt or message sent to the customer notifying them of the charge.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_receipt? Receipt { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_receipt Receipt { get; set; }
#endif
        /// <summary>(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your refund policy, as shown to the customer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_refund_policy? RefundPolicy { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_refund_policy RefundPolicy { get; set; }
#endif
        /// <summary>Documentation demonstrating that the customer was shown your refund policy prior to purchase.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RefundPolicyDisclosure { get; set; }
#nullable restore
#else
        public string RefundPolicyDisclosure { get; set; }
#endif
        /// <summary>A justification for why the customer is not entitled to a refund.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RefundRefusalExplanation { get; set; }
#nullable restore
#else
        public string RefundRefusalExplanation { get; set; }
#endif
        /// <summary>The date on which the customer received or began receiving the purchased service, in a clear human-readable format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ServiceDate { get; set; }
#nullable restore
#else
        public string ServiceDate { get; set; }
#endif
        /// <summary>(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a service was provided to the customer. This could include a copy of a signed contract, work order, or other form of written agreement.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_service_documentation? ServiceDocumentation { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_service_documentation ServiceDocumentation { get; set; }
#endif
        /// <summary>The address to which a physical product was shipped. You should try to include as complete address information as possible.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ShippingAddress { get; set; }
#nullable restore
#else
        public string ShippingAddress { get; set; }
#endif
        /// <summary>The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. If multiple carriers were used for this purchase, please separate them with commas.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ShippingCarrier { get; set; }
#nullable restore
#else
        public string ShippingCarrier { get; set; }
#endif
        /// <summary>The date on which a physical product began its route to the shipping address, in a clear human-readable format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ShippingDate { get; set; }
#nullable restore
#else
        public string ShippingDate { get; set; }
#endif
        /// <summary>(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a product was shipped to the customer at the same address the customer provided to you. This could include a copy of the shipment receipt, shipping label, etc. It should show the customer&apos;s full shipping address, if possible.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_shipping_documentation? ShippingDocumentation { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_shipping_documentation ShippingDocumentation { get; set; }
#endif
        /// <summary>The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ShippingTrackingNumber { get; set; }
#nullable restore
#else
        public string ShippingTrackingNumber { get; set; }
#endif
        /// <summary>(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any additional evidence or statements.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_uncategorized_file? UncategorizedFile { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_uncategorized_file UncategorizedFile { get; set; }
#endif
        /// <summary>Any additional evidence or statements.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UncategorizedText { get; set; }
#nullable restore
#else
        public string UncategorizedText { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence"/> and sets the default values.
        /// </summary>
        public Dispute_evidence()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "access_activity_log", n => { AccessActivityLog = n.GetStringValue(); } },
                { "billing_address", n => { BillingAddress = n.GetStringValue(); } },
                { "cancellation_policy", n => { CancellationPolicy = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_cancellation_policy>(global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_cancellation_policy.CreateFromDiscriminatorValue); } },
                { "cancellation_policy_disclosure", n => { CancellationPolicyDisclosure = n.GetStringValue(); } },
                { "cancellation_rebuttal", n => { CancellationRebuttal = n.GetStringValue(); } },
                { "customer_communication", n => { CustomerCommunication = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_customer_communication>(global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_customer_communication.CreateFromDiscriminatorValue); } },
                { "customer_email_address", n => { CustomerEmailAddress = n.GetStringValue(); } },
                { "customer_name", n => { CustomerName = n.GetStringValue(); } },
                { "customer_purchase_ip", n => { CustomerPurchaseIp = n.GetStringValue(); } },
                { "customer_signature", n => { CustomerSignature = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_customer_signature>(global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_customer_signature.CreateFromDiscriminatorValue); } },
                { "duplicate_charge_documentation", n => { DuplicateChargeDocumentation = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_duplicate_charge_documentation>(global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_duplicate_charge_documentation.CreateFromDiscriminatorValue); } },
                { "duplicate_charge_explanation", n => { DuplicateChargeExplanation = n.GetStringValue(); } },
                { "duplicate_charge_id", n => { DuplicateChargeId = n.GetStringValue(); } },
                { "enhanced_evidence", n => { EnhancedEvidence = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_enhanced_evidence>(global::Soenneker.Stripe.OpenApiClient.Models.Dispute_enhanced_evidence.CreateFromDiscriminatorValue); } },
                { "product_description", n => { ProductDescription = n.GetStringValue(); } },
                { "receipt", n => { Receipt = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_receipt>(global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_receipt.CreateFromDiscriminatorValue); } },
                { "refund_policy", n => { RefundPolicy = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_refund_policy>(global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_refund_policy.CreateFromDiscriminatorValue); } },
                { "refund_policy_disclosure", n => { RefundPolicyDisclosure = n.GetStringValue(); } },
                { "refund_refusal_explanation", n => { RefundRefusalExplanation = n.GetStringValue(); } },
                { "service_date", n => { ServiceDate = n.GetStringValue(); } },
                { "service_documentation", n => { ServiceDocumentation = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_service_documentation>(global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_service_documentation.CreateFromDiscriminatorValue); } },
                { "shipping_address", n => { ShippingAddress = n.GetStringValue(); } },
                { "shipping_carrier", n => { ShippingCarrier = n.GetStringValue(); } },
                { "shipping_date", n => { ShippingDate = n.GetStringValue(); } },
                { "shipping_documentation", n => { ShippingDocumentation = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_shipping_documentation>(global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_shipping_documentation.CreateFromDiscriminatorValue); } },
                { "shipping_tracking_number", n => { ShippingTrackingNumber = n.GetStringValue(); } },
                { "uncategorized_file", n => { UncategorizedFile = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_uncategorized_file>(global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_uncategorized_file.CreateFromDiscriminatorValue); } },
                { "uncategorized_text", n => { UncategorizedText = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("access_activity_log", AccessActivityLog);
            writer.WriteStringValue("billing_address", BillingAddress);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_cancellation_policy>("cancellation_policy", CancellationPolicy);
            writer.WriteStringValue("cancellation_policy_disclosure", CancellationPolicyDisclosure);
            writer.WriteStringValue("cancellation_rebuttal", CancellationRebuttal);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_customer_communication>("customer_communication", CustomerCommunication);
            writer.WriteStringValue("customer_email_address", CustomerEmailAddress);
            writer.WriteStringValue("customer_name", CustomerName);
            writer.WriteStringValue("customer_purchase_ip", CustomerPurchaseIp);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_customer_signature>("customer_signature", CustomerSignature);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_duplicate_charge_documentation>("duplicate_charge_documentation", DuplicateChargeDocumentation);
            writer.WriteStringValue("duplicate_charge_explanation", DuplicateChargeExplanation);
            writer.WriteStringValue("duplicate_charge_id", DuplicateChargeId);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_enhanced_evidence>("enhanced_evidence", EnhancedEvidence);
            writer.WriteStringValue("product_description", ProductDescription);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_receipt>("receipt", Receipt);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_refund_policy>("refund_policy", RefundPolicy);
            writer.WriteStringValue("refund_policy_disclosure", RefundPolicyDisclosure);
            writer.WriteStringValue("refund_refusal_explanation", RefundRefusalExplanation);
            writer.WriteStringValue("service_date", ServiceDate);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_service_documentation>("service_documentation", ServiceDocumentation);
            writer.WriteStringValue("shipping_address", ShippingAddress);
            writer.WriteStringValue("shipping_carrier", ShippingCarrier);
            writer.WriteStringValue("shipping_date", ShippingDate);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_shipping_documentation>("shipping_documentation", ShippingDocumentation);
            writer.WriteStringValue("shipping_tracking_number", ShippingTrackingNumber);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_uncategorized_file>("uncategorized_file", UncategorizedFile);
            writer.WriteStringValue("uncategorized_text", UncategorizedText);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.FileObject"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Dispute_evidence_cancellation_policy : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.FileObject"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.FileObject? File { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.FileObject File { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_cancellation_policy"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_cancellation_policy CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_cancellation_policy();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.File = new global::Soenneker.Stripe.OpenApiClient.Models.FileObject();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(File != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(File);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.FileObject>(null, File);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.FileObject"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Dispute_evidence_customer_communication : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.FileObject"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.FileObject? File { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.FileObject File { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_customer_communication"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_customer_communication CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_customer_communication();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.File = new global::Soenneker.Stripe.OpenApiClient.Models.FileObject();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(File != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(File);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.FileObject>(null, File);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.FileObject"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Dispute_evidence_customer_signature : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.FileObject"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.FileObject? File { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.FileObject File { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_customer_signature"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_customer_signature CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_customer_signature();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.File = new global::Soenneker.Stripe.OpenApiClient.Models.FileObject();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(File != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(File);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.FileObject>(null, File);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.FileObject"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Dispute_evidence_duplicate_charge_documentation : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.FileObject"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.FileObject? File { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.FileObject File { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_duplicate_charge_documentation"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_duplicate_charge_documentation CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_duplicate_charge_documentation();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.File = new global::Soenneker.Stripe.OpenApiClient.Models.FileObject();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(File != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(File);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.FileObject>(null, File);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.FileObject"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Dispute_evidence_receipt : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.FileObject"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.FileObject? File { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.FileObject File { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_receipt"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_receipt CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_receipt();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.File = new global::Soenneker.Stripe.OpenApiClient.Models.FileObject();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(File != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(File);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.FileObject>(null, File);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.FileObject"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Dispute_evidence_refund_policy : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.FileObject"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.FileObject? File { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.FileObject File { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_refund_policy"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_refund_policy CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_refund_policy();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.File = new global::Soenneker.Stripe.OpenApiClient.Models.FileObject();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(File != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(File);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.FileObject>(null, File);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.FileObject"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Dispute_evidence_service_documentation : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.FileObject"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.FileObject? File { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.FileObject File { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_service_documentation"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_service_documentation CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_service_documentation();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.File = new global::Soenneker.Stripe.OpenApiClient.Models.FileObject();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(File != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(File);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.FileObject>(null, File);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.FileObject"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Dispute_evidence_shipping_documentation : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.FileObject"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.FileObject? File { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.FileObject File { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_shipping_documentation"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_shipping_documentation CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_shipping_documentation();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.File = new global::Soenneker.Stripe.OpenApiClient.Models.FileObject();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(File != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(File);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.FileObject>(null, File);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.FileObject"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Dispute_evidence_uncategorized_file : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.FileObject"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.FileObject? File { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.FileObject File { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_uncategorized_file"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_uncategorized_file CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Dispute_evidence.Dispute_evidence_uncategorized_file();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.File = new global::Soenneker.Stripe.OpenApiClient.Models.FileObject();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(File != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(File);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.FileObject>(null, File);
                }
            }
        }
    }
}
#pragma warning restore CS0618
