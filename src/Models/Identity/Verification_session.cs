// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models.Identity
{
    /// <summary>
    /// A VerificationSession guides you through the process of collecting and verifying the identitiesof your users. It contains details about the type of verification, such as what [verificationcheck](/docs/identity/verification-checks) to perform. Only create one VerificationSession foreach verification in your system.A VerificationSession transitions through [multiplestatuses](/docs/identity/how-sessions-work) throughout its lifetime as it progresses throughthe verification flow. The VerificationSession contains the user&apos;s verified data afterverification checks are complete.Related guide: [The Verification Sessions API](https://stripe.com/docs/identity/verification-sessions)
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Verification_session : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientReferenceId { get; set; }
#nullable restore
#else
        public string ClientReferenceId { get; set; }
#endif
        /// <summary>The short-lived client secret used by Stripe.js to [show a verification modal](https://stripe.com/docs/js/identity/modal) inside your app. This client secret expires after 24 hours and can only be used once. Don’t store it, log it, embed it in a URL, or expose it to anyone other than the user. Make sure that you have TLS enabled on any page that includes the client secret. Refer to our docs on [passing the client secret to the frontend](https://stripe.com/docs/identity/verification-sessions#client-secret) to learn more.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientSecret { get; set; }
#nullable restore
#else
        public string ClientSecret { get; set; }
#endif
        /// <summary>Time at which the object was created. Measured in seconds since the Unix epoch.</summary>
        public int? Created { get; set; }
        /// <summary>Unique identifier for the object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>If present, this property tells you the last error encountered when processing the verification.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Gelato_session_last_error? LastError { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Gelato_session_last_error LastError { get; set; }
#endif
        /// <summary>ID of the most recent VerificationReport. [Learn more about accessing detailed verification results.](https://stripe.com/docs/identity/verification-sessions#results)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_session.Verification_session_last_verification_report? LastVerificationReport { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_session.Verification_session_last_verification_report LastVerificationReport { get; set; }
#endif
        /// <summary>Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.</summary>
        public bool? Livemode { get; set; }
        /// <summary>Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_session_metadata? Metadata { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_session_metadata Metadata { get; set; }
#endif
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_session_object? Object { get; set; }
        /// <summary>A set of options for the session’s verification checks.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Gelato_verification_session_options? Options { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Gelato_verification_session_options Options { get; set; }
#endif
        /// <summary>Details provided about the user being verified. These details may be shown to the user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Gelato_provided_details? ProvidedDetails { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Gelato_provided_details ProvidedDetails { get; set; }
#endif
        /// <summary>Redaction status of this VerificationSession. If the VerificationSession is not redacted, this field will be null.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Verification_session_redaction? Redaction { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Verification_session_redaction Redaction { get; set; }
#endif
        /// <summary>Customer ID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RelatedCustomer { get; set; }
#nullable restore
#else
        public string RelatedCustomer { get; set; }
#endif
        /// <summary>The related_person property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Gelato_related_person? RelatedPerson { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Gelato_related_person RelatedPerson { get; set; }
#endif
        /// <summary>Status of this VerificationSession. [Learn more about the lifecycle of sessions](https://stripe.com/docs/identity/how-sessions-work).</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_session_status? Status { get; set; }
        /// <summary>The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_session_type? Type { get; set; }
        /// <summary>The short-lived URL that you use to redirect a user to Stripe to submit their identity information. This URL expires after 48 hours and can only be used once. Don’t store it, log it, send it in emails or expose it to anyone other than the user. Refer to our docs on [verifying identity documents](https://stripe.com/docs/identity/verify-identity-documents?platform=web&amp;type=redirect) to learn how to redirect users to Stripe.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>The configuration token of a verification flow from the dashboard.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VerificationFlow { get; set; }
#nullable restore
#else
        public string VerificationFlow { get; set; }
#endif
        /// <summary>The user’s verified data.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Gelato_verified_outputs? VerifiedOutputs { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Gelato_verified_outputs VerifiedOutputs { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_session"/> and sets the default values.
        /// </summary>
        public Verification_session()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_session"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_session CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_session();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "client_reference_id", n => { ClientReferenceId = n.GetStringValue(); } },
                { "client_secret", n => { ClientSecret = n.GetStringValue(); } },
                { "created", n => { Created = n.GetIntValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "last_error", n => { LastError = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Gelato_session_last_error>(global::Soenneker.Stripe.OpenApiClient.Models.Gelato_session_last_error.CreateFromDiscriminatorValue); } },
                { "last_verification_report", n => { LastVerificationReport = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_session.Verification_session_last_verification_report>(global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_session.Verification_session_last_verification_report.CreateFromDiscriminatorValue); } },
                { "livemode", n => { Livemode = n.GetBoolValue(); } },
                { "metadata", n => { Metadata = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_session_metadata>(global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_session_metadata.CreateFromDiscriminatorValue); } },
                { "object", n => { Object = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_session_object>(); } },
                { "options", n => { Options = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Gelato_verification_session_options>(global::Soenneker.Stripe.OpenApiClient.Models.Gelato_verification_session_options.CreateFromDiscriminatorValue); } },
                { "provided_details", n => { ProvidedDetails = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Gelato_provided_details>(global::Soenneker.Stripe.OpenApiClient.Models.Gelato_provided_details.CreateFromDiscriminatorValue); } },
                { "redaction", n => { Redaction = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Verification_session_redaction>(global::Soenneker.Stripe.OpenApiClient.Models.Verification_session_redaction.CreateFromDiscriminatorValue); } },
                { "related_customer", n => { RelatedCustomer = n.GetStringValue(); } },
                { "related_person", n => { RelatedPerson = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Gelato_related_person>(global::Soenneker.Stripe.OpenApiClient.Models.Gelato_related_person.CreateFromDiscriminatorValue); } },
                { "status", n => { Status = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_session_status>(); } },
                { "type", n => { Type = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_session_type>(); } },
                { "url", n => { Url = n.GetStringValue(); } },
                { "verification_flow", n => { VerificationFlow = n.GetStringValue(); } },
                { "verified_outputs", n => { VerifiedOutputs = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Gelato_verified_outputs>(global::Soenneker.Stripe.OpenApiClient.Models.Gelato_verified_outputs.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("client_reference_id", ClientReferenceId);
            writer.WriteStringValue("client_secret", ClientSecret);
            writer.WriteIntValue("created", Created);
            writer.WriteStringValue("id", Id);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Gelato_session_last_error>("last_error", LastError);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_session.Verification_session_last_verification_report>("last_verification_report", LastVerificationReport);
            writer.WriteBoolValue("livemode", Livemode);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_session_metadata>("metadata", Metadata);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_session_object>("object", Object);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Gelato_verification_session_options>("options", Options);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Gelato_provided_details>("provided_details", ProvidedDetails);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Verification_session_redaction>("redaction", Redaction);
            writer.WriteStringValue("related_customer", RelatedCustomer);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Gelato_related_person>("related_person", RelatedPerson);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_session_status>("status", Status);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_session_type>("type", Type);
            writer.WriteStringValue("url", Url);
            writer.WriteStringValue("verification_flow", VerificationFlow);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Gelato_verified_outputs>("verified_outputs", VerifiedOutputs);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_report"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Verification_session_last_verification_report : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_report"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_report? VerificationReport { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_report VerificationReport { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_session.Verification_session_last_verification_report"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_session.Verification_session_last_verification_report CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_session.Verification_session_last_verification_report();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.VerificationReport = new global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_report();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(VerificationReport != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(VerificationReport);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_report>(null, VerificationReport);
                }
            }
        }
    }
}
#pragma warning restore CS0618
