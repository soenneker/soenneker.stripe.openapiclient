// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models.Identity
{
    /// <summary>
    /// A VerificationReport is the result of an attempt to collect and verify data from a user.The collection of verification checks performed is determined from the `type` and `options`parameters used. You can find the result of each verification check performed in theappropriate sub-resource: `document`, `id_number`, `selfie`.Each VerificationReport contains a copy of any data collected by the user as well asreference IDs which can be used to access collected images through the [FileUpload](https://stripe.com/docs/api/files)API. To configure and create VerificationReports, use the[VerificationSession](https://stripe.com/docs/api/identity/verification_sessions) API.Related guide: [Accessing verification results](https://stripe.com/docs/identity/verification-sessions#results).
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Verification_report : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientReferenceId { get; set; }
#nullable restore
#else
        public string ClientReferenceId { get; set; }
#endif
        /// <summary>Time at which the object was created. Measured in seconds since the Unix epoch.</summary>
        public int? Created { get; set; }
        /// <summary>Result from a document check</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Gelato_document_report? Document { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Gelato_document_report Document { get; set; }
#endif
        /// <summary>Result from a email check</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Gelato_email_report? Email { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Gelato_email_report Email { get; set; }
#endif
        /// <summary>Unique identifier for the object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Result from an id_number check</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Gelato_id_number_report? IdNumber { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Gelato_id_number_report IdNumber { get; set; }
#endif
        /// <summary>Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.</summary>
        public bool? Livemode { get; set; }
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_report_object? Object { get; set; }
        /// <summary>The options property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Gelato_verification_report_options? Options { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Gelato_verification_report_options Options { get; set; }
#endif
        /// <summary>Result from a phone check</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Gelato_phone_report? Phone { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Gelato_phone_report Phone { get; set; }
#endif
        /// <summary>Result from a selfie check</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Gelato_selfie_report? Selfie { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Gelato_selfie_report Selfie { get; set; }
#endif
        /// <summary>Type of report.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_report_type? Type { get; set; }
        /// <summary>The configuration token of a verification flow from the dashboard.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VerificationFlow { get; set; }
#nullable restore
#else
        public string VerificationFlow { get; set; }
#endif
        /// <summary>ID of the VerificationSession that created this report.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VerificationSession { get; set; }
#nullable restore
#else
        public string VerificationSession { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_report"/> and sets the default values.
        /// </summary>
        public Verification_report()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_report"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_report CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_report();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "client_reference_id", n => { ClientReferenceId = n.GetStringValue(); } },
                { "created", n => { Created = n.GetIntValue(); } },
                { "document", n => { Document = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Gelato_document_report>(global::Soenneker.Stripe.OpenApiClient.Models.Gelato_document_report.CreateFromDiscriminatorValue); } },
                { "email", n => { Email = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Gelato_email_report>(global::Soenneker.Stripe.OpenApiClient.Models.Gelato_email_report.CreateFromDiscriminatorValue); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "id_number", n => { IdNumber = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Gelato_id_number_report>(global::Soenneker.Stripe.OpenApiClient.Models.Gelato_id_number_report.CreateFromDiscriminatorValue); } },
                { "livemode", n => { Livemode = n.GetBoolValue(); } },
                { "object", n => { Object = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_report_object>(); } },
                { "options", n => { Options = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Gelato_verification_report_options>(global::Soenneker.Stripe.OpenApiClient.Models.Gelato_verification_report_options.CreateFromDiscriminatorValue); } },
                { "phone", n => { Phone = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Gelato_phone_report>(global::Soenneker.Stripe.OpenApiClient.Models.Gelato_phone_report.CreateFromDiscriminatorValue); } },
                { "selfie", n => { Selfie = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Gelato_selfie_report>(global::Soenneker.Stripe.OpenApiClient.Models.Gelato_selfie_report.CreateFromDiscriminatorValue); } },
                { "type", n => { Type = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_report_type>(); } },
                { "verification_flow", n => { VerificationFlow = n.GetStringValue(); } },
                { "verification_session", n => { VerificationSession = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("client_reference_id", ClientReferenceId);
            writer.WriteIntValue("created", Created);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Gelato_document_report>("document", Document);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Gelato_email_report>("email", Email);
            writer.WriteStringValue("id", Id);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Gelato_id_number_report>("id_number", IdNumber);
            writer.WriteBoolValue("livemode", Livemode);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_report_object>("object", Object);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Gelato_verification_report_options>("options", Options);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Gelato_phone_report>("phone", Phone);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Gelato_selfie_report>("selfie", Selfie);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Identity.Verification_report_type>("type", Type);
            writer.WriteStringValue("verification_flow", VerificationFlow);
            writer.WriteStringValue("verification_session", VerificationSession);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
