// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Connect_embedded_payouts_features : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Whether Stripe user authentication is disabled. This value can only be `true` for accounts where `controller.requirement_collection` is `application` for the account. The default value is the opposite of the `external_account_collection` value. For example, if you don&apos;t set `external_account_collection`, it defaults to `true` and `disable_stripe_user_authentication` defaults to `false`.</summary>
        public bool? DisableStripeUserAuthentication { get; set; }
        /// <summary>Whether to allow payout schedule to be changed. Defaults to `true` when `controller.losses.payments` is set to `stripe` for the account, otherwise `false`.</summary>
        public bool? EditPayoutSchedule { get; set; }
        /// <summary>Whether external account collection is enabled. This feature can only be `false` for accounts where youâ€™re responsible for collecting updated information when requirements are due or change, like Custom accounts. The default value for this feature is `true`.</summary>
        public bool? ExternalAccountCollection { get; set; }
        /// <summary>Whether to allow creation of instant payouts. Defaults to `true` when `controller.losses.payments` is set to `stripe` for the account, otherwise `false`.</summary>
        public bool? InstantPayouts { get; set; }
        /// <summary>Whether to allow creation of standard payouts. Defaults to `true` when `controller.losses.payments` is set to `stripe` for the account, otherwise `false`.</summary>
        public bool? StandardPayouts { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Connect_embedded_payouts_features"/> and sets the default values.
        /// </summary>
        public Connect_embedded_payouts_features()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Connect_embedded_payouts_features"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Connect_embedded_payouts_features CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Connect_embedded_payouts_features();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "disable_stripe_user_authentication", n => { DisableStripeUserAuthentication = n.GetBoolValue(); } },
                { "edit_payout_schedule", n => { EditPayoutSchedule = n.GetBoolValue(); } },
                { "external_account_collection", n => { ExternalAccountCollection = n.GetBoolValue(); } },
                { "instant_payouts", n => { InstantPayouts = n.GetBoolValue(); } },
                { "standard_payouts", n => { StandardPayouts = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("disable_stripe_user_authentication", DisableStripeUserAuthentication);
            writer.WriteBoolValue("edit_payout_schedule", EditPayoutSchedule);
            writer.WriteBoolValue("external_account_collection", ExternalAccountCollection);
            writer.WriteBoolValue("instant_payouts", InstantPayouts);
            writer.WriteBoolValue("standard_payouts", StandardPayouts);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
