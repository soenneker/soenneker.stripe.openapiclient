// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Payment_source : IAdditionalDataHolder, IComposedTypeWrapper, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The account this bank account belongs to. Only applicable on Accounts (not customers or recipients) This property is only available when returned as an [External Account](/api/external_account_bank_accounts/object) where [controller.is_controller](/api/accounts/object#account_object-controller-is_controller) is `true`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_source.Payment_source_account? Account { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_source.Payment_source_account Account { get; set; }
#endif
        /// <summary>The name of the person or business that owns the bank account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountHolderName { get; set; }
#nullable restore
#else
        public string AccountHolderName { get; set; }
#endif
        /// <summary>The type of entity that holds the account. This can be either `individual` or `company`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountHolderType { get; set; }
#nullable restore
#else
        public string AccountHolderType { get; set; }
#endif
        /// <summary>The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountType { get; set; }
#nullable restore
#else
        public string AccountType { get; set; }
#endif
        /// <summary>The ach_credit_transfer property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_ach_credit_transfer? AchCreditTransfer { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_ach_credit_transfer AchCreditTransfer { get; set; }
#endif
        /// <summary>The ach_debit property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_ach_debit? AchDebit { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_ach_debit AchDebit { get; set; }
#endif
        /// <summary>The acss_debit property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_acss_debit? AcssDebit { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_acss_debit AcssDebit { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>City/District/Suburb/Town/Village.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AddressCity { get; set; }
#nullable restore
#else
        public string AddressCity { get; set; }
#endif
        /// <summary>Billing address country, if provided when creating card.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AddressCountry { get; set; }
#nullable restore
#else
        public string AddressCountry { get; set; }
#endif
        /// <summary>Address line 1 (Street address/PO Box/Company name).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AddressLine1 { get; set; }
#nullable restore
#else
        public string AddressLine1 { get; set; }
#endif
        /// <summary>If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AddressLine1Check { get; set; }
#nullable restore
#else
        public string AddressLine1Check { get; set; }
#endif
        /// <summary>Address line 2 (Apartment/Suite/Unit/Building).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AddressLine2 { get; set; }
#nullable restore
#else
        public string AddressLine2 { get; set; }
#endif
        /// <summary>State/County/Province/Region.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AddressState { get; set; }
#nullable restore
#else
        public string AddressState { get; set; }
#endif
        /// <summary>ZIP or postal code.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AddressZip { get; set; }
#nullable restore
#else
        public string AddressZip { get; set; }
#endif
        /// <summary>If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AddressZipCheck { get; set; }
#nullable restore
#else
        public string AddressZipCheck { get; set; }
#endif
        /// <summary>The alipay property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_alipay? Alipay { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_alipay Alipay { get; set; }
#endif
        /// <summary>This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to “unspecified”.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_source_allow_redisplay? AllowRedisplay { get; set; }
        /// <summary>A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources.</summary>
        public int? Amount { get; set; }
        /// <summary>The au_becs_debit property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_au_becs_debit? AuBecsDebit { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_au_becs_debit AuBecsDebit { get; set; }
#endif
        /// <summary>A set of available payout methods for this bank account. Only values from this set should be passed as the `method` when creating a payout.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Payment_source_available_payout_methods?>? AvailablePayoutMethods { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Payment_source_available_payout_methods?> AvailablePayoutMethods { get; set; }
#endif
        /// <summary>The bancontact property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_bancontact? Bancontact { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_bancontact Bancontact { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Bank_account"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Bank_account? BankAccount { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Bank_account BankAccount { get; set; }
#endif
        /// <summary>Name of the bank associated with the routing number (e.g., `WELLS FARGO`).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BankName { get; set; }
#nullable restore
#else
        public string BankName { get; set; }
#endif
        /// <summary>Card brand. Can be `American Express`, `Diners Club`, `Discover`, `Eftpos Australia`, `Girocard`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Brand { get; set; }
#nullable restore
#else
        public string Brand { get; set; }
#endif
        /// <summary>Business information about the account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_business_profile? BusinessProfile { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_business_profile BusinessProfile { get; set; }
#endif
        /// <summary>The business type.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_source_business_type? BusinessType { get; set; }
        /// <summary>The capabilities property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities? Capabilities { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities Capabilities { get; set; }
#endif
        /// <summary>The card property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_card? Card { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_card Card { get; set; }
#endif
        /// <summary>The card_present property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_card_present? CardPresent { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_card_present CardPresent { get; set; }
#endif
        /// <summary>Whether the account can process charges.</summary>
        public bool? ChargesEnabled { get; set; }
        /// <summary>The client secret of the source. Used for client-side retrieval using a publishable key.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientSecret { get; set; }
#nullable restore
#else
        public string ClientSecret { get; set; }
#endif
        /// <summary>The code_verification property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_code_verification_flow? CodeVerification { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_code_verification_flow CodeVerification { get; set; }
#endif
        /// <summary>The company property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_company? Company { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_company Company { get; set; }
#endif
        /// <summary>The controller property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_unification_account_controller? Controller { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_unification_account_controller Controller { get; set; }
#endif
        /// <summary>The account&apos;s country.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Country { get; set; }
#nullable restore
#else
        public string Country { get; set; }
#endif
        /// <summary>Time at which the account was connected. Measured in seconds since the Unix epoch.</summary>
        public int? Created { get; set; }
        /// <summary>Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>The ID of the customer that the bank account is associated with.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_source.Payment_source_customer? Customer { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_source.Payment_source_customer Customer { get; set; }
#endif
        /// <summary>If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn&apos;t been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CvcCheck { get; set; }
#nullable restore
#else
        public string CvcCheck { get; set; }
#endif
        /// <summary>Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account&apos;s country](https://stripe.com/docs/payouts).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DefaultCurrency { get; set; }
#nullable restore
#else
        public string DefaultCurrency { get; set; }
#endif
        /// <summary>Whether this bank account is the default external account for its currency.</summary>
        public bool? DefaultForCurrency { get; set; }
        /// <summary>Whether account details have been submitted. Accounts with Stripe Dashboard access, which includes Standard accounts, cannot receive payouts before this is true. Accounts where this is false should be directed to [an onboarding flow](/connect/onboarding) to finish submitting account details.</summary>
        public bool? DetailsSubmitted { get; set; }
        /// <summary>(For tokenized numbers only.) The last four digits of the device account number.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DynamicLast4 { get; set; }
#nullable restore
#else
        public string DynamicLast4 { get; set; }
#endif
        /// <summary>An email address associated with the account. It&apos;s not used for authentication and Stripe doesn&apos;t market to this field without explicit approval from the platform.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Email { get; set; }
#nullable restore
#else
        public string Email { get; set; }
#endif
        /// <summary>The eps property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_eps? Eps { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_eps Eps { get; set; }
#endif
        /// <summary>Two-digit number representing the card&apos;s expiration month.</summary>
        public int? ExpMonth { get; set; }
        /// <summary>Four-digit number representing the card&apos;s expiration year.</summary>
        public int? ExpYear { get; set; }
        /// <summary>External accounts (bank accounts and debit cards) currently attached to this account. External accounts are only returned for requests where `controller[is_controller]` is true.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_source_external_accounts? ExternalAccounts { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_source_external_accounts ExternalAccounts { get; set; }
#endif
        /// <summary>Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Fingerprint { get; set; }
#nullable restore
#else
        public string Fingerprint { get; set; }
#endif
        /// <summary>The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Flow { get; set; }
#nullable restore
#else
        public string Flow { get; set; }
#endif
        /// <summary>Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Funding { get; set; }
#nullable restore
#else
        public string Funding { get; set; }
#endif
        /// <summary>The future_requirements property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_future_requirements? FutureRequirements { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_future_requirements FutureRequirements { get; set; }
#endif
        /// <summary>The giropay property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_giropay? Giropay { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_giropay Giropay { get; set; }
#endif
        /// <summary>The groups associated with the account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_group_membership? Groups { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_group_membership Groups { get; set; }
#endif
        /// <summary>Unique identifier for the object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The ideal property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_ideal? Ideal { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_ideal Ideal { get; set; }
#endif
        /// <summary>Issuer identification number of the card.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Iin { get; set; }
#nullable restore
#else
        public string Iin { get; set; }
#endif
        /// <summary>This is an object representing a person associated with a Stripe account.A platform can only access a subset of data in a person for an account where [account.controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `stripe`, which includes Standard and Express accounts, after creating an Account Link or Account Session to start Connect onboarding.See the [Standard onboarding](/connect/standard-accounts) or [Express onboarding](/connect/express-accounts) documentation for information about prefilling information and account onboarding steps. Learn more about [handling identity verification with the API](/connect/handling-api-verification#person-information).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Person? Individual { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Person Individual { get; set; }
#endif
        /// <summary>The klarna property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_klarna? Klarna { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_klarna Klarna { get; set; }
#endif
        /// <summary>The last four digits of the bank account number.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Last4 { get; set; }
#nullable restore
#else
        public string Last4 { get; set; }
#endif
        /// <summary>Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.</summary>
        public bool? Livemode { get; set; }
        /// <summary>Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_source_metadata? Metadata { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_source_metadata Metadata { get; set; }
#endif
        /// <summary>The multibanco property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_multibanco? Multibanco { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_multibanco Multibanco { get; set; }
#endif
        /// <summary>Cardholder name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The networks property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Token_card_networks? Networks { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Token_card_networks Networks { get; set; }
#endif
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_source_object? Object { get; set; }
        /// <summary>Information about the owner of the payment instrument that may be used or required by particular source types.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_owner? Owner { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_owner Owner { get; set; }
#endif
        /// <summary>The p24 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_p24? P24 { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_p24 P24 { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Account"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Account? PaymentSourceAccount { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Account PaymentSourceAccount { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Card"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Card? PaymentSourceCard { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Card PaymentSourceCard { get; set; }
#endif
        /// <summary>Whether the funds in this account can be paid out.</summary>
        public bool? PayoutsEnabled { get; set; }
        /// <summary>The receiver property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_receiver_flow? Receiver { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_receiver_flow Receiver { get; set; }
#endif
        /// <summary>The redirect property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_redirect_flow? Redirect { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_redirect_flow Redirect { get; set; }
#endif
        /// <summary>Status of a card based on the card issuer.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_source_regulated_status? RegulatedStatus { get; set; }
        /// <summary>The requirements property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_requirements? Requirements { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_requirements Requirements { get; set; }
#endif
        /// <summary>The routing transit number for the bank account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RoutingNumber { get; set; }
#nullable restore
#else
        public string RoutingNumber { get; set; }
#endif
        /// <summary>The sepa_debit property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_sepa_debit? SepaDebit { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_sepa_debit SepaDebit { get; set; }
#endif
        /// <summary>Options for customizing how the account functions within Stripe.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_settings? Settings { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_settings Settings { get; set; }
#endif
        /// <summary>The sofort property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_sofort? Sofort { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_sofort Sofort { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Source"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source? Source { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source Source { get; set; }
#endif
        /// <summary>The source_order property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_order? SourceOrder { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_order SourceOrder { get; set; }
#endif
        /// <summary>Extra information about a source. This will appear on your customer&apos;s statement every time you charge the source.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StatementDescriptor { get; set; }
#nullable restore
#else
        public string StatementDescriptor { get; set; }
#endif
        /// <summary>For bank accounts, possible values are `new`, `validated`, `verified`, `verification_failed`, or `errored`. A bank account that hasn&apos;t had any activity or validation performed is `new`. If Stripe can determine that the bank account exists, its status will be `validated`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be `verified`. If the verification failed for any reason, such as microdeposit failure, the status will be `verification_failed`. If a payout sent to this bank account fails, we&apos;ll set the status to `errored` and will not continue to send [scheduled payouts](https://stripe.com/docs/payouts#payout-schedule) until the bank details are updated.For external accounts, possible values are `new`, `errored` and `verification_failed`. If a payout fails, the status is set to `errored` and scheduled payouts are stopped until account details are updated. In the US and India, if we can&apos;t [verify the owner of the bank account](https://support.stripe.com/questions/bank-account-ownership-verification), we&apos;ll set the status to `verification_failed`. Other validations aren&apos;t run against external accounts because they&apos;re only used for payouts. This means the other statuses don&apos;t apply.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>The three_d_secure property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_three_d_secure? ThreeDSecure { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_three_d_secure ThreeDSecure { get; set; }
#endif
        /// <summary>If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TokenizationMethod { get; set; }
#nullable restore
#else
        public string TokenizationMethod { get; set; }
#endif
        /// <summary>The tos_acceptance property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_tos_acceptance? TosAcceptance { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Account_tos_acceptance TosAcceptance { get; set; }
#endif
        /// <summary>The Stripe account type. Can be `standard`, `express`, `custom`, or `none`.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_source_type? Type { get; set; }
        /// <summary>Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Usage { get; set; }
#nullable restore
#else
        public string Usage { get; set; }
#endif
        /// <summary>The wechat property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_wechat? Wechat { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Source_type_wechat Wechat { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Payment_source"/> and sets the default values.
        /// </summary>
        public Payment_source()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Payment_source"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Payment_source CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var result = new global::Soenneker.Stripe.OpenApiClient.Models.Payment_source();
            if(parseNode.GetStringValue() is string accountHolderNameValue)
            {
                result.AccountHolderName = accountHolderNameValue;
            }
            else if(parseNode.GetStringValue() is string accountHolderTypeValue)
            {
                result.AccountHolderType = accountHolderTypeValue;
            }
            else if(parseNode.GetStringValue() is string accountTypeValue)
            {
                result.AccountType = accountTypeValue;
            }
            else if(parseNode.GetStringValue() is string addressCityValue)
            {
                result.AddressCity = addressCityValue;
            }
            else if(parseNode.GetStringValue() is string addressCountryValue)
            {
                result.AddressCountry = addressCountryValue;
            }
            else if(parseNode.GetStringValue() is string addressLine1Value)
            {
                result.AddressLine1 = addressLine1Value;
            }
            else if(parseNode.GetStringValue() is string addressLine1CheckValue)
            {
                result.AddressLine1Check = addressLine1CheckValue;
            }
            else if(parseNode.GetStringValue() is string addressLine2Value)
            {
                result.AddressLine2 = addressLine2Value;
            }
            else if(parseNode.GetStringValue() is string addressStateValue)
            {
                result.AddressState = addressStateValue;
            }
            else if(parseNode.GetStringValue() is string addressZipValue)
            {
                result.AddressZip = addressZipValue;
            }
            else if(parseNode.GetStringValue() is string addressZipCheckValue)
            {
                result.AddressZipCheck = addressZipCheckValue;
            }
            else if(parseNode.GetIntValue() is int amountValue)
            {
                result.Amount = amountValue;
            }
            else if(parseNode.GetStringValue() is string bankNameValue)
            {
                result.BankName = bankNameValue;
            }
            else if(parseNode.GetStringValue() is string brandValue)
            {
                result.Brand = brandValue;
            }
            else if(parseNode.GetBoolValue() is bool chargesEnabledValue)
            {
                result.ChargesEnabled = chargesEnabledValue;
            }
            else if(parseNode.GetStringValue() is string clientSecretValue)
            {
                result.ClientSecret = clientSecretValue;
            }
            else if(parseNode.GetStringValue() is string countryValue)
            {
                result.Country = countryValue;
            }
            else if(parseNode.GetIntValue() is int createdValue)
            {
                result.Created = createdValue;
            }
            else if(parseNode.GetStringValue() is string currencyValue)
            {
                result.Currency = currencyValue;
            }
            else if(parseNode.GetStringValue() is string cvcCheckValue)
            {
                result.CvcCheck = cvcCheckValue;
            }
            else if(parseNode.GetStringValue() is string defaultCurrencyValue)
            {
                result.DefaultCurrency = defaultCurrencyValue;
            }
            else if(parseNode.GetBoolValue() is bool defaultForCurrencyValue)
            {
                result.DefaultForCurrency = defaultForCurrencyValue;
            }
            else if(parseNode.GetBoolValue() is bool detailsSubmittedValue)
            {
                result.DetailsSubmitted = detailsSubmittedValue;
            }
            else if(parseNode.GetStringValue() is string dynamicLast4Value)
            {
                result.DynamicLast4 = dynamicLast4Value;
            }
            else if(parseNode.GetStringValue() is string emailValue)
            {
                result.Email = emailValue;
            }
            else if(parseNode.GetIntValue() is int expMonthValue)
            {
                result.ExpMonth = expMonthValue;
            }
            else if(parseNode.GetIntValue() is int expYearValue)
            {
                result.ExpYear = expYearValue;
            }
            else if(parseNode.GetStringValue() is string fingerprintValue)
            {
                result.Fingerprint = fingerprintValue;
            }
            else if(parseNode.GetStringValue() is string flowValue)
            {
                result.Flow = flowValue;
            }
            else if(parseNode.GetStringValue() is string fundingValue)
            {
                result.Funding = fundingValue;
            }
            else if(parseNode.GetStringValue() is string idValue)
            {
                result.Id = idValue;
            }
            else if(parseNode.GetStringValue() is string iinValue)
            {
                result.Iin = iinValue;
            }
            else if(parseNode.GetStringValue() is string last4Value)
            {
                result.Last4 = last4Value;
            }
            else if(parseNode.GetBoolValue() is bool livemodeValue)
            {
                result.Livemode = livemodeValue;
            }
            else if(parseNode.GetStringValue() is string nameValue)
            {
                result.Name = nameValue;
            }
            else if(parseNode.GetBoolValue() is bool payoutsEnabledValue)
            {
                result.PayoutsEnabled = payoutsEnabledValue;
            }
            else if(parseNode.GetStringValue() is string routingNumberValue)
            {
                result.RoutingNumber = routingNumberValue;
            }
            else if(parseNode.GetStringValue() is string statementDescriptorValue)
            {
                result.StatementDescriptor = statementDescriptorValue;
            }
            else if(parseNode.GetStringValue() is string statusValue)
            {
                result.Status = statusValue;
            }
            else if(parseNode.GetStringValue() is string tokenizationMethodValue)
            {
                result.TokenizationMethod = tokenizationMethodValue;
            }
            else if(parseNode.GetStringValue() is string usageValue)
            {
                result.Usage = usageValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_source_allow_redisplay>() is global::Soenneker.Stripe.OpenApiClient.Models.Payment_source_allow_redisplay allowRedisplayValue)
            {
                result.AllowRedisplay = allowRedisplayValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_source_business_type>() is global::Soenneker.Stripe.OpenApiClient.Models.Payment_source_business_type businessTypeValue)
            {
                result.BusinessType = businessTypeValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_source_object>() is global::Soenneker.Stripe.OpenApiClient.Models.Payment_source_object objectValue)
            {
                result.Object = objectValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_source_regulated_status>() is global::Soenneker.Stripe.OpenApiClient.Models.Payment_source_regulated_status regulatedStatusValue)
            {
                result.RegulatedStatus = regulatedStatusValue;
            }
            else if(parseNode.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_source_type>() is global::Soenneker.Stripe.OpenApiClient.Models.Payment_source_type typeValue)
            {
                result.Type = typeValue;
            }
            else if(parseNode.GetCollectionOfEnumValues<global::Soenneker.Stripe.OpenApiClient.Models.Payment_source_available_payout_methods>()?.AsList() is List<global::Soenneker.Stripe.OpenApiClient.Models.Payment_source_available_payout_methods?> availablePayoutMethodsValue)
            {
                result.AvailablePayoutMethods = availablePayoutMethodsValue;
            }
            else {
                result.Account = new global::Soenneker.Stripe.OpenApiClient.Models.Payment_source.Payment_source_account();
                result.AchCreditTransfer = new global::Soenneker.Stripe.OpenApiClient.Models.Source_type_ach_credit_transfer();
                result.AchDebit = new global::Soenneker.Stripe.OpenApiClient.Models.Source_type_ach_debit();
                result.AcssDebit = new global::Soenneker.Stripe.OpenApiClient.Models.Source_type_acss_debit();
                result.Alipay = new global::Soenneker.Stripe.OpenApiClient.Models.Source_type_alipay();
                result.AuBecsDebit = new global::Soenneker.Stripe.OpenApiClient.Models.Source_type_au_becs_debit();
                result.Bancontact = new global::Soenneker.Stripe.OpenApiClient.Models.Source_type_bancontact();
                result.BankAccount = new global::Soenneker.Stripe.OpenApiClient.Models.Bank_account();
                result.BusinessProfile = new global::Soenneker.Stripe.OpenApiClient.Models.Account_business_profile();
                result.Capabilities = new global::Soenneker.Stripe.OpenApiClient.Models.Account_capabilities();
                result.Card = new global::Soenneker.Stripe.OpenApiClient.Models.Source_type_card();
                result.CardPresent = new global::Soenneker.Stripe.OpenApiClient.Models.Source_type_card_present();
                result.CodeVerification = new global::Soenneker.Stripe.OpenApiClient.Models.Source_code_verification_flow();
                result.Company = new global::Soenneker.Stripe.OpenApiClient.Models.Legal_entity_company();
                result.Controller = new global::Soenneker.Stripe.OpenApiClient.Models.Account_unification_account_controller();
                result.Customer = new global::Soenneker.Stripe.OpenApiClient.Models.Payment_source.Payment_source_customer();
                result.Eps = new global::Soenneker.Stripe.OpenApiClient.Models.Source_type_eps();
                result.ExternalAccounts = new global::Soenneker.Stripe.OpenApiClient.Models.Payment_source_external_accounts();
                result.FutureRequirements = new global::Soenneker.Stripe.OpenApiClient.Models.Account_future_requirements();
                result.Giropay = new global::Soenneker.Stripe.OpenApiClient.Models.Source_type_giropay();
                result.Groups = new global::Soenneker.Stripe.OpenApiClient.Models.Account_group_membership();
                result.Ideal = new global::Soenneker.Stripe.OpenApiClient.Models.Source_type_ideal();
                result.Individual = new global::Soenneker.Stripe.OpenApiClient.Models.Person();
                result.Klarna = new global::Soenneker.Stripe.OpenApiClient.Models.Source_type_klarna();
                result.Metadata = new global::Soenneker.Stripe.OpenApiClient.Models.Payment_source_metadata();
                result.Multibanco = new global::Soenneker.Stripe.OpenApiClient.Models.Source_type_multibanco();
                result.Networks = new global::Soenneker.Stripe.OpenApiClient.Models.Token_card_networks();
                result.Owner = new global::Soenneker.Stripe.OpenApiClient.Models.Source_owner();
                result.P24 = new global::Soenneker.Stripe.OpenApiClient.Models.Source_type_p24();
                result.PaymentSourceAccount = new global::Soenneker.Stripe.OpenApiClient.Models.Account();
                result.PaymentSourceCard = new global::Soenneker.Stripe.OpenApiClient.Models.Card();
                result.Receiver = new global::Soenneker.Stripe.OpenApiClient.Models.Source_receiver_flow();
                result.Redirect = new global::Soenneker.Stripe.OpenApiClient.Models.Source_redirect_flow();
                result.Requirements = new global::Soenneker.Stripe.OpenApiClient.Models.Account_requirements();
                result.SepaDebit = new global::Soenneker.Stripe.OpenApiClient.Models.Source_type_sepa_debit();
                result.Settings = new global::Soenneker.Stripe.OpenApiClient.Models.Account_settings();
                result.Sofort = new global::Soenneker.Stripe.OpenApiClient.Models.Source_type_sofort();
                result.Source = new global::Soenneker.Stripe.OpenApiClient.Models.Source();
                result.SourceOrder = new global::Soenneker.Stripe.OpenApiClient.Models.Source_order();
                result.ThreeDSecure = new global::Soenneker.Stripe.OpenApiClient.Models.Source_type_three_d_secure();
                result.TosAcceptance = new global::Soenneker.Stripe.OpenApiClient.Models.Account_tos_acceptance();
                result.Wechat = new global::Soenneker.Stripe.OpenApiClient.Models.Source_type_wechat();
            }
            return result;
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            if(Account != null || AchCreditTransfer != null || AchDebit != null || AcssDebit != null || Alipay != null || AuBecsDebit != null || Bancontact != null || BankAccount != null || BusinessProfile != null || Capabilities != null || Card != null || CardPresent != null || CodeVerification != null || Company != null || Controller != null || Customer != null || Eps != null || ExternalAccounts != null || FutureRequirements != null || Giropay != null || Groups != null || Ideal != null || Individual != null || Klarna != null || Metadata != null || Multibanco != null || Networks != null || Owner != null || P24 != null || PaymentSourceAccount != null || PaymentSourceCard != null || Receiver != null || Redirect != null || Requirements != null || SepaDebit != null || Settings != null || Sofort != null || Source != null || SourceOrder != null || ThreeDSecure != null || TosAcceptance != null || Wechat != null)
            {
                return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(Account, AchCreditTransfer, AchDebit, AcssDebit, Alipay, AuBecsDebit, Bancontact, BankAccount, BusinessProfile, Capabilities, Card, CardPresent, CodeVerification, Company, Controller, Customer, Eps, ExternalAccounts, FutureRequirements, Giropay, Groups, Ideal, Individual, Klarna, Metadata, Multibanco, Networks, Owner, P24, PaymentSourceAccount, PaymentSourceCard, Receiver, Redirect, Requirements, SepaDebit, Settings, Sofort, Source, SourceOrder, ThreeDSecure, TosAcceptance, Wechat);
            }
            return new Dictionary<string, Action<IParseNode>>();
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            if(AccountHolderName != null)
            {
                writer.WriteStringValue(null, AccountHolderName);
            }
            else if(AccountHolderType != null)
            {
                writer.WriteStringValue(null, AccountHolderType);
            }
            else if(AccountType != null)
            {
                writer.WriteStringValue(null, AccountType);
            }
            else if(AddressCity != null)
            {
                writer.WriteStringValue(null, AddressCity);
            }
            else if(AddressCountry != null)
            {
                writer.WriteStringValue(null, AddressCountry);
            }
            else if(AddressLine1 != null)
            {
                writer.WriteStringValue(null, AddressLine1);
            }
            else if(AddressLine1Check != null)
            {
                writer.WriteStringValue(null, AddressLine1Check);
            }
            else if(AddressLine2 != null)
            {
                writer.WriteStringValue(null, AddressLine2);
            }
            else if(AddressState != null)
            {
                writer.WriteStringValue(null, AddressState);
            }
            else if(AddressZip != null)
            {
                writer.WriteStringValue(null, AddressZip);
            }
            else if(AddressZipCheck != null)
            {
                writer.WriteStringValue(null, AddressZipCheck);
            }
            else if(Amount != null)
            {
                writer.WriteIntValue(null, Amount);
            }
            else if(BankName != null)
            {
                writer.WriteStringValue(null, BankName);
            }
            else if(Brand != null)
            {
                writer.WriteStringValue(null, Brand);
            }
            else if(ChargesEnabled != null)
            {
                writer.WriteBoolValue(null, ChargesEnabled);
            }
            else if(ClientSecret != null)
            {
                writer.WriteStringValue(null, ClientSecret);
            }
            else if(Country != null)
            {
                writer.WriteStringValue(null, Country);
            }
            else if(Created != null)
            {
                writer.WriteIntValue(null, Created);
            }
            else if(Currency != null)
            {
                writer.WriteStringValue(null, Currency);
            }
            else if(CvcCheck != null)
            {
                writer.WriteStringValue(null, CvcCheck);
            }
            else if(DefaultCurrency != null)
            {
                writer.WriteStringValue(null, DefaultCurrency);
            }
            else if(DefaultForCurrency != null)
            {
                writer.WriteBoolValue(null, DefaultForCurrency);
            }
            else if(DetailsSubmitted != null)
            {
                writer.WriteBoolValue(null, DetailsSubmitted);
            }
            else if(DynamicLast4 != null)
            {
                writer.WriteStringValue(null, DynamicLast4);
            }
            else if(Email != null)
            {
                writer.WriteStringValue(null, Email);
            }
            else if(ExpMonth != null)
            {
                writer.WriteIntValue(null, ExpMonth);
            }
            else if(ExpYear != null)
            {
                writer.WriteIntValue(null, ExpYear);
            }
            else if(Fingerprint != null)
            {
                writer.WriteStringValue(null, Fingerprint);
            }
            else if(Flow != null)
            {
                writer.WriteStringValue(null, Flow);
            }
            else if(Funding != null)
            {
                writer.WriteStringValue(null, Funding);
            }
            else if(Id != null)
            {
                writer.WriteStringValue(null, Id);
            }
            else if(Iin != null)
            {
                writer.WriteStringValue(null, Iin);
            }
            else if(Last4 != null)
            {
                writer.WriteStringValue(null, Last4);
            }
            else if(Livemode != null)
            {
                writer.WriteBoolValue(null, Livemode);
            }
            else if(Name != null)
            {
                writer.WriteStringValue(null, Name);
            }
            else if(PayoutsEnabled != null)
            {
                writer.WriteBoolValue(null, PayoutsEnabled);
            }
            else if(RoutingNumber != null)
            {
                writer.WriteStringValue(null, RoutingNumber);
            }
            else if(StatementDescriptor != null)
            {
                writer.WriteStringValue(null, StatementDescriptor);
            }
            else if(Status != null)
            {
                writer.WriteStringValue(null, Status);
            }
            else if(TokenizationMethod != null)
            {
                writer.WriteStringValue(null, TokenizationMethod);
            }
            else if(Usage != null)
            {
                writer.WriteStringValue(null, Usage);
            }
            else if(AllowRedisplay != null)
            {
                writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_source_allow_redisplay>(null, AllowRedisplay);
            }
            else if(BusinessType != null)
            {
                writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_source_business_type>(null, BusinessType);
            }
            else if(Object != null)
            {
                writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_source_object>(null, Object);
            }
            else if(RegulatedStatus != null)
            {
                writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_source_regulated_status>(null, RegulatedStatus);
            }
            else if(Type != null)
            {
                writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_source_type>(null, Type);
            }
            else if(AvailablePayoutMethods != null)
            {
                writer.WriteCollectionOfEnumValues<global::Soenneker.Stripe.OpenApiClient.Models.Payment_source_available_payout_methods>(null, AvailablePayoutMethods);
            }
            else {
                writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_source.Payment_source_account>(null, Account, AchCreditTransfer, AchDebit, AcssDebit, Alipay, AuBecsDebit, Bancontact, BankAccount, BusinessProfile, Capabilities, Card, CardPresent, CodeVerification, Company, Controller, Customer, Eps, ExternalAccounts, FutureRequirements, Giropay, Groups, Ideal, Individual, Klarna, Metadata, Multibanco, Networks, Owner, P24, PaymentSourceAccount, PaymentSourceCard, Receiver, Redirect, Requirements, SepaDebit, Settings, Sofort, Source, SourceOrder, ThreeDSecure, TosAcceptance, Wechat);
            }
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Account"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Payment_source_account : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Account"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Account? Account { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Account Account { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Payment_source.Payment_source_account"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Payment_source.Payment_source_account CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Payment_source.Payment_source_account();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.Account = new global::Soenneker.Stripe.OpenApiClient.Models.Account();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(Account != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(Account);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Account>(null, Account);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Customer"/>, <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Deleted_customer"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Payment_source_customer : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Customer"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Customer? Customer { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Customer Customer { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Deleted_customer"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Deleted_customer? DeletedCustomer { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Deleted_customer DeletedCustomer { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Payment_source.Payment_source_customer"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Payment_source.Payment_source_customer CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Payment_source.Payment_source_customer();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.Customer = new global::Soenneker.Stripe.OpenApiClient.Models.Customer();
                    result.DeletedCustomer = new global::Soenneker.Stripe.OpenApiClient.Models.Deleted_customer();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(Customer != null || DeletedCustomer != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(Customer, DeletedCustomer);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Customer>(null, Customer, DeletedCustomer);
                }
            }
        }
    }
}
#pragma warning restore CS0618
