// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Payment_method_details_card_present : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The authorized amount</summary>
        public int? AmountAuthorized { get; set; }
        /// <summary>Card brand. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `jcb`, `link`, `mastercard`, `unionpay`, `visa` or `unknown`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Brand { get; set; }
#nullable restore
#else
        public string Brand { get; set; }
#endif
        /// <summary>The [product code](https://stripe.com/docs/card-product-codes) that identifies the specific program or product associated with a card.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BrandProduct { get; set; }
#nullable restore
#else
        public string BrandProduct { get; set; }
#endif
        /// <summary>When using manual capture, a future timestamp after which the charge will be automatically refunded if uncaptured.</summary>
        public int? CaptureBefore { get; set; }
        /// <summary>The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CardholderName { get; set; }
#nullable restore
#else
        public string CardholderName { get; set; }
#endif
        /// <summary>Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you&apos;ve collected.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Country { get; set; }
#nullable restore
#else
        public string Country { get; set; }
#endif
        /// <summary>A high-level description of the type of cards issued in this range.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Authorization response cryptogram.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmvAuthData { get; set; }
#nullable restore
#else
        public string EmvAuthData { get; set; }
#endif
        /// <summary>Two-digit number representing the card&apos;s expiration month.</summary>
        public int? ExpMonth { get; set; }
        /// <summary>Four-digit number representing the card&apos;s expiration year.</summary>
        public int? ExpYear { get; set; }
        /// <summary>Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâ€™ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.*As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Fingerprint { get; set; }
#nullable restore
#else
        public string Fingerprint { get; set; }
#endif
        /// <summary>Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Funding { get; set; }
#nullable restore
#else
        public string Funding { get; set; }
#endif
        /// <summary>ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? GeneratedCard { get; set; }
#nullable restore
#else
        public string GeneratedCard { get; set; }
#endif
        /// <summary>Whether this [PaymentIntent](https://stripe.com/docs/api/payment_intents) is eligible for incremental authorizations. Request support using [request_incremental_authorization_support](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-payment_method_options-card_present-request_incremental_authorization_support).</summary>
        public bool? IncrementalAuthorizationSupported { get; set; }
        /// <summary>The name of the card&apos;s issuing bank.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Issuer { get; set; }
#nullable restore
#else
        public string Issuer { get; set; }
#endif
        /// <summary>The last four digits of the card.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Last4 { get; set; }
#nullable restore
#else
        public string Last4 { get; set; }
#endif
        /// <summary>Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Network { get; set; }
#nullable restore
#else
        public string Network { get; set; }
#endif
        /// <summary>This is used by the financial networks to identify a transaction. Visa calls this the Transaction ID, Mastercard calls this the Trace ID, and American Express calls this the Acquirer Reference Data. This value will be present if it is returned by the financial network in the authorization response, and null otherwise.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NetworkTransactionId { get; set; }
#nullable restore
#else
        public string NetworkTransactionId { get; set; }
#endif
        /// <summary>Details about payments collected offline.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_present_offline? Offline { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_present_offline Offline { get; set; }
#endif
        /// <summary>Defines whether the authorized amount can be over-captured or not</summary>
        public bool? OvercaptureSupported { get; set; }
        /// <summary>The languages that the issuing bank recommends using for localizing any customer-facing text, as read from the card. Referenced from EMV tag 5F2D, data encoded on the card&apos;s chip.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? PreferredLocales { get; set; }
#nullable restore
#else
        public List<string> PreferredLocales { get; set; }
#endif
        /// <summary>How card details were read in this transaction.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_present_read_method? ReadMethod { get; set; }
        /// <summary>A collection of fields required to be displayed on receipts. Only required for EMV transactions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_present_receipt? Receipt { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_present_receipt Receipt { get; set; }
#endif
        /// <summary>The wallet property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_private_payment_methods_card_present_common_wallet? Wallet { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_private_payment_methods_card_present_common_wallet Wallet { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_present"/> and sets the default values.
        /// </summary>
        public Payment_method_details_card_present()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_present"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_present CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_present();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount_authorized", n => { AmountAuthorized = n.GetIntValue(); } },
                { "brand", n => { Brand = n.GetStringValue(); } },
                { "brand_product", n => { BrandProduct = n.GetStringValue(); } },
                { "capture_before", n => { CaptureBefore = n.GetIntValue(); } },
                { "cardholder_name", n => { CardholderName = n.GetStringValue(); } },
                { "country", n => { Country = n.GetStringValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "emv_auth_data", n => { EmvAuthData = n.GetStringValue(); } },
                { "exp_month", n => { ExpMonth = n.GetIntValue(); } },
                { "exp_year", n => { ExpYear = n.GetIntValue(); } },
                { "fingerprint", n => { Fingerprint = n.GetStringValue(); } },
                { "funding", n => { Funding = n.GetStringValue(); } },
                { "generated_card", n => { GeneratedCard = n.GetStringValue(); } },
                { "incremental_authorization_supported", n => { IncrementalAuthorizationSupported = n.GetBoolValue(); } },
                { "issuer", n => { Issuer = n.GetStringValue(); } },
                { "last4", n => { Last4 = n.GetStringValue(); } },
                { "network", n => { Network = n.GetStringValue(); } },
                { "network_transaction_id", n => { NetworkTransactionId = n.GetStringValue(); } },
                { "offline", n => { Offline = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_present_offline>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_present_offline.CreateFromDiscriminatorValue); } },
                { "overcapture_supported", n => { OvercaptureSupported = n.GetBoolValue(); } },
                { "preferred_locales", n => { PreferredLocales = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "read_method", n => { ReadMethod = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_present_read_method>(); } },
                { "receipt", n => { Receipt = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_present_receipt>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_present_receipt.CreateFromDiscriminatorValue); } },
                { "wallet", n => { Wallet = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_private_payment_methods_card_present_common_wallet>(global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_private_payment_methods_card_present_common_wallet.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("amount_authorized", AmountAuthorized);
            writer.WriteStringValue("brand", Brand);
            writer.WriteStringValue("brand_product", BrandProduct);
            writer.WriteIntValue("capture_before", CaptureBefore);
            writer.WriteStringValue("cardholder_name", CardholderName);
            writer.WriteStringValue("country", Country);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("emv_auth_data", EmvAuthData);
            writer.WriteIntValue("exp_month", ExpMonth);
            writer.WriteIntValue("exp_year", ExpYear);
            writer.WriteStringValue("fingerprint", Fingerprint);
            writer.WriteStringValue("funding", Funding);
            writer.WriteStringValue("generated_card", GeneratedCard);
            writer.WriteBoolValue("incremental_authorization_supported", IncrementalAuthorizationSupported);
            writer.WriteStringValue("issuer", Issuer);
            writer.WriteStringValue("last4", Last4);
            writer.WriteStringValue("network", Network);
            writer.WriteStringValue("network_transaction_id", NetworkTransactionId);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_present_offline>("offline", Offline);
            writer.WriteBoolValue("overcapture_supported", OvercaptureSupported);
            writer.WriteCollectionOfPrimitiveValues<string>("preferred_locales", PreferredLocales);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_present_read_method>("read_method", ReadMethod);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method_details_card_present_receipt>("receipt", Receipt);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_flows_private_payment_methods_card_present_common_wallet>("wallet", Wallet);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
