// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Soenneker.Stripe.OpenApiClient.Models.Test_helpers;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    /// <summary>
    /// Subscriptions allow you to charge a customer on a recurring basis.Related guide: [Creating subscriptions](https://stripe.com/docs/billing/subscriptions/creating)
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Subscription : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>ID of the Connect Application that created the subscription.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_application? Application { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_application Application { get; set; }
#endif
        /// <summary>A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner&apos;s Stripe account.</summary>
        public double? ApplicationFeePercent { get; set; }
        /// <summary>The automatic_tax property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription_automatic_tax? AutomaticTax { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription_automatic_tax AutomaticTax { get; set; }
#endif
        /// <summary>The reference point that aligns future [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle) dates. It sets the day of week for `week` intervals, the day of month for `month` and `year` intervals, and the month of year for `year` intervals. The timestamp is in UTC format.</summary>
        public int? BillingCycleAnchor { get; set; }
        /// <summary>The fixed values used to calculate the `billing_cycle_anchor`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscriptions_resource_billing_cycle_anchor_config? BillingCycleAnchorConfig { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscriptions_resource_billing_cycle_anchor_config BillingCycleAnchorConfig { get; set; }
#endif
        /// <summary>The billing mode of the subscription.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscriptions_resource_billing_mode? BillingMode { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscriptions_resource_billing_mode BillingMode { get; set; }
#endif
        /// <summary>Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription_billing_thresholds? BillingThresholds { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription_billing_thresholds BillingThresholds { get; set; }
#endif
        /// <summary>A date in the future at which the subscription will automatically get canceled</summary>
        public int? CancelAt { get; set; }
        /// <summary>Whether this subscription will (if `status=active`) or did (if `status=canceled`) cancel at the end of the current billing period.</summary>
        public bool? CancelAtPeriodEnd { get; set; }
        /// <summary>If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will reflect the time of the most recent update request, not the end of the subscription period when the subscription is automatically moved to a canceled state.</summary>
        public int? CanceledAt { get; set; }
        /// <summary>Details about why this subscription was cancelled</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Cancellation_details? CancellationDetails { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Cancellation_details CancellationDetails { get; set; }
#endif
        /// <summary>Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription_collection_method? CollectionMethod { get; set; }
        /// <summary>Time at which the object was created. Measured in seconds since the Unix epoch.</summary>
        public int? Created { get; set; }
        /// <summary>Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>ID of the customer who owns the subscription.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_customer? Customer { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_customer Customer { get; set; }
#endif
        /// <summary>Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `collection_method=charge_automatically`.</summary>
        public int? DaysUntilDue { get; set; }
        /// <summary>ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer&apos;s [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_default_payment_method? DefaultPaymentMethod { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_default_payment_method DefaultPaymentMethod { get; set; }
#endif
        /// <summary>ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer&apos;s [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_default_source? DefaultSource { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_default_source DefaultSource { get; set; }
#endif
        /// <summary>The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate>? DefaultTaxRates { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate> DefaultTaxRates { get; set; }
#endif
        /// <summary>The subscription&apos;s description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The discounts applied to the subscription. Subscription item discounts are applied before subscription discounts. Use `expand[]=discounts` to expand each discount.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Discounts { get; set; }
#nullable restore
#else
        public List<string> Discounts { get; set; }
#endif
        /// <summary>If the subscription has ended, the date the subscription ended.</summary>
        public int? EndedAt { get; set; }
        /// <summary>Unique identifier for the object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The invoice_settings property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscriptions_resource_subscription_invoice_settings? InvoiceSettings { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscriptions_resource_subscription_invoice_settings InvoiceSettings { get; set; }
#endif
        /// <summary>List of subscription items, each with an attached price.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription_items? Items { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription_items Items { get; set; }
#endif
        /// <summary>The most recent invoice this subscription has generated.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_latest_invoice? LatestInvoice { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_latest_invoice LatestInvoice { get; set; }
#endif
        /// <summary>Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.</summary>
        public bool? Livemode { get; set; }
        /// <summary>Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription_metadata? Metadata { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription_metadata Metadata { get; set; }
#endif
        /// <summary>Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at `pending_invoice_item_interval`.</summary>
        public int? NextPendingInvoiceItemInvoice { get; set; }
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription_object? Object { get; set; }
        /// <summary>The account (if any) the charge was made on behalf of for charges associated with this subscription. See the [Connect documentation](https://stripe.com/docs/connect/subscriptions#on-behalf-of) for details.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_on_behalf_of? OnBehalfOf { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_on_behalf_of OnBehalfOf { get; set; }
#endif
        /// <summary>If specified, payment collection for this subscription will be paused. Note that the subscription status will be unchanged and will not be updated to `paused`. Learn more about [pausing collection](https://stripe.com/docs/billing/subscriptions/pause-payment).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscriptions_resource_pause_collection? PauseCollection { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscriptions_resource_pause_collection PauseCollection { get; set; }
#endif
        /// <summary>Payment settings passed on to invoices created by the subscription.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscriptions_resource_payment_settings? PaymentSettings { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscriptions_resource_payment_settings PaymentSettings { get; set; }
#endif
        /// <summary>Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription_pending_invoice_item_interval? PendingInvoiceItemInterval { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription_pending_invoice_item_interval PendingInvoiceItemInterval { get; set; }
#endif
        /// <summary>You can use this [SetupIntent](https://stripe.com/docs/api/setup_intents) to collect user authentication when creating a subscription without immediate payment or updating a subscription&apos;s payment method, allowing you to optimize for off-session payments. Learn more in the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication#scenario-2).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_pending_setup_intent? PendingSetupIntent { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_pending_setup_intent PendingSetupIntent { get; set; }
#endif
        /// <summary>If specified, [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates) that will be applied to the subscription once the `latest_invoice` has been paid.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscriptions_resource_pending_update? PendingUpdate { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscriptions_resource_pending_update PendingUpdate { get; set; }
#endif
        /// <summary>The schedule attached to the subscription</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_schedule? Schedule { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_schedule Schedule { get; set; }
#endif
        /// <summary>Date when the subscription was first created. The date might differ from the `created` date due to backdating.</summary>
        public int? StartDate { get; set; }
        /// <summary>Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, `unpaid`, or `paused`. For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this status can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` status. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal status, the open invoice will be voided and no further invoices will be generated. A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over. A subscription can only enter a `paused` status [when a trial ends without a payment method](https://stripe.com/docs/billing/subscriptions/trials#create-free-trials-without-payment). A `paused` subscription doesn&apos;t generate invoices and can be resumed after your customer adds their payment method. The `paused` status is different from [pausing collection](https://stripe.com/docs/billing/subscriptions/pause-payment), which still generates invoices and leaves the subscription&apos;s status unchanged. If subscription `collection_method=charge_automatically`, it becomes `past_due` when payment is required but cannot be paid (due to failed payment or awaiting additional user actions). Once Stripe has exhausted all payment retry attempts, the subscription will become `canceled` or `unpaid` (depending on your subscriptions settings). If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription_status? Status { get; set; }
        /// <summary>ID of the test clock this subscription belongs to.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_test_clock? TestClock { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_test_clock TestClock { get; set; }
#endif
        /// <summary>The account (if any) the subscription&apos;s payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription&apos;s invoices.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription_transfer_data? TransferData { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscription_transfer_data TransferData { get; set; }
#endif
        /// <summary>If the subscription has a trial, the end of that trial.</summary>
        public int? TrialEnd { get; set; }
        /// <summary>Settings related to subscription trials.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscriptions_trials_resource_trial_settings? TrialSettings { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Subscriptions_trials_resource_trial_settings TrialSettings { get; set; }
#endif
        /// <summary>If the subscription has a trial, the beginning of that trial.</summary>
        public int? TrialStart { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Subscription"/> and sets the default values.
        /// </summary>
        public Subscription()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Subscription"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Subscription CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Subscription();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "application", n => { Application = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_application>(global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_application.CreateFromDiscriminatorValue); } },
                { "application_fee_percent", n => { ApplicationFeePercent = n.GetDoubleValue(); } },
                { "automatic_tax", n => { AutomaticTax = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_automatic_tax>(global::Soenneker.Stripe.OpenApiClient.Models.Subscription_automatic_tax.CreateFromDiscriminatorValue); } },
                { "billing_cycle_anchor", n => { BillingCycleAnchor = n.GetIntValue(); } },
                { "billing_cycle_anchor_config", n => { BillingCycleAnchorConfig = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscriptions_resource_billing_cycle_anchor_config>(global::Soenneker.Stripe.OpenApiClient.Models.Subscriptions_resource_billing_cycle_anchor_config.CreateFromDiscriminatorValue); } },
                { "billing_mode", n => { BillingMode = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscriptions_resource_billing_mode>(global::Soenneker.Stripe.OpenApiClient.Models.Subscriptions_resource_billing_mode.CreateFromDiscriminatorValue); } },
                { "billing_thresholds", n => { BillingThresholds = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_billing_thresholds>(global::Soenneker.Stripe.OpenApiClient.Models.Subscription_billing_thresholds.CreateFromDiscriminatorValue); } },
                { "cancel_at", n => { CancelAt = n.GetIntValue(); } },
                { "cancel_at_period_end", n => { CancelAtPeriodEnd = n.GetBoolValue(); } },
                { "canceled_at", n => { CanceledAt = n.GetIntValue(); } },
                { "cancellation_details", n => { CancellationDetails = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Cancellation_details>(global::Soenneker.Stripe.OpenApiClient.Models.Cancellation_details.CreateFromDiscriminatorValue); } },
                { "collection_method", n => { CollectionMethod = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_collection_method>(); } },
                { "created", n => { Created = n.GetIntValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "customer", n => { Customer = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_customer>(global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_customer.CreateFromDiscriminatorValue); } },
                { "days_until_due", n => { DaysUntilDue = n.GetIntValue(); } },
                { "default_payment_method", n => { DefaultPaymentMethod = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_default_payment_method>(global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_default_payment_method.CreateFromDiscriminatorValue); } },
                { "default_source", n => { DefaultSource = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_default_source>(global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_default_source.CreateFromDiscriminatorValue); } },
                { "default_tax_rates", n => { DefaultTaxRates = n.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate>(global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate.CreateFromDiscriminatorValue)?.AsList(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "discounts", n => { Discounts = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "ended_at", n => { EndedAt = n.GetIntValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "invoice_settings", n => { InvoiceSettings = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscriptions_resource_subscription_invoice_settings>(global::Soenneker.Stripe.OpenApiClient.Models.Subscriptions_resource_subscription_invoice_settings.CreateFromDiscriminatorValue); } },
                { "items", n => { Items = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_items>(global::Soenneker.Stripe.OpenApiClient.Models.Subscription_items.CreateFromDiscriminatorValue); } },
                { "latest_invoice", n => { LatestInvoice = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_latest_invoice>(global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_latest_invoice.CreateFromDiscriminatorValue); } },
                { "livemode", n => { Livemode = n.GetBoolValue(); } },
                { "metadata", n => { Metadata = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_metadata>(global::Soenneker.Stripe.OpenApiClient.Models.Subscription_metadata.CreateFromDiscriminatorValue); } },
                { "next_pending_invoice_item_invoice", n => { NextPendingInvoiceItemInvoice = n.GetIntValue(); } },
                { "object", n => { Object = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_object>(); } },
                { "on_behalf_of", n => { OnBehalfOf = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_on_behalf_of>(global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_on_behalf_of.CreateFromDiscriminatorValue); } },
                { "pause_collection", n => { PauseCollection = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscriptions_resource_pause_collection>(global::Soenneker.Stripe.OpenApiClient.Models.Subscriptions_resource_pause_collection.CreateFromDiscriminatorValue); } },
                { "payment_settings", n => { PaymentSettings = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscriptions_resource_payment_settings>(global::Soenneker.Stripe.OpenApiClient.Models.Subscriptions_resource_payment_settings.CreateFromDiscriminatorValue); } },
                { "pending_invoice_item_interval", n => { PendingInvoiceItemInterval = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_pending_invoice_item_interval>(global::Soenneker.Stripe.OpenApiClient.Models.Subscription_pending_invoice_item_interval.CreateFromDiscriminatorValue); } },
                { "pending_setup_intent", n => { PendingSetupIntent = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_pending_setup_intent>(global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_pending_setup_intent.CreateFromDiscriminatorValue); } },
                { "pending_update", n => { PendingUpdate = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscriptions_resource_pending_update>(global::Soenneker.Stripe.OpenApiClient.Models.Subscriptions_resource_pending_update.CreateFromDiscriminatorValue); } },
                { "schedule", n => { Schedule = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_schedule>(global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_schedule.CreateFromDiscriminatorValue); } },
                { "start_date", n => { StartDate = n.GetIntValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_status>(); } },
                { "test_clock", n => { TestClock = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_test_clock>(global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_test_clock.CreateFromDiscriminatorValue); } },
                { "transfer_data", n => { TransferData = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_transfer_data>(global::Soenneker.Stripe.OpenApiClient.Models.Subscription_transfer_data.CreateFromDiscriminatorValue); } },
                { "trial_end", n => { TrialEnd = n.GetIntValue(); } },
                { "trial_settings", n => { TrialSettings = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscriptions_trials_resource_trial_settings>(global::Soenneker.Stripe.OpenApiClient.Models.Subscriptions_trials_resource_trial_settings.CreateFromDiscriminatorValue); } },
                { "trial_start", n => { TrialStart = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_application>("application", Application);
            writer.WriteDoubleValue("application_fee_percent", ApplicationFeePercent);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_automatic_tax>("automatic_tax", AutomaticTax);
            writer.WriteIntValue("billing_cycle_anchor", BillingCycleAnchor);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscriptions_resource_billing_cycle_anchor_config>("billing_cycle_anchor_config", BillingCycleAnchorConfig);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscriptions_resource_billing_mode>("billing_mode", BillingMode);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_billing_thresholds>("billing_thresholds", BillingThresholds);
            writer.WriteIntValue("cancel_at", CancelAt);
            writer.WriteBoolValue("cancel_at_period_end", CancelAtPeriodEnd);
            writer.WriteIntValue("canceled_at", CanceledAt);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Cancellation_details>("cancellation_details", CancellationDetails);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_collection_method>("collection_method", CollectionMethod);
            writer.WriteIntValue("created", Created);
            writer.WriteStringValue("currency", Currency);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_customer>("customer", Customer);
            writer.WriteIntValue("days_until_due", DaysUntilDue);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_default_payment_method>("default_payment_method", DefaultPaymentMethod);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_default_source>("default_source", DefaultSource);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Tax_rate>("default_tax_rates", DefaultTaxRates);
            writer.WriteStringValue("description", Description);
            writer.WriteCollectionOfPrimitiveValues<string>("discounts", Discounts);
            writer.WriteIntValue("ended_at", EndedAt);
            writer.WriteStringValue("id", Id);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscriptions_resource_subscription_invoice_settings>("invoice_settings", InvoiceSettings);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_items>("items", Items);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_latest_invoice>("latest_invoice", LatestInvoice);
            writer.WriteBoolValue("livemode", Livemode);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_metadata>("metadata", Metadata);
            writer.WriteIntValue("next_pending_invoice_item_invoice", NextPendingInvoiceItemInvoice);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_object>("object", Object);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_on_behalf_of>("on_behalf_of", OnBehalfOf);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscriptions_resource_pause_collection>("pause_collection", PauseCollection);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscriptions_resource_payment_settings>("payment_settings", PaymentSettings);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_pending_invoice_item_interval>("pending_invoice_item_interval", PendingInvoiceItemInterval);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_pending_setup_intent>("pending_setup_intent", PendingSetupIntent);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscriptions_resource_pending_update>("pending_update", PendingUpdate);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_schedule>("schedule", Schedule);
            writer.WriteIntValue("start_date", StartDate);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_status>("status", Status);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_test_clock>("test_clock", TestClock);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_transfer_data>("transfer_data", TransferData);
            writer.WriteIntValue("trial_end", TrialEnd);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscriptions_trials_resource_trial_settings>("trial_settings", TrialSettings);
            writer.WriteIntValue("trial_start", TrialStart);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Application"/>, <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Deleted_application"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Subscription_application : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Application"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Application? Application { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Application Application { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Deleted_application"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Deleted_application? DeletedApplication { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Deleted_application DeletedApplication { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_application"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_application CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_application();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.Application = new global::Soenneker.Stripe.OpenApiClient.Models.Application();
                    result.DeletedApplication = new global::Soenneker.Stripe.OpenApiClient.Models.Deleted_application();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(Application != null || DeletedApplication != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(Application, DeletedApplication);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Application>(null, Application, DeletedApplication);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Customer"/>, <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Deleted_customer"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Subscription_customer : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Customer"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Customer? Customer { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Customer Customer { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Deleted_customer"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Deleted_customer? DeletedCustomer { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Deleted_customer DeletedCustomer { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_customer"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_customer CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_customer();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.Customer = new global::Soenneker.Stripe.OpenApiClient.Models.Customer();
                    result.DeletedCustomer = new global::Soenneker.Stripe.OpenApiClient.Models.Deleted_customer();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(Customer != null || DeletedCustomer != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(Customer, DeletedCustomer);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Customer>(null, Customer, DeletedCustomer);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Payment_method"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Subscription_default_payment_method : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Payment_method"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method? PaymentMethod { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Payment_method PaymentMethod { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_default_payment_method"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_default_payment_method CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_default_payment_method();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.PaymentMethod = new global::Soenneker.Stripe.OpenApiClient.Models.Payment_method();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(PaymentMethod != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(PaymentMethod);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Payment_method>(null, PaymentMethod);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Bank_account"/>, <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Card"/>, <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Source"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Subscription_default_source : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Bank_account"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Bank_account? BankAccount { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Bank_account BankAccount { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Card"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Card? Card { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Card Card { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Source"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Source? Source { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Source Source { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_default_source"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_default_source CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_default_source();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.BankAccount = new global::Soenneker.Stripe.OpenApiClient.Models.Bank_account();
                    result.Card = new global::Soenneker.Stripe.OpenApiClient.Models.Card();
                    result.Source = new global::Soenneker.Stripe.OpenApiClient.Models.Source();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(BankAccount != null || Card != null || Source != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(BankAccount, Card, Source);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Bank_account>(null, BankAccount, Card, Source);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Invoice"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Subscription_latest_invoice : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Invoice"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Invoice? Invoice { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Invoice Invoice { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_latest_invoice"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_latest_invoice CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_latest_invoice();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.Invoice = new global::Soenneker.Stripe.OpenApiClient.Models.Invoice();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(Invoice != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(Invoice);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Invoice>(null, Invoice);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Account"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Subscription_on_behalf_of : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Account"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Account? Account { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Account Account { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_on_behalf_of"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_on_behalf_of CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_on_behalf_of();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.Account = new global::Soenneker.Stripe.OpenApiClient.Models.Account();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(Account != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(Account);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Account>(null, Account);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Setup_intent"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Subscription_pending_setup_intent : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Setup_intent"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Setup_intent? SetupIntent { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Setup_intent SetupIntent { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_pending_setup_intent"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_pending_setup_intent CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_pending_setup_intent();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.SetupIntent = new global::Soenneker.Stripe.OpenApiClient.Models.Setup_intent();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(SetupIntent != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(SetupIntent);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Setup_intent>(null, SetupIntent);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Subscription_schedule : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule? SubscriptionSchedule { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule SubscriptionSchedule { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_schedule"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_schedule CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_schedule();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.SubscriptionSchedule = new global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(SubscriptionSchedule != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(SubscriptionSchedule);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Subscription_schedule>(null, SubscriptionSchedule);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Test_helpers.Test_clock"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Subscription_test_clock : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Test_helpers.Test_clock"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Test_helpers.Test_clock? TestClock { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Test_helpers.Test_clock TestClock { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_test_clock"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_test_clock CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Subscription.Subscription_test_clock();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.TestClock = new global::Soenneker.Stripe.OpenApiClient.Models.Test_helpers.Test_clock();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(TestClock != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(TestClock);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Test_helpers.Test_clock>(null, TestClock);
                }
            }
        }
    }
}
#pragma warning restore CS0618
