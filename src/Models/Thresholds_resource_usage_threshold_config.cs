// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Soenneker.Stripe.OpenApiClient.Models.Billing;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    /// <summary>
    /// The usage threshold alert configuration enables setting up alerts for when a certain usage threshold on a specific meter is crossed.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Thresholds_resource_usage_threshold_config : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The filters allow limiting the scope of this usage alert. You can only specify up to one filter at this time.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Thresholds_resource_usage_alert_filter>? Filters { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Thresholds_resource_usage_alert_filter> Filters { get; set; }
#endif
        /// <summary>The value at which this alert will trigger.</summary>
        public int? Gte { get; set; }
        /// <summary>The [Billing Meter](/api/billing/meter) ID whose usage is monitored.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Thresholds_resource_usage_threshold_config.Thresholds_resource_usage_threshold_config_meter? Meter { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Thresholds_resource_usage_threshold_config.Thresholds_resource_usage_threshold_config_meter Meter { get; set; }
#endif
        /// <summary>Defines how the alert will behave.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Thresholds_resource_usage_threshold_config_recurrence? Recurrence { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Thresholds_resource_usage_threshold_config"/> and sets the default values.
        /// </summary>
        public Thresholds_resource_usage_threshold_config()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Thresholds_resource_usage_threshold_config"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Thresholds_resource_usage_threshold_config CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Thresholds_resource_usage_threshold_config();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "filters", n => { Filters = n.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Thresholds_resource_usage_alert_filter>(global::Soenneker.Stripe.OpenApiClient.Models.Thresholds_resource_usage_alert_filter.CreateFromDiscriminatorValue)?.AsList(); } },
                { "gte", n => { Gte = n.GetIntValue(); } },
                { "meter", n => { Meter = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Thresholds_resource_usage_threshold_config.Thresholds_resource_usage_threshold_config_meter>(global::Soenneker.Stripe.OpenApiClient.Models.Thresholds_resource_usage_threshold_config.Thresholds_resource_usage_threshold_config_meter.CreateFromDiscriminatorValue); } },
                { "recurrence", n => { Recurrence = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Thresholds_resource_usage_threshold_config_recurrence>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.Models.Thresholds_resource_usage_alert_filter>("filters", Filters);
            writer.WriteIntValue("gte", Gte);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Thresholds_resource_usage_threshold_config.Thresholds_resource_usage_threshold_config_meter>("meter", Meter);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Thresholds_resource_usage_threshold_config_recurrence>("recurrence", Recurrence);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Billing.Meter"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Thresholds_resource_usage_threshold_config_meter : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Billing.Meter"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.Models.Billing.Meter? Meter { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.Models.Billing.Meter Meter { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Thresholds_resource_usage_threshold_config.Thresholds_resource_usage_threshold_config_meter"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.Models.Thresholds_resource_usage_threshold_config.Thresholds_resource_usage_threshold_config_meter CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.Models.Thresholds_resource_usage_threshold_config.Thresholds_resource_usage_threshold_config_meter();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.Meter = new global::Soenneker.Stripe.OpenApiClient.Models.Billing.Meter();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(Meter != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(Meter);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Billing.Meter>(null, Meter);
                }
            }
        }
    }
}
#pragma warning restore CS0618
