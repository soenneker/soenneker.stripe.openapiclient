// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    /// <summary>
    /// Tokenization is the process Stripe uses to collect sensitive card or bankaccount details, or personally identifiable information (PII), directly fromyour customers in a secure manner. A token representing this information isreturned to your server to use. Use our[recommended payments integrations](https://stripe.com/docs/payments) to perform this processon the client-side. This guarantees that no sensitive card data touches your server,and allows your integration to operate in a PCI-compliant way.If you can&apos;t use client-side tokenization, you can also create tokens usingthe API with either your publishable or secret API key. Ifyour integration uses this method, you&apos;re responsible for any PCI compliancethat it might require, and you must keep your secret API key safe. Unlike withclient-side tokenization, your customer&apos;s information isn&apos;t sent directly toStripe, so we can&apos;t determine how it&apos;s handled or stored.You can&apos;t store or use tokens more than once. To store card or bank accountinformation for later use, create [Customer](https://stripe.com/docs/api#customers)objects or [External accounts](/api#external_accounts).[Radar](https://stripe.com/docs/radar), our integrated solution for automatic fraud protection,performs best with integrations that use client-side tokenization.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Token : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>These bank accounts are payment methods on `Customer` objects.On the other hand [External Accounts](/api#external_accounts) are transferdestinations on `Account` objects for connected accounts.They can be bank accounts or debit cards as well, and are documented in the links above.Related guide: [Bank debits and transfers](/payments/bank-debits-transfers)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Bank_account? BankAccount { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Bank_account BankAccount { get; set; }
#endif
        /// <summary>You can store multiple cards on a customer in order to charge the customerlater. You can also store multiple debit cards on a recipient in order totransfer to those cards later.Related guide: [Card payments with Sources](https://stripe.com/docs/sources/cards)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Card? Card { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Card Card { get; set; }
#endif
        /// <summary>IP address of the client that generates the token.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientIp { get; set; }
#nullable restore
#else
        public string ClientIp { get; set; }
#endif
        /// <summary>Time at which the object was created. Measured in seconds since the Unix epoch.</summary>
        public int? Created { get; set; }
        /// <summary>Unique identifier for the object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.</summary>
        public bool? Livemode { get; set; }
        /// <summary>String representing the object&apos;s type. Objects of the same type share the same value.</summary>
        public global::Soenneker.Stripe.OpenApiClient.Models.Token_object? Object { get; set; }
        /// <summary>Type of the token: `account`, `bank_account`, `card`, or `pii`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>Determines if you have already used this token (you can only use tokens once).</summary>
        public bool? Used { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Token"/> and sets the default values.
        /// </summary>
        public Token()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Token"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Token CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Token();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "bank_account", n => { BankAccount = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Bank_account>(global::Soenneker.Stripe.OpenApiClient.Models.Bank_account.CreateFromDiscriminatorValue); } },
                { "card", n => { Card = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Card>(global::Soenneker.Stripe.OpenApiClient.Models.Card.CreateFromDiscriminatorValue); } },
                { "client_ip", n => { ClientIp = n.GetStringValue(); } },
                { "created", n => { Created = n.GetIntValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "livemode", n => { Livemode = n.GetBoolValue(); } },
                { "object", n => { Object = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Token_object>(); } },
                { "type", n => { Type = n.GetStringValue(); } },
                { "used", n => { Used = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Bank_account>("bank_account", BankAccount);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Card>("card", Card);
            writer.WriteStringValue("client_ip", ClientIp);
            writer.WriteIntValue("created", Created);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("livemode", Livemode);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.Models.Token_object>("object", Object);
            writer.WriteStringValue("type", Type);
            writer.WriteBoolValue("used", Used);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
