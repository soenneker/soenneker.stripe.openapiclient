// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Transfer_schedule : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The number of days charges for the account will be held before being paid out.</summary>
        public int? DelayDays { get; set; }
        /// <summary>How frequently funds will be paid out. One of `manual` (payouts only created via API call), `daily`, `weekly`, or `monthly`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Interval { get; set; }
#nullable restore
#else
        public string Interval { get; set; }
#endif
        /// <summary>The day of the month funds will be paid out. Only shown if `interval` is monthly. Payouts scheduled between the 29th and 31st of the month are sent on the last day of shorter months.</summary>
        public int? MonthlyAnchor { get; set; }
        /// <summary>The days of the month funds will be paid out. Only shown if `interval` is monthly. Payouts scheduled between the 29th and 31st of the month are sent on the last day of shorter months.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? MonthlyPayoutDays { get; set; }
#nullable restore
#else
        public List<int?> MonthlyPayoutDays { get; set; }
#endif
        /// <summary>The day of the week funds will be paid out, of the style &apos;monday&apos;, &apos;tuesday&apos;, etc. Only shown if `interval` is weekly.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WeeklyAnchor { get; set; }
#nullable restore
#else
        public string WeeklyAnchor { get; set; }
#endif
        /// <summary>The days of the week when available funds are paid out, specified as an array, for example, [`monday`, `tuesday`]. Only shown if `interval` is weekly.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Transfer_schedule_weekly_payout_days?>? WeeklyPayoutDays { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.Models.Transfer_schedule_weekly_payout_days?> WeeklyPayoutDays { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Transfer_schedule"/> and sets the default values.
        /// </summary>
        public Transfer_schedule()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Transfer_schedule"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Transfer_schedule CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Transfer_schedule();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "delay_days", n => { DelayDays = n.GetIntValue(); } },
                { "interval", n => { Interval = n.GetStringValue(); } },
                { "monthly_anchor", n => { MonthlyAnchor = n.GetIntValue(); } },
                { "monthly_payout_days", n => { MonthlyPayoutDays = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "weekly_anchor", n => { WeeklyAnchor = n.GetStringValue(); } },
                { "weekly_payout_days", n => { WeeklyPayoutDays = n.GetCollectionOfEnumValues<global::Soenneker.Stripe.OpenApiClient.Models.Transfer_schedule_weekly_payout_days>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("delay_days", DelayDays);
            writer.WriteStringValue("interval", Interval);
            writer.WriteIntValue("monthly_anchor", MonthlyAnchor);
            writer.WriteCollectionOfPrimitiveValues<int?>("monthly_payout_days", MonthlyPayoutDays);
            writer.WriteStringValue("weekly_anchor", WeeklyAnchor);
            writer.WriteCollectionOfEnumValues<global::Soenneker.Stripe.OpenApiClient.Models.Transfer_schedule_weekly_payout_days>("weekly_payout_days", WeeklyPayoutDays);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
