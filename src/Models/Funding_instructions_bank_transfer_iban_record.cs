// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.Models
{
    /// <summary>
    /// Iban Records contain E.U. bank account details per the SEPA format.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Funding_instructions_bank_transfer_iban_record : IAdditionalDataHolder, IParsable
    {
        /// <summary>The account_holder_address property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Address? AccountHolderAddress { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Address AccountHolderAddress { get; set; }
#endif
        /// <summary>The name of the person or business that owns the bank account</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountHolderName { get; set; }
#nullable restore
#else
        public string AccountHolderName { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The bank_address property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.Models.Address? BankAddress { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.Models.Address BankAddress { get; set; }
#endif
        /// <summary>The BIC/SWIFT code of the account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Bic { get; set; }
#nullable restore
#else
        public string Bic { get; set; }
#endif
        /// <summary>Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Country { get; set; }
#nullable restore
#else
        public string Country { get; set; }
#endif
        /// <summary>The IBAN of the account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Iban { get; set; }
#nullable restore
#else
        public string Iban { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_iban_record"/> and sets the default values.
        /// </summary>
        public Funding_instructions_bank_transfer_iban_record()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_iban_record"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_iban_record CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.Models.Funding_instructions_bank_transfer_iban_record();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "account_holder_address", n => { AccountHolderAddress = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Address>(global::Soenneker.Stripe.OpenApiClient.Models.Address.CreateFromDiscriminatorValue); } },
                { "account_holder_name", n => { AccountHolderName = n.GetStringValue(); } },
                { "bank_address", n => { BankAddress = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Address>(global::Soenneker.Stripe.OpenApiClient.Models.Address.CreateFromDiscriminatorValue); } },
                { "bic", n => { Bic = n.GetStringValue(); } },
                { "country", n => { Country = n.GetStringValue(); } },
                { "iban", n => { Iban = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Address>("account_holder_address", AccountHolderAddress);
            writer.WriteStringValue("account_holder_name", AccountHolderName);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.Models.Address>("bank_address", BankAddress);
            writer.WriteStringValue("bic", Bic);
            writer.WriteStringValue("country", Country);
            writer.WriteStringValue("iban", Iban);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
