// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.V1.Payouts
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PayoutsPostRequestBody : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>A positive integer in cents representing how much to payout.</summary>
        public int? Amount { get; set; }
        /// <summary>Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>An arbitrary string attached to the object. Often useful for displaying to users.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The ID of a bank account or a card to send the payout to. If you don&apos;t provide a destination, we use the default external account for the specified currency.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Destination { get; set; }
#nullable restore
#else
        public string Destination { get; set; }
#endif
        /// <summary>Specifies which fields in the response should be expanded.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Expand { get; set; }
#nullable restore
#else
        public List<string> Expand { get; set; }
#endif
        /// <summary>Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Payouts.PayoutsPostRequestBody_metadata? Metadata { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Payouts.PayoutsPostRequestBody_metadata Metadata { get; set; }
#endif
        /// <summary>The method used to send this payout, which is `standard` or `instant`. We support `instant` for payouts to debit cards and bank accounts in certain countries. Learn more about [bank support for Instant Payouts](https://stripe.com/docs/payouts/instant-payouts-banks).</summary>
        public global::Soenneker.Stripe.OpenApiClient.V1.Payouts.PayoutsPostRequestBody_method? Method { get; set; }
        /// <summary>The balance type of your Stripe balance to draw this payout from. Balances for different payment sources are kept separately. You can find the amounts with the Balances API. One of `bank_account`, `card`, or `fpx`.</summary>
        public global::Soenneker.Stripe.OpenApiClient.V1.Payouts.PayoutsPostRequestBody_source_type? SourceType { get; set; }
        /// <summary>A string that displays on the recipient&apos;s bank or card statement (up to 22 characters). A `statement_descriptor` that&apos;s longer than 22 characters return an error. Most banks truncate this information and display it inconsistently. Some banks might not display it at all.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StatementDescriptor { get; set; }
#nullable restore
#else
        public string StatementDescriptor { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Payouts.PayoutsPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.V1.Payouts.PayoutsPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.V1.Payouts.PayoutsPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount", n => { Amount = n.GetIntValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "destination", n => { Destination = n.GetStringValue(); } },
                { "expand", n => { Expand = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "metadata", n => { Metadata = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Payouts.PayoutsPostRequestBody_metadata>(global::Soenneker.Stripe.OpenApiClient.V1.Payouts.PayoutsPostRequestBody_metadata.CreateFromDiscriminatorValue); } },
                { "method", n => { Method = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Payouts.PayoutsPostRequestBody_method>(); } },
                { "source_type", n => { SourceType = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Payouts.PayoutsPostRequestBody_source_type>(); } },
                { "statement_descriptor", n => { StatementDescriptor = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("amount", Amount);
            writer.WriteStringValue("currency", Currency);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("destination", Destination);
            writer.WriteCollectionOfPrimitiveValues<string>("expand", Expand);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Payouts.PayoutsPostRequestBody_metadata>("metadata", Metadata);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Payouts.PayoutsPostRequestBody_method>("method", Method);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Payouts.PayoutsPostRequestBody_source_type>("source_type", SourceType);
            writer.WriteStringValue("statement_descriptor", StatementDescriptor);
        }
    }
}
#pragma warning restore CS0618
