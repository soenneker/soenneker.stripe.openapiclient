// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.V1.Sources
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SourcesPostRequestBody : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources. Not supported for `receiver` type sources, where charge amount may not be specified until funds land.</summary>
        public int? Amount { get; set; }
        /// <summary>Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>The `Customer` to whom the original source is attached to. Must be set when the original source is not a `Source` (e.g., `Card`).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Customer { get; set; }
#nullable restore
#else
        public string Customer { get; set; }
#endif
        /// <summary>Specifies which fields in the response should be expanded.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Expand { get; set; }
#nullable restore
#else
        public List<string> Expand { get; set; }
#endif
        /// <summary>The authentication `flow` of the source to create. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`. It is generally inferred unless a type supports multiple flows.</summary>
        public global::Soenneker.Stripe.OpenApiClient.V1.Sources.SourcesPostRequestBody_flow? Flow { get; set; }
        /// <summary>Information about a mandate possibility attached to a source object (generally for bank debits) as well as its acceptance status.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Sources.SourcesPostRequestBody_mandate? Mandate { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Sources.SourcesPostRequestBody_mandate Mandate { get; set; }
#endif
        /// <summary>The metadata property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Sources.SourcesPostRequestBody_metadata? Metadata { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Sources.SourcesPostRequestBody_metadata Metadata { get; set; }
#endif
        /// <summary>The source to share.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalSource { get; set; }
#nullable restore
#else
        public string OriginalSource { get; set; }
#endif
        /// <summary>Information about the owner of the payment instrument that may be used or required by particular source types.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Sources.SourcesPostRequestBody_owner? Owner { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Sources.SourcesPostRequestBody_owner Owner { get; set; }
#endif
        /// <summary>Optional parameters for the receiver flow. Can be set only if the source is a receiver (`flow` is `receiver`).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Sources.SourcesPostRequestBody_receiver? Receiver { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Sources.SourcesPostRequestBody_receiver Receiver { get; set; }
#endif
        /// <summary>Parameters required for the redirect flow. Required if the source is authenticated by a redirect (`flow` is `redirect`).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Sources.SourcesPostRequestBody_redirect? Redirect { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Sources.SourcesPostRequestBody_redirect Redirect { get; set; }
#endif
        /// <summary>Information about the items and shipping associated with the source. Required for transactional credit (for example Klarna) sources before you can charge it.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Sources.SourcesPostRequestBody_source_order? SourceOrder { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Sources.SourcesPostRequestBody_source_order SourceOrder { get; set; }
#endif
        /// <summary>An arbitrary string to be displayed on your customer&apos;s statement. As an example, if your website is `RunClub` and the item you&apos;re charging for is a race ticket, you may want to specify a `statement_descriptor` of `RunClub 5K race ticket.` While many payment types will display this information, some may not display it at all.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StatementDescriptor { get; set; }
#nullable restore
#else
        public string StatementDescriptor { get; set; }
#endif
        /// <summary>An optional token used to create the source. When passed, token properties will override source parameters.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Token { get; set; }
#nullable restore
#else
        public string Token { get; set; }
#endif
        /// <summary>The `type` of the source to create. Required unless `customer` and `original_source` are specified (see the [Cloning card Sources](https://stripe.com/docs/sources/connect#cloning-card-sources) guide)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>The usage property</summary>
        public global::Soenneker.Stripe.OpenApiClient.V1.Sources.SourcesPostRequestBody_usage? Usage { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Sources.SourcesPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.V1.Sources.SourcesPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.V1.Sources.SourcesPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount", n => { Amount = n.GetIntValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "customer", n => { Customer = n.GetStringValue(); } },
                { "expand", n => { Expand = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "flow", n => { Flow = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Sources.SourcesPostRequestBody_flow>(); } },
                { "mandate", n => { Mandate = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Sources.SourcesPostRequestBody_mandate>(global::Soenneker.Stripe.OpenApiClient.V1.Sources.SourcesPostRequestBody_mandate.CreateFromDiscriminatorValue); } },
                { "metadata", n => { Metadata = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Sources.SourcesPostRequestBody_metadata>(global::Soenneker.Stripe.OpenApiClient.V1.Sources.SourcesPostRequestBody_metadata.CreateFromDiscriminatorValue); } },
                { "original_source", n => { OriginalSource = n.GetStringValue(); } },
                { "owner", n => { Owner = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Sources.SourcesPostRequestBody_owner>(global::Soenneker.Stripe.OpenApiClient.V1.Sources.SourcesPostRequestBody_owner.CreateFromDiscriminatorValue); } },
                { "receiver", n => { Receiver = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Sources.SourcesPostRequestBody_receiver>(global::Soenneker.Stripe.OpenApiClient.V1.Sources.SourcesPostRequestBody_receiver.CreateFromDiscriminatorValue); } },
                { "redirect", n => { Redirect = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Sources.SourcesPostRequestBody_redirect>(global::Soenneker.Stripe.OpenApiClient.V1.Sources.SourcesPostRequestBody_redirect.CreateFromDiscriminatorValue); } },
                { "source_order", n => { SourceOrder = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Sources.SourcesPostRequestBody_source_order>(global::Soenneker.Stripe.OpenApiClient.V1.Sources.SourcesPostRequestBody_source_order.CreateFromDiscriminatorValue); } },
                { "statement_descriptor", n => { StatementDescriptor = n.GetStringValue(); } },
                { "token", n => { Token = n.GetStringValue(); } },
                { "type", n => { Type = n.GetStringValue(); } },
                { "usage", n => { Usage = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Sources.SourcesPostRequestBody_usage>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("amount", Amount);
            writer.WriteStringValue("currency", Currency);
            writer.WriteStringValue("customer", Customer);
            writer.WriteCollectionOfPrimitiveValues<string>("expand", Expand);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Sources.SourcesPostRequestBody_flow>("flow", Flow);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Sources.SourcesPostRequestBody_mandate>("mandate", Mandate);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Sources.SourcesPostRequestBody_metadata>("metadata", Metadata);
            writer.WriteStringValue("original_source", OriginalSource);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Sources.SourcesPostRequestBody_owner>("owner", Owner);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Sources.SourcesPostRequestBody_receiver>("receiver", Receiver);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Sources.SourcesPostRequestBody_redirect>("redirect", Redirect);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Sources.SourcesPostRequestBody_source_order>("source_order", SourceOrder);
            writer.WriteStringValue("statement_descriptor", StatementDescriptor);
            writer.WriteStringValue("token", Token);
            writer.WriteStringValue("type", Type);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Sources.SourcesPostRequestBody_usage>("usage", Usage);
        }
    }
}
#pragma warning restore CS0618
