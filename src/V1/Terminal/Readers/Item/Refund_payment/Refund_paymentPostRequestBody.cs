// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.V1.Terminal.Readers.Item.Refund_payment
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Refund_paymentPostRequestBody : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>A positive integer in __cents__ representing how much of this charge to refund.</summary>
        public int? Amount { get; set; }
        /// <summary>ID of the Charge to refund.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Charge { get; set; }
#nullable restore
#else
        public string Charge { get; set; }
#endif
        /// <summary>Specifies which fields in the response should be expanded.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Expand { get; set; }
#nullable restore
#else
        public List<string> Expand { get; set; }
#endif
        /// <summary>Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Terminal.Readers.Item.Refund_payment.Refund_paymentPostRequestBody_metadata? Metadata { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Terminal.Readers.Item.Refund_payment.Refund_paymentPostRequestBody_metadata Metadata { get; set; }
#endif
        /// <summary>ID of the PaymentIntent to refund.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PaymentIntent { get; set; }
#nullable restore
#else
        public string PaymentIntent { get; set; }
#endif
        /// <summary>Boolean indicating whether the application fee should be refunded when refunding this charge. If a full charge refund is given, the full application fee will be refunded. Otherwise, the application fee will be refunded in an amount proportional to the amount of the charge refunded. An application fee can be refunded only by the application that created the charge.</summary>
        public bool? RefundApplicationFee { get; set; }
        /// <summary>Configuration overrides</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Terminal.Readers.Item.Refund_payment.Refund_paymentPostRequestBody_refund_payment_config? RefundPaymentConfig { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Terminal.Readers.Item.Refund_payment.Refund_paymentPostRequestBody_refund_payment_config RefundPaymentConfig { get; set; }
#endif
        /// <summary>Boolean indicating whether the transfer should be reversed when refunding this charge. The transfer will be reversed proportionally to the amount being refunded (either the entire or partial amount). A transfer can be reversed only by the application that created the charge.</summary>
        public bool? ReverseTransfer { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Terminal.Readers.Item.Refund_payment.Refund_paymentPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.V1.Terminal.Readers.Item.Refund_payment.Refund_paymentPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.V1.Terminal.Readers.Item.Refund_payment.Refund_paymentPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount", n => { Amount = n.GetIntValue(); } },
                { "charge", n => { Charge = n.GetStringValue(); } },
                { "expand", n => { Expand = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "metadata", n => { Metadata = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Terminal.Readers.Item.Refund_payment.Refund_paymentPostRequestBody_metadata>(global::Soenneker.Stripe.OpenApiClient.V1.Terminal.Readers.Item.Refund_payment.Refund_paymentPostRequestBody_metadata.CreateFromDiscriminatorValue); } },
                { "payment_intent", n => { PaymentIntent = n.GetStringValue(); } },
                { "refund_application_fee", n => { RefundApplicationFee = n.GetBoolValue(); } },
                { "refund_payment_config", n => { RefundPaymentConfig = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Terminal.Readers.Item.Refund_payment.Refund_paymentPostRequestBody_refund_payment_config>(global::Soenneker.Stripe.OpenApiClient.V1.Terminal.Readers.Item.Refund_payment.Refund_paymentPostRequestBody_refund_payment_config.CreateFromDiscriminatorValue); } },
                { "reverse_transfer", n => { ReverseTransfer = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("amount", Amount);
            writer.WriteStringValue("charge", Charge);
            writer.WriteCollectionOfPrimitiveValues<string>("expand", Expand);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Terminal.Readers.Item.Refund_payment.Refund_paymentPostRequestBody_metadata>("metadata", Metadata);
            writer.WriteStringValue("payment_intent", PaymentIntent);
            writer.WriteBoolValue("refund_application_fee", RefundApplicationFee);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Terminal.Readers.Item.Refund_payment.Refund_paymentPostRequestBody_refund_payment_config>("refund_payment_config", RefundPaymentConfig);
            writer.WriteBoolValue("reverse_transfer", ReverseTransfer);
        }
    }
}
#pragma warning restore CS0618
