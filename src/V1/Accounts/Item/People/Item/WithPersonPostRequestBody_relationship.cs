// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.V1.Accounts.Item.People.Item
{
    /// <summary>
    /// The relationship that this person has with the account&apos;s legal entity.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithPersonPostRequestBody_relationship : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The authorizer property</summary>
        public bool? Authorizer { get; set; }
        /// <summary>The director property</summary>
        public bool? Director { get; set; }
        /// <summary>The executive property</summary>
        public bool? Executive { get; set; }
        /// <summary>The legal_guardian property</summary>
        public bool? LegalGuardian { get; set; }
        /// <summary>The owner property</summary>
        public bool? Owner { get; set; }
        /// <summary>The percent_ownership property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Accounts.Item.People.Item.WithPersonPostRequestBody_relationship.WithPersonPostRequestBody_relationship_percent_ownership? PercentOwnership { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Accounts.Item.People.Item.WithPersonPostRequestBody_relationship.WithPersonPostRequestBody_relationship_percent_ownership PercentOwnership { get; set; }
#endif
        /// <summary>The representative property</summary>
        public bool? Representative { get; set; }
        /// <summary>The title property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Accounts.Item.People.Item.WithPersonPostRequestBody_relationship"/> and sets the default values.
        /// </summary>
        public WithPersonPostRequestBody_relationship()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Accounts.Item.People.Item.WithPersonPostRequestBody_relationship"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.V1.Accounts.Item.People.Item.WithPersonPostRequestBody_relationship CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.V1.Accounts.Item.People.Item.WithPersonPostRequestBody_relationship();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "authorizer", n => { Authorizer = n.GetBoolValue(); } },
                { "director", n => { Director = n.GetBoolValue(); } },
                { "executive", n => { Executive = n.GetBoolValue(); } },
                { "legal_guardian", n => { LegalGuardian = n.GetBoolValue(); } },
                { "owner", n => { Owner = n.GetBoolValue(); } },
                { "percent_ownership", n => { PercentOwnership = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Accounts.Item.People.Item.WithPersonPostRequestBody_relationship.WithPersonPostRequestBody_relationship_percent_ownership>(global::Soenneker.Stripe.OpenApiClient.V1.Accounts.Item.People.Item.WithPersonPostRequestBody_relationship.WithPersonPostRequestBody_relationship_percent_ownership.CreateFromDiscriminatorValue); } },
                { "representative", n => { Representative = n.GetBoolValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("authorizer", Authorizer);
            writer.WriteBoolValue("director", Director);
            writer.WriteBoolValue("executive", Executive);
            writer.WriteBoolValue("legal_guardian", LegalGuardian);
            writer.WriteBoolValue("owner", Owner);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Accounts.Item.People.Item.WithPersonPostRequestBody_relationship.WithPersonPostRequestBody_relationship_percent_ownership>("percent_ownership", PercentOwnership);
            writer.WriteBoolValue("representative", Representative);
            writer.WriteStringValue("title", Title);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="double"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithPersonPostRequestBody_relationship_percent_ownership : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="double"/></summary>
            public double? Double { get; set; }
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Accounts.Item.People.Item.WithPersonPostRequestBody_relationship.WithPersonPostRequestBody_relationship_percent_ownership"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.V1.Accounts.Item.People.Item.WithPersonPostRequestBody_relationship.WithPersonPostRequestBody_relationship_percent_ownership CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.V1.Accounts.Item.People.Item.WithPersonPostRequestBody_relationship.WithPersonPostRequestBody_relationship_percent_ownership();
                if(parseNode.GetDoubleValue() is double doubleValue)
                {
                    result.Double = doubleValue;
                }
                else if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(Double != null)
                {
                    writer.WriteDoubleValue(null, Double);
                }
                else if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
            }
        }
    }
}
#pragma warning restore CS0618
