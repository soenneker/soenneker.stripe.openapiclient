// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Soenneker.Stripe.OpenApiClient.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.Stripe.OpenApiClient.V1.Payment_intents.Item.Confirm
{
    /// <summary>
    /// Builds and executes requests for operations under \v1\payment_intents\{intent}\confirm
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ConfirmRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Payment_intents.Item.Confirm.ConfirmRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ConfirmRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v1/payment_intents/{intent}/confirm", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Payment_intents.Item.Confirm.ConfirmRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ConfirmRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v1/payment_intents/{intent}/confirm", rawUrl)
        {
        }
        /// <summary>
        /// &lt;p&gt;Confirm that your customer intends to pay with current or providedpayment method. Upon confirmation, the PaymentIntent will attempt to initiatea payment.&lt;/p&gt;&lt;p&gt;If the selected payment method requires additional authentication steps, thePaymentIntent will transition to the &lt;code&gt;requires_action&lt;/code&gt; status andsuggest additional actions via &lt;code&gt;next_action&lt;/code&gt;. If payment fails,the PaymentIntent transitions to the &lt;code&gt;requires_payment_method&lt;/code&gt; status or the&lt;code&gt;canceled&lt;/code&gt; status if the confirmation limit is reached. Ifpayment succeeds, the PaymentIntent will transition to the &lt;code&gt;succeeded&lt;/code&gt;status (or &lt;code&gt;requires_capture&lt;/code&gt;, if &lt;code&gt;capture_method&lt;/code&gt; is set to &lt;code&gt;manual&lt;/code&gt;).&lt;/p&gt;&lt;p&gt;If the &lt;code&gt;confirmation_method&lt;/code&gt; is &lt;code&gt;automatic&lt;/code&gt;, payment may be attemptedusing our &lt;a href=&quot;/docs/stripe-js/reference#stripe-handle-card-payment&quot;&gt;client SDKs&lt;/a&gt;and the PaymentIntent’s &lt;a href=&quot;#payment_intent_object-client_secret&quot;&gt;client_secret&lt;/a&gt;.After &lt;code&gt;next_action&lt;/code&gt;s are handled by the client, no additionalconfirmation is required to complete the payment.&lt;/p&gt;&lt;p&gt;If the &lt;code&gt;confirmation_method&lt;/code&gt; is &lt;code&gt;manual&lt;/code&gt;, all payment attempts must beinitiated using a secret key.&lt;/p&gt;&lt;p&gt;If any actions are required for the payment, the PaymentIntent willreturn to the &lt;code&gt;requires_confirmation&lt;/code&gt; stateafter those actions are completed. Your server needs to thenexplicitly re-confirm the PaymentIntent to initiate the next paymentattempt.&lt;/p&gt;&lt;p&gt;There is a variable upper limit on how many times a PaymentIntent can be confirmed.After this limit is reached, any further calls to this endpoint willtransition the PaymentIntent to the &lt;code&gt;canceled&lt;/code&gt; state.&lt;/p&gt;
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Stripe.OpenApiClient.Models.Error">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent?> PostAsync(global::Soenneker.Stripe.OpenApiClient.V1.Payment_intents.Item.Confirm.ConfirmPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent> PostAsync(global::Soenneker.Stripe.OpenApiClient.V1.Payment_intents.Item.Confirm.ConfirmPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::Soenneker.Stripe.OpenApiClient.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent>(requestInfo, global::Soenneker.Stripe.OpenApiClient.Models.Payment_intent.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// &lt;p&gt;Confirm that your customer intends to pay with current or providedpayment method. Upon confirmation, the PaymentIntent will attempt to initiatea payment.&lt;/p&gt;&lt;p&gt;If the selected payment method requires additional authentication steps, thePaymentIntent will transition to the &lt;code&gt;requires_action&lt;/code&gt; status andsuggest additional actions via &lt;code&gt;next_action&lt;/code&gt;. If payment fails,the PaymentIntent transitions to the &lt;code&gt;requires_payment_method&lt;/code&gt; status or the&lt;code&gt;canceled&lt;/code&gt; status if the confirmation limit is reached. Ifpayment succeeds, the PaymentIntent will transition to the &lt;code&gt;succeeded&lt;/code&gt;status (or &lt;code&gt;requires_capture&lt;/code&gt;, if &lt;code&gt;capture_method&lt;/code&gt; is set to &lt;code&gt;manual&lt;/code&gt;).&lt;/p&gt;&lt;p&gt;If the &lt;code&gt;confirmation_method&lt;/code&gt; is &lt;code&gt;automatic&lt;/code&gt;, payment may be attemptedusing our &lt;a href=&quot;/docs/stripe-js/reference#stripe-handle-card-payment&quot;&gt;client SDKs&lt;/a&gt;and the PaymentIntent’s &lt;a href=&quot;#payment_intent_object-client_secret&quot;&gt;client_secret&lt;/a&gt;.After &lt;code&gt;next_action&lt;/code&gt;s are handled by the client, no additionalconfirmation is required to complete the payment.&lt;/p&gt;&lt;p&gt;If the &lt;code&gt;confirmation_method&lt;/code&gt; is &lt;code&gt;manual&lt;/code&gt;, all payment attempts must beinitiated using a secret key.&lt;/p&gt;&lt;p&gt;If any actions are required for the payment, the PaymentIntent willreturn to the &lt;code&gt;requires_confirmation&lt;/code&gt; stateafter those actions are completed. Your server needs to thenexplicitly re-confirm the PaymentIntent to initiate the next paymentattempt.&lt;/p&gt;&lt;p&gt;There is a variable upper limit on how many times a PaymentIntent can be confirmed.After this limit is reached, any further calls to this endpoint willtransition the PaymentIntent to the &lt;code&gt;canceled&lt;/code&gt; state.&lt;/p&gt;
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Soenneker.Stripe.OpenApiClient.V1.Payment_intents.Item.Confirm.ConfirmPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Soenneker.Stripe.OpenApiClient.V1.Payment_intents.Item.Confirm.ConfirmPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/x-www-form-urlencoded", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Payment_intents.Item.Confirm.ConfirmRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Soenneker.Stripe.OpenApiClient.V1.Payment_intents.Item.Confirm.ConfirmRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.Stripe.OpenApiClient.V1.Payment_intents.Item.Confirm.ConfirmRequestBuilder(rawUrl, RequestAdapter);
        }
    }
}
#pragma warning restore CS0618
