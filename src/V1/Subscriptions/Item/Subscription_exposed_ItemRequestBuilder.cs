// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Soenneker.Stripe.OpenApiClient.Models;
using Soenneker.Stripe.OpenApiClient.V1.Subscriptions.Item.Discount;
using Soenneker.Stripe.OpenApiClient.V1.Subscriptions.Item.Migrate;
using Soenneker.Stripe.OpenApiClient.V1.Subscriptions.Item.Resume;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Soenneker.Stripe.OpenApiClient.V1.Subscriptions.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \v1\subscriptions\{subscription_exposed_-id}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Subscription_exposed_ItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The discount property</summary>
        public global::Soenneker.Stripe.OpenApiClient.V1.Subscriptions.Item.Discount.DiscountRequestBuilder Discount
        {
            get => new global::Soenneker.Stripe.OpenApiClient.V1.Subscriptions.Item.Discount.DiscountRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The migrate property</summary>
        public global::Soenneker.Stripe.OpenApiClient.V1.Subscriptions.Item.Migrate.MigrateRequestBuilder Migrate
        {
            get => new global::Soenneker.Stripe.OpenApiClient.V1.Subscriptions.Item.Migrate.MigrateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The resume property</summary>
        public global::Soenneker.Stripe.OpenApiClient.V1.Subscriptions.Item.Resume.ResumeRequestBuilder Resume
        {
            get => new global::Soenneker.Stripe.OpenApiClient.V1.Subscriptions.Item.Resume.ResumeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Subscriptions.Item.Subscription_exposed_ItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Subscription_exposed_ItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v1/subscriptions/{subscription_exposed_%2Did}{?expand*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Subscriptions.Item.Subscription_exposed_ItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Subscription_exposed_ItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v1/subscriptions/{subscription_exposed_%2Did}{?expand*}", rawUrl)
        {
        }
        /// <summary>
        /// &lt;p&gt;Cancels a customer’s subscription immediately. The customer won’t be charged again for the subscription. After it’s canceled, you can no longer update the subscription or its &lt;a href=&quot;/metadata&quot;&gt;metadata&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Any pending invoice items that you’ve created are still charged at the end of the period, unless manually &lt;a href=&quot;#delete_invoiceitem&quot;&gt;deleted&lt;/a&gt;. If you’ve set the subscription to cancel at the end of the period, any pending prorations are also left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations are removed if &lt;code&gt;invoice_now&lt;/code&gt; and &lt;code&gt;prorate&lt;/code&gt; are both set to true.&lt;/p&gt;&lt;p&gt;By default, upon subscription cancellation, Stripe stops automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.&lt;/p&gt;
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Subscription"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Stripe.OpenApiClient.Models.Error">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Stripe.OpenApiClient.Models.Subscription?> DeleteAsync(global::Soenneker.Stripe.OpenApiClient.V1.Subscriptions.Item.Subscription_exposed_DeleteRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Stripe.OpenApiClient.Models.Subscription> DeleteAsync(global::Soenneker.Stripe.OpenApiClient.V1.Subscriptions.Item.Subscription_exposed_DeleteRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToDeleteRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::Soenneker.Stripe.OpenApiClient.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Stripe.OpenApiClient.Models.Subscription>(requestInfo, global::Soenneker.Stripe.OpenApiClient.Models.Subscription.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// &lt;p&gt;Retrieves the subscription with the given ID.&lt;/p&gt;
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Subscription"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Stripe.OpenApiClient.Models.Error">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Stripe.OpenApiClient.Models.Subscription?> GetAsync(global::Soenneker.Stripe.OpenApiClient.V1.Subscriptions.Item.Subscription_exposed_GetRequestBody body, Action<RequestConfiguration<global::Soenneker.Stripe.OpenApiClient.V1.Subscriptions.Item.Subscription_exposed_ItemRequestBuilder.Subscription_exposed_ItemRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Stripe.OpenApiClient.Models.Subscription> GetAsync(global::Soenneker.Stripe.OpenApiClient.V1.Subscriptions.Item.Subscription_exposed_GetRequestBody body, Action<RequestConfiguration<global::Soenneker.Stripe.OpenApiClient.V1.Subscriptions.Item.Subscription_exposed_ItemRequestBuilder.Subscription_exposed_ItemRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToGetRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::Soenneker.Stripe.OpenApiClient.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Stripe.OpenApiClient.Models.Subscription>(requestInfo, global::Soenneker.Stripe.OpenApiClient.Models.Subscription.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// &lt;p&gt;Updates an existing subscription to match the specified parameters.When changing prices or quantities, we optionally prorate the price we charge next month to make up for any price changes.To preview how the proration is calculated, use the &lt;a href=&quot;/docs/api/invoices/create_preview&quot;&gt;create preview&lt;/a&gt; endpoint.&lt;/p&gt;&lt;p&gt;By default, we prorate subscription changes. For example, if a customer signs up on May 1 for a &lt;currency&gt;100&lt;/currency&gt; price, they’ll be billed &lt;currency&gt;100&lt;/currency&gt; immediately. If on May 15 they switch to a &lt;currency&gt;200&lt;/currency&gt; price, then on June 1 they’ll be billed &lt;currency&gt;250&lt;/currency&gt; (&lt;currency&gt;200&lt;/currency&gt; for a renewal of her subscription, plus a &lt;currency&gt;50&lt;/currency&gt; prorating adjustment for half of the previous month’s &lt;currency&gt;100&lt;/currency&gt; difference). Similarly, a downgrade generates a credit that is applied to the next invoice. We also prorate when you make quantity changes.&lt;/p&gt;&lt;p&gt;Switching prices does not normally change the billing date or generate an immediate charge unless:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The billing interval is changed (for example, from monthly to yearly).&lt;/li&gt;&lt;li&gt;The subscription moves from free to paid.&lt;/li&gt;&lt;li&gt;A trial starts or ends.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In these cases, we apply a credit for the unused time on the previous price, immediately charge the customer using the new price, and reset the billing date. Learn about how &lt;a href=&quot;/docs/billing/subscriptions/upgrade-downgrade#immediate-payment&quot;&gt;Stripe immediately attempts payment for subscription changes&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;If you want to charge for an upgrade immediately, pass &lt;code&gt;proration_behavior&lt;/code&gt; as &lt;code&gt;always_invoice&lt;/code&gt; to create prorations, automatically invoice the customer for those proration adjustments, and attempt to collect payment. If you pass &lt;code&gt;create_prorations&lt;/code&gt;, the prorations are created but not automatically invoiced. If you want to bill the customer for the prorations before the subscription’s renewal date, you need to manually &lt;a href=&quot;/docs/api/invoices/create&quot;&gt;invoice the customer&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;If you don’t want to prorate, set the &lt;code&gt;proration_behavior&lt;/code&gt; option to &lt;code&gt;none&lt;/code&gt;. With this option, the customer is billed &lt;currency&gt;100&lt;/currency&gt; on May 1 and &lt;currency&gt;200&lt;/currency&gt; on June 1. Similarly, if you set &lt;code&gt;proration_behavior&lt;/code&gt; to &lt;code&gt;none&lt;/code&gt; when switching between different billing intervals (for example, from monthly to yearly), we don’t generate any credits for the old subscription’s unused time. We still reset the billing date and bill immediately for the new subscription.&lt;/p&gt;&lt;p&gt;Updating the quantity on a subscription many times in an hour may result in &lt;a href=&quot;/docs/rate-limits&quot;&gt;rate limiting&lt;/a&gt;. If you need to bill for a frequently changing quantity, consider integrating &lt;a href=&quot;/docs/billing/subscriptions/usage-based&quot;&gt;usage-based billing&lt;/a&gt; instead.&lt;/p&gt;
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.Models.Subscription"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Soenneker.Stripe.OpenApiClient.Models.Error">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Soenneker.Stripe.OpenApiClient.Models.Subscription?> PostAsync(global::Soenneker.Stripe.OpenApiClient.V1.Subscriptions.Item.Subscription_exposed_PostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Soenneker.Stripe.OpenApiClient.Models.Subscription> PostAsync(global::Soenneker.Stripe.OpenApiClient.V1.Subscriptions.Item.Subscription_exposed_PostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::Soenneker.Stripe.OpenApiClient.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Soenneker.Stripe.OpenApiClient.Models.Subscription>(requestInfo, global::Soenneker.Stripe.OpenApiClient.Models.Subscription.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// &lt;p&gt;Cancels a customer’s subscription immediately. The customer won’t be charged again for the subscription. After it’s canceled, you can no longer update the subscription or its &lt;a href=&quot;/metadata&quot;&gt;metadata&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Any pending invoice items that you’ve created are still charged at the end of the period, unless manually &lt;a href=&quot;#delete_invoiceitem&quot;&gt;deleted&lt;/a&gt;. If you’ve set the subscription to cancel at the end of the period, any pending prorations are also left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations are removed if &lt;code&gt;invoice_now&lt;/code&gt; and &lt;code&gt;prorate&lt;/code&gt; are both set to true.&lt;/p&gt;&lt;p&gt;By default, upon subscription cancellation, Stripe stops automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.&lt;/p&gt;
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(global::Soenneker.Stripe.OpenApiClient.V1.Subscriptions.Item.Subscription_exposed_DeleteRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(global::Soenneker.Stripe.OpenApiClient.V1.Subscriptions.Item.Subscription_exposed_DeleteRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/x-www-form-urlencoded", body);
            return requestInfo;
        }
        /// <summary>
        /// &lt;p&gt;Retrieves the subscription with the given ID.&lt;/p&gt;
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(global::Soenneker.Stripe.OpenApiClient.V1.Subscriptions.Item.Subscription_exposed_GetRequestBody body, Action<RequestConfiguration<global::Soenneker.Stripe.OpenApiClient.V1.Subscriptions.Item.Subscription_exposed_ItemRequestBuilder.Subscription_exposed_ItemRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(global::Soenneker.Stripe.OpenApiClient.V1.Subscriptions.Item.Subscription_exposed_GetRequestBody body, Action<RequestConfiguration<global::Soenneker.Stripe.OpenApiClient.V1.Subscriptions.Item.Subscription_exposed_ItemRequestBuilder.Subscription_exposed_ItemRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/x-www-form-urlencoded", body);
            return requestInfo;
        }
        /// <summary>
        /// &lt;p&gt;Updates an existing subscription to match the specified parameters.When changing prices or quantities, we optionally prorate the price we charge next month to make up for any price changes.To preview how the proration is calculated, use the &lt;a href=&quot;/docs/api/invoices/create_preview&quot;&gt;create preview&lt;/a&gt; endpoint.&lt;/p&gt;&lt;p&gt;By default, we prorate subscription changes. For example, if a customer signs up on May 1 for a &lt;currency&gt;100&lt;/currency&gt; price, they’ll be billed &lt;currency&gt;100&lt;/currency&gt; immediately. If on May 15 they switch to a &lt;currency&gt;200&lt;/currency&gt; price, then on June 1 they’ll be billed &lt;currency&gt;250&lt;/currency&gt; (&lt;currency&gt;200&lt;/currency&gt; for a renewal of her subscription, plus a &lt;currency&gt;50&lt;/currency&gt; prorating adjustment for half of the previous month’s &lt;currency&gt;100&lt;/currency&gt; difference). Similarly, a downgrade generates a credit that is applied to the next invoice. We also prorate when you make quantity changes.&lt;/p&gt;&lt;p&gt;Switching prices does not normally change the billing date or generate an immediate charge unless:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The billing interval is changed (for example, from monthly to yearly).&lt;/li&gt;&lt;li&gt;The subscription moves from free to paid.&lt;/li&gt;&lt;li&gt;A trial starts or ends.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In these cases, we apply a credit for the unused time on the previous price, immediately charge the customer using the new price, and reset the billing date. Learn about how &lt;a href=&quot;/docs/billing/subscriptions/upgrade-downgrade#immediate-payment&quot;&gt;Stripe immediately attempts payment for subscription changes&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;If you want to charge for an upgrade immediately, pass &lt;code&gt;proration_behavior&lt;/code&gt; as &lt;code&gt;always_invoice&lt;/code&gt; to create prorations, automatically invoice the customer for those proration adjustments, and attempt to collect payment. If you pass &lt;code&gt;create_prorations&lt;/code&gt;, the prorations are created but not automatically invoiced. If you want to bill the customer for the prorations before the subscription’s renewal date, you need to manually &lt;a href=&quot;/docs/api/invoices/create&quot;&gt;invoice the customer&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;If you don’t want to prorate, set the &lt;code&gt;proration_behavior&lt;/code&gt; option to &lt;code&gt;none&lt;/code&gt;. With this option, the customer is billed &lt;currency&gt;100&lt;/currency&gt; on May 1 and &lt;currency&gt;200&lt;/currency&gt; on June 1. Similarly, if you set &lt;code&gt;proration_behavior&lt;/code&gt; to &lt;code&gt;none&lt;/code&gt; when switching between different billing intervals (for example, from monthly to yearly), we don’t generate any credits for the old subscription’s unused time. We still reset the billing date and bill immediately for the new subscription.&lt;/p&gt;&lt;p&gt;Updating the quantity on a subscription many times in an hour may result in &lt;a href=&quot;/docs/rate-limits&quot;&gt;rate limiting&lt;/a&gt;. If you need to bill for a frequently changing quantity, consider integrating &lt;a href=&quot;/docs/billing/subscriptions/usage-based&quot;&gt;usage-based billing&lt;/a&gt; instead.&lt;/p&gt;
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Soenneker.Stripe.OpenApiClient.V1.Subscriptions.Item.Subscription_exposed_PostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Soenneker.Stripe.OpenApiClient.V1.Subscriptions.Item.Subscription_exposed_PostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/x-www-form-urlencoded", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Subscriptions.Item.Subscription_exposed_ItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Soenneker.Stripe.OpenApiClient.V1.Subscriptions.Item.Subscription_exposed_ItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Soenneker.Stripe.OpenApiClient.V1.Subscriptions.Item.Subscription_exposed_ItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// &lt;p&gt;Retrieves the subscription with the given ID.&lt;/p&gt;
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Subscription_exposed_ItemRequestBuilderGetQueryParameters 
        {
            /// <summary>Specifies which fields in the response should be expanded.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("expand")]
            public string[]? Expand { get; set; }
#nullable restore
#else
            [QueryParameter("expand")]
            public string[] Expand { get; set; }
#endif
        }
    }
}
#pragma warning restore CS0618
