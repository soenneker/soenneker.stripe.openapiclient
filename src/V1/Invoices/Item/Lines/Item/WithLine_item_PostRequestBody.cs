// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WithLine_item_PostRequestBody : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The integer amount in cents (or local equivalent) of the charge to be applied to the upcoming invoice. If you want to apply a credit to the customer&apos;s account, pass a negative amount.</summary>
        public int? Amount { get; set; }
        /// <summary>An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Controls whether discounts apply to this line item. Defaults to false for prorations or negative line items, and true for all other line items. Cannot be set to true for prorations.</summary>
        public bool? Discountable { get; set; }
        /// <summary>The coupons, promotion codes &amp; existing discounts which apply to the line item. Item discounts are applied before invoice discounts. Pass an empty string to remove previously-defined discounts.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody.WithLine_item_PostRequestBody_discounts? Discounts { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody.WithLine_item_PostRequestBody_discounts Discounts { get; set; }
#endif
        /// <summary>Specifies which fields in the response should be expanded.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Expand { get; set; }
#nullable restore
#else
        public List<string> Expand { get; set; }
#endif
        /// <summary>Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. For [type=subscription](https://stripe.com/docs/api/invoices/line_item#invoice_line_item_object-type) line items, the incoming metadata specified on the request is directly used to set this value, in contrast to [type=invoiceitem](api/invoices/line_item#invoice_line_item_object-type) line items, where any existing metadata on the invoice line is merged with the incoming data.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Metadata { get; set; }
#nullable restore
#else
        public string Metadata { get; set; }
#endif
        /// <summary>The period associated with this invoice item. When set to different values, the period will be rendered on the invoice. If you have [Stripe Revenue Recognition](https://stripe.com/docs/revenue-recognition) enabled, the period will be used to recognize and defer revenue. See the [Revenue Recognition documentation](https://stripe.com/docs/revenue-recognition/methodology/subscriptions-and-invoicing) for details.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody_period? Period { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody_period Period { get; set; }
#endif
        /// <summary>Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody_price_data? PriceData { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody_price_data PriceData { get; set; }
#endif
        /// <summary>The pricing information for the invoice item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody_pricing? Pricing { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody_pricing Pricing { get; set; }
#endif
        /// <summary>Non-negative integer. The quantity of units for the line item.</summary>
        public int? Quantity { get; set; }
        /// <summary>A list of up to 10 tax amounts for this line item. This can be useful if you calculate taxes on your own or use a third-party to calculate them. You cannot set tax amounts if any line item has [tax_rates](https://stripe.com/docs/api/invoices/line_item#invoice_line_item_object-tax_rates) or if the invoice has [default_tax_rates](https://stripe.com/docs/api/invoices/object#invoice_object-default_tax_rates) or uses [automatic tax](https://stripe.com/docs/tax/invoicing). Pass an empty string to remove previously defined tax amounts.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody.WithLine_item_PostRequestBody_tax_amounts? TaxAmounts { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody.WithLine_item_PostRequestBody_tax_amounts TaxAmounts { get; set; }
#endif
        /// <summary>The tax rates which apply to the line item. When set, the `default_tax_rates` on the invoice do not apply to this line item. Pass an empty string to remove previously-defined tax rates.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody.WithLine_item_PostRequestBody_tax_rates? TaxRates { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody.WithLine_item_PostRequestBody_tax_rates TaxRates { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount", n => { Amount = n.GetIntValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "discountable", n => { Discountable = n.GetBoolValue(); } },
                { "discounts", n => { Discounts = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody.WithLine_item_PostRequestBody_discounts>(global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody.WithLine_item_PostRequestBody_discounts.CreateFromDiscriminatorValue); } },
                { "expand", n => { Expand = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "metadata", n => { Metadata = n.GetStringValue(); } },
                { "period", n => { Period = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody_period>(global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody_period.CreateFromDiscriminatorValue); } },
                { "price_data", n => { PriceData = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody_price_data>(global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody_price_data.CreateFromDiscriminatorValue); } },
                { "pricing", n => { Pricing = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody_pricing>(global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody_pricing.CreateFromDiscriminatorValue); } },
                { "quantity", n => { Quantity = n.GetIntValue(); } },
                { "tax_amounts", n => { TaxAmounts = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody.WithLine_item_PostRequestBody_tax_amounts>(global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody.WithLine_item_PostRequestBody_tax_amounts.CreateFromDiscriminatorValue); } },
                { "tax_rates", n => { TaxRates = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody.WithLine_item_PostRequestBody_tax_rates>(global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody.WithLine_item_PostRequestBody_tax_rates.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("amount", Amount);
            writer.WriteStringValue("description", Description);
            writer.WriteBoolValue("discountable", Discountable);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody.WithLine_item_PostRequestBody_discounts>("discounts", Discounts);
            writer.WriteCollectionOfPrimitiveValues<string>("expand", Expand);
            writer.WriteStringValue("metadata", Metadata);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody_period>("period", Period);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody_price_data>("price_data", PriceData);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody_pricing>("pricing", Pricing);
            writer.WriteIntValue("quantity", Quantity);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody.WithLine_item_PostRequestBody_tax_amounts>("tax_amounts", TaxAmounts);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody.WithLine_item_PostRequestBody_tax_rates>("tax_rates", TaxRates);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="string"/>, List&lt;global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody_discountsMember1&gt;
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithLine_item_PostRequestBody_discounts : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>Composed type representation for type List&lt;global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody_discountsMember1&gt;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public List<global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody_discountsMember1>? WithLineItemPostRequestBodyDiscountsMember1 { get; set; }
#nullable restore
#else
            public List<global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody_discountsMember1> WithLineItemPostRequestBodyDiscountsMember1 { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody.WithLine_item_PostRequestBody_discounts"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody.WithLine_item_PostRequestBody_discounts CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody.WithLine_item_PostRequestBody_discounts();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else if(parseNode.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody_discountsMember1>(global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody_discountsMember1.CreateFromDiscriminatorValue)?.AsList() is List<global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody_discountsMember1> withLineItemPostRequestBodyDiscountsMember1Value)
                {
                    result.WithLineItemPostRequestBodyDiscountsMember1 = withLineItemPostRequestBodyDiscountsMember1Value;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else if(WithLineItemPostRequestBodyDiscountsMember1 != null)
                {
                    writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody_discountsMember1>(null, WithLineItemPostRequestBodyDiscountsMember1);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="string"/>, List&lt;global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody_tax_amountsMember1&gt;
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithLine_item_PostRequestBody_tax_amounts : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>Composed type representation for type List&lt;global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody_tax_amountsMember1&gt;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public List<global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody_tax_amountsMember1>? WithLineItemPostRequestBodyTaxAmountsMember1 { get; set; }
#nullable restore
#else
            public List<global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody_tax_amountsMember1> WithLineItemPostRequestBodyTaxAmountsMember1 { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody.WithLine_item_PostRequestBody_tax_amounts"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody.WithLine_item_PostRequestBody_tax_amounts CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody.WithLine_item_PostRequestBody_tax_amounts();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else if(parseNode.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody_tax_amountsMember1>(global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody_tax_amountsMember1.CreateFromDiscriminatorValue)?.AsList() is List<global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody_tax_amountsMember1> withLineItemPostRequestBodyTaxAmountsMember1Value)
                {
                    result.WithLineItemPostRequestBodyTaxAmountsMember1 = withLineItemPostRequestBodyTaxAmountsMember1Value;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else if(WithLineItemPostRequestBodyTaxAmountsMember1 != null)
                {
                    writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody_tax_amountsMember1>(null, WithLineItemPostRequestBodyTaxAmountsMember1);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="string"/>, List&lt;string&gt;
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithLine_item_PostRequestBody_tax_rates : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type List&lt;string&gt;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public List<string>? String { get; set; }
#nullable restore
#else
            public List<string> String { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? WithLineItemPostRequestBodyTaxRatesString { get; set; }
#nullable restore
#else
            public string WithLineItemPostRequestBodyTaxRatesString { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody.WithLine_item_PostRequestBody_tax_rates"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody.WithLine_item_PostRequestBody_tax_rates CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Lines.Item.WithLine_item_PostRequestBody.WithLine_item_PostRequestBody_tax_rates();
                if(parseNode.GetStringValue() is string withLineItemPostRequestBodyTaxRatesStringValue)
                {
                    result.WithLineItemPostRequestBodyTaxRatesString = withLineItemPostRequestBodyTaxRatesStringValue;
                }
                else if(parseNode.GetCollectionOfPrimitiveValues<string>()?.AsList() is List<string> stringValue)
                {
                    result.String = stringValue;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(WithLineItemPostRequestBodyTaxRatesString != null)
                {
                    writer.WriteStringValue(null, WithLineItemPostRequestBodyTaxRatesString);
                }
                else if(String != null)
                {
                    writer.WriteCollectionOfPrimitiveValues<string>(null, String);
                }
            }
        }
    }
}
#pragma warning restore CS0618
