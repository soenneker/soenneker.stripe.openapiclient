// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Pay
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PayPostRequestBody : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Specifies which fields in the response should be expanded.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Expand { get; set; }
#nullable restore
#else
        public List<string> Expand { get; set; }
#endif
        /// <summary>In cases where the source used to pay the invoice has insufficient funds, passing `forgive=true` controls whether a charge should be attempted for the full amount available on the source, up to the amount to fully pay the invoice. This effectively forgives the difference between the amount available on the source and the amount due. Passing `forgive=false` will fail the charge if the source hasn&apos;t been pre-funded with the right amount. An example for this case is with ACH Credit Transfers and wires: if the amount wired is less than the amount due by a small amount, you might want to forgive the difference. Defaults to `false`.</summary>
        public bool? Forgive { get; set; }
        /// <summary>ID of the mandate to be used for this invoice. It must correspond to the payment method used to pay the invoice, including the payment_method param or the invoice&apos;s default_payment_method or default_source, if set.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Pay.PayPostRequestBody.PayPostRequestBody_mandate? Mandate { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Pay.PayPostRequestBody.PayPostRequestBody_mandate Mandate { get; set; }
#endif
        /// <summary>Indicates if a customer is on or off-session while an invoice payment is attempted. Defaults to `true` (off-session).</summary>
        public bool? OffSession { get; set; }
        /// <summary>Boolean representing whether an invoice is paid outside of Stripe. This will result in no charge being made. Defaults to `false`.</summary>
        public bool? PaidOutOfBand { get; set; }
        /// <summary>A PaymentMethod to be charged. The PaymentMethod must be the ID of a PaymentMethod belonging to the customer associated with the invoice being paid.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PaymentMethod { get; set; }
#nullable restore
#else
        public string PaymentMethod { get; set; }
#endif
        /// <summary>A payment source to be charged. The source must be the ID of a source belonging to the customer associated with the invoice being paid.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Source { get; set; }
#nullable restore
#else
        public string Source { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Pay.PayPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Pay.PayPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Pay.PayPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "expand", n => { Expand = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "forgive", n => { Forgive = n.GetBoolValue(); } },
                { "mandate", n => { Mandate = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Pay.PayPostRequestBody.PayPostRequestBody_mandate>(global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Pay.PayPostRequestBody.PayPostRequestBody_mandate.CreateFromDiscriminatorValue); } },
                { "off_session", n => { OffSession = n.GetBoolValue(); } },
                { "paid_out_of_band", n => { PaidOutOfBand = n.GetBoolValue(); } },
                { "payment_method", n => { PaymentMethod = n.GetStringValue(); } },
                { "source", n => { Source = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("expand", Expand);
            writer.WriteBoolValue("forgive", Forgive);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Pay.PayPostRequestBody.PayPostRequestBody_mandate>("mandate", Mandate);
            writer.WriteBoolValue("off_session", OffSession);
            writer.WriteBoolValue("paid_out_of_band", PaidOutOfBand);
            writer.WriteStringValue("payment_method", PaymentMethod);
            writer.WriteStringValue("source", Source);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class PayPostRequestBody_mandate : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Pay.PayPostRequestBody.PayPostRequestBody_mandate"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Pay.PayPostRequestBody.PayPostRequestBody_mandate CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.V1.Invoices.Item.Pay.PayPostRequestBody.PayPostRequestBody_mandate();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
            }
        }
    }
}
#pragma warning restore CS0618
