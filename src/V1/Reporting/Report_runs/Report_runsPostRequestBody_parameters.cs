// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.V1.Reporting.Report_runs
{
    /// <summary>
    /// Parameters specifying how the report should be run. Different Report Types have different required and optional parameters, listed in the [API Access to Reports](https://stripe.com/docs/reporting/statements/api) documentation.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Report_runsPostRequestBody_parameters : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The columns property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Columns { get; set; }
#nullable restore
#else
        public List<string> Columns { get; set; }
#endif
        /// <summary>The connected_account property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConnectedAccount { get; set; }
#nullable restore
#else
        public string ConnectedAccount { get; set; }
#endif
        /// <summary>The currency property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>The interval_end property</summary>
        public int? IntervalEnd { get; set; }
        /// <summary>The interval_start property</summary>
        public int? IntervalStart { get; set; }
        /// <summary>The payout property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Payout { get; set; }
#nullable restore
#else
        public string Payout { get; set; }
#endif
        /// <summary>The reporting_category property</summary>
        public global::Soenneker.Stripe.OpenApiClient.V1.Reporting.Report_runs.Report_runsPostRequestBody_parameters_reporting_category? ReportingCategory { get; set; }
        /// <summary>The timezone property</summary>
        public global::Soenneker.Stripe.OpenApiClient.V1.Reporting.Report_runs.Report_runsPostRequestBody_parameters_timezone? Timezone { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Reporting.Report_runs.Report_runsPostRequestBody_parameters"/> and sets the default values.
        /// </summary>
        public Report_runsPostRequestBody_parameters()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Reporting.Report_runs.Report_runsPostRequestBody_parameters"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.V1.Reporting.Report_runs.Report_runsPostRequestBody_parameters CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.V1.Reporting.Report_runs.Report_runsPostRequestBody_parameters();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "columns", n => { Columns = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "connected_account", n => { ConnectedAccount = n.GetStringValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "interval_end", n => { IntervalEnd = n.GetIntValue(); } },
                { "interval_start", n => { IntervalStart = n.GetIntValue(); } },
                { "payout", n => { Payout = n.GetStringValue(); } },
                { "reporting_category", n => { ReportingCategory = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Reporting.Report_runs.Report_runsPostRequestBody_parameters_reporting_category>(); } },
                { "timezone", n => { Timezone = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Reporting.Report_runs.Report_runsPostRequestBody_parameters_timezone>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("columns", Columns);
            writer.WriteStringValue("connected_account", ConnectedAccount);
            writer.WriteStringValue("currency", Currency);
            writer.WriteIntValue("interval_end", IntervalEnd);
            writer.WriteIntValue("interval_start", IntervalStart);
            writer.WriteStringValue("payout", Payout);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Reporting.Report_runs.Report_runsPostRequestBody_parameters_reporting_category>("reporting_category", ReportingCategory);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Reporting.Report_runs.Report_runsPostRequestBody_parameters_timezone>("timezone", Timezone);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
