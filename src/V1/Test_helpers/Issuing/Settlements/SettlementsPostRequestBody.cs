// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.V1.Test_helpers.Issuing.Settlements
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SettlementsPostRequestBody : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The Bank Identification Number reflecting this settlement record.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Bin { get; set; }
#nullable restore
#else
        public string Bin { get; set; }
#endif
        /// <summary>The date that the transactions are cleared and posted to user&apos;s accounts.</summary>
        public int? ClearingDate { get; set; }
        /// <summary>Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>Specifies which fields in the response should be expanded.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Expand { get; set; }
#nullable restore
#else
        public List<string> Expand { get; set; }
#endif
        /// <summary>The total interchange received as reimbursement for the transactions.</summary>
        public int? InterchangeFeesAmount { get; set; }
        /// <summary>The total net amount required to settle with the network.</summary>
        public int? NetTotalAmount { get; set; }
        /// <summary>The card network for this settlement. One of [&quot;visa&quot;, &quot;maestro&quot;]</summary>
        public global::Soenneker.Stripe.OpenApiClient.V1.Test_helpers.Issuing.Settlements.SettlementsPostRequestBody_network? Network { get; set; }
        /// <summary>The Settlement Identification Number assigned by the network.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NetworkSettlementIdentifier { get; set; }
#nullable restore
#else
        public string NetworkSettlementIdentifier { get; set; }
#endif
        /// <summary>The total transaction amount reflected in this settlement.</summary>
        public int? TransactionAmount { get; set; }
        /// <summary>The total number of transactions reflected in this settlement.</summary>
        public int? TransactionCount { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Test_helpers.Issuing.Settlements.SettlementsPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.V1.Test_helpers.Issuing.Settlements.SettlementsPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.V1.Test_helpers.Issuing.Settlements.SettlementsPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "bin", n => { Bin = n.GetStringValue(); } },
                { "clearing_date", n => { ClearingDate = n.GetIntValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "expand", n => { Expand = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "interchange_fees_amount", n => { InterchangeFeesAmount = n.GetIntValue(); } },
                { "net_total_amount", n => { NetTotalAmount = n.GetIntValue(); } },
                { "network", n => { Network = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Test_helpers.Issuing.Settlements.SettlementsPostRequestBody_network>(); } },
                { "network_settlement_identifier", n => { NetworkSettlementIdentifier = n.GetStringValue(); } },
                { "transaction_amount", n => { TransactionAmount = n.GetIntValue(); } },
                { "transaction_count", n => { TransactionCount = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("bin", Bin);
            writer.WriteIntValue("clearing_date", ClearingDate);
            writer.WriteStringValue("currency", Currency);
            writer.WriteCollectionOfPrimitiveValues<string>("expand", Expand);
            writer.WriteIntValue("interchange_fees_amount", InterchangeFeesAmount);
            writer.WriteIntValue("net_total_amount", NetTotalAmount);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Test_helpers.Issuing.Settlements.SettlementsPostRequestBody_network>("network", Network);
            writer.WriteStringValue("network_settlement_identifier", NetworkSettlementIdentifier);
            writer.WriteIntValue("transaction_amount", TransactionAmount);
            writer.WriteIntValue("transaction_count", TransactionCount);
        }
    }
}
#pragma warning restore CS0618
