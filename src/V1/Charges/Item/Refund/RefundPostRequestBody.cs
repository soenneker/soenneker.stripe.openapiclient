// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.V1.Charges.Item.Refund
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class RefundPostRequestBody : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>A positive integer in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) representing how much of this charge to refund. Can refund only up to the remaining, unrefunded amount of the charge.</summary>
        public int? Amount { get; set; }
        /// <summary>Specifies which fields in the response should be expanded.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Expand { get; set; }
#nullable restore
#else
        public List<string> Expand { get; set; }
#endif
        /// <summary>For payment methods without native refund support (e.g., Konbini, PromptPay), use this email from the customer to receive refund instructions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InstructionsEmail { get; set; }
#nullable restore
#else
        public string InstructionsEmail { get; set; }
#endif
        /// <summary>Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Metadata { get; set; }
#nullable restore
#else
        public string Metadata { get; set; }
#endif
        /// <summary>The identifier of the PaymentIntent to refund.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PaymentIntent { get; set; }
#nullable restore
#else
        public string PaymentIntent { get; set; }
#endif
        /// <summary>String indicating the reason for the refund. If set, possible values are `duplicate`, `fraudulent`, and `requested_by_customer`. If you believe the charge to be fraudulent, specifying `fraudulent` as the reason will add the associated card and email to your [block lists](https://stripe.com/docs/radar/lists), and will also help us improve our fraud detection algorithms.</summary>
        public global::Soenneker.Stripe.OpenApiClient.V1.Charges.Item.Refund.RefundPostRequestBody_reason? Reason { get; set; }
        /// <summary>Boolean indicating whether the application fee should be refunded when refunding this charge. If a full charge refund is given, the full application fee will be refunded. Otherwise, the application fee will be refunded in an amount proportional to the amount of the charge refunded. An application fee can be refunded only by the application that created the charge.</summary>
        public bool? RefundApplicationFee { get; set; }
        /// <summary>Boolean indicating whether the transfer should be reversed when refunding this charge. The transfer will be reversed proportionally to the amount being refunded (either the entire or partial amount).&lt;br&gt;&lt;br&gt;A transfer can be reversed only by the application that created the charge.</summary>
        public bool? ReverseTransfer { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Charges.Item.Refund.RefundPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.V1.Charges.Item.Refund.RefundPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.V1.Charges.Item.Refund.RefundPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount", n => { Amount = n.GetIntValue(); } },
                { "expand", n => { Expand = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "instructions_email", n => { InstructionsEmail = n.GetStringValue(); } },
                { "metadata", n => { Metadata = n.GetStringValue(); } },
                { "payment_intent", n => { PaymentIntent = n.GetStringValue(); } },
                { "reason", n => { Reason = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Charges.Item.Refund.RefundPostRequestBody_reason>(); } },
                { "refund_application_fee", n => { RefundApplicationFee = n.GetBoolValue(); } },
                { "reverse_transfer", n => { ReverseTransfer = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("amount", Amount);
            writer.WriteCollectionOfPrimitiveValues<string>("expand", Expand);
            writer.WriteStringValue("instructions_email", InstructionsEmail);
            writer.WriteStringValue("metadata", Metadata);
            writer.WriteStringValue("payment_intent", PaymentIntent);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Charges.Item.Refund.RefundPostRequestBody_reason>("reason", Reason);
            writer.WriteBoolValue("refund_application_fee", RefundApplicationFee);
            writer.WriteBoolValue("reverse_transfer", ReverseTransfer);
        }
    }
}
#pragma warning restore CS0618
