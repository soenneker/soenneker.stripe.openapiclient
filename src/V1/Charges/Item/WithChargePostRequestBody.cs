// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.V1.Charges.Item
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WithChargePostRequestBody : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The ID of an existing customer that will be associated with this request. This field may only be updated if there is no existing associated customer with this charge.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Customer { get; set; }
#nullable restore
#else
        public string Customer { get; set; }
#endif
        /// <summary>An arbitrary string which you can attach to a charge object. It is displayed when in the web interface alongside the charge. Note that if you use Stripe to send automatic email receipts to your customers, your receipt emails will include the `description` of the charge(s) that they are describing.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Specifies which fields in the response should be expanded.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Expand { get; set; }
#nullable restore
#else
        public List<string> Expand { get; set; }
#endif
        /// <summary>A set of key-value pairs you can attach to a charge giving information about its riskiness. If you believe a charge is fraudulent, include a `user_report` key with a value of `fraudulent`. If you believe a charge is safe, include a `user_report` key with a value of `safe`. Stripe will use the information you send to improve our fraud detection algorithms.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Charges.Item.WithChargePostRequestBody_fraud_details? FraudDetails { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Charges.Item.WithChargePostRequestBody_fraud_details FraudDetails { get; set; }
#endif
        /// <summary>Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Metadata { get; set; }
#nullable restore
#else
        public string Metadata { get; set; }
#endif
        /// <summary>This is the email address that the receipt for this charge will be sent to. If this field is updated, then a new email receipt will be sent to the updated address.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReceiptEmail { get; set; }
#nullable restore
#else
        public string ReceiptEmail { get; set; }
#endif
        /// <summary>Shipping information for the charge. Helps prevent fraud on charges for physical goods.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Charges.Item.WithChargePostRequestBody_shipping? Shipping { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Charges.Item.WithChargePostRequestBody_shipping Shipping { get; set; }
#endif
        /// <summary>A string that identifies this transaction as part of a group. `transfer_group` may only be provided if it has not been set. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options) for details.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TransferGroup { get; set; }
#nullable restore
#else
        public string TransferGroup { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Charges.Item.WithChargePostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.V1.Charges.Item.WithChargePostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.V1.Charges.Item.WithChargePostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "customer", n => { Customer = n.GetStringValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "expand", n => { Expand = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "fraud_details", n => { FraudDetails = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Charges.Item.WithChargePostRequestBody_fraud_details>(global::Soenneker.Stripe.OpenApiClient.V1.Charges.Item.WithChargePostRequestBody_fraud_details.CreateFromDiscriminatorValue); } },
                { "metadata", n => { Metadata = n.GetStringValue(); } },
                { "receipt_email", n => { ReceiptEmail = n.GetStringValue(); } },
                { "shipping", n => { Shipping = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Charges.Item.WithChargePostRequestBody_shipping>(global::Soenneker.Stripe.OpenApiClient.V1.Charges.Item.WithChargePostRequestBody_shipping.CreateFromDiscriminatorValue); } },
                { "transfer_group", n => { TransferGroup = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("customer", Customer);
            writer.WriteStringValue("description", Description);
            writer.WriteCollectionOfPrimitiveValues<string>("expand", Expand);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Charges.Item.WithChargePostRequestBody_fraud_details>("fraud_details", FraudDetails);
            writer.WriteStringValue("metadata", Metadata);
            writer.WriteStringValue("receipt_email", ReceiptEmail);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Charges.Item.WithChargePostRequestBody_shipping>("shipping", Shipping);
            writer.WriteStringValue("transfer_group", TransferGroup);
        }
    }
}
#pragma warning restore CS0618
