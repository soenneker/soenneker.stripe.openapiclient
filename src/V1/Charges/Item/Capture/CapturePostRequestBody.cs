// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.V1.Charges.Item.Capture
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CapturePostRequestBody : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The amount to capture, which must be less than or equal to the original amount.</summary>
        public int? Amount { get; set; }
        /// <summary>An application fee to add on to this charge.</summary>
        public int? ApplicationFee { get; set; }
        /// <summary>An application fee amount to add on to this charge, which must be less than or equal to the original amount.</summary>
        public int? ApplicationFeeAmount { get; set; }
        /// <summary>Specifies which fields in the response should be expanded.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Expand { get; set; }
#nullable restore
#else
        public List<string> Expand { get; set; }
#endif
        /// <summary>The email address to send this charge&apos;s receipt to. This will override the previously-specified email address for this charge, if one was set. Receipts will not be sent in test mode.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReceiptEmail { get; set; }
#nullable restore
#else
        public string ReceiptEmail { get; set; }
#endif
        /// <summary>For a non-card charge, text that appears on the customer&apos;s statement as the statement descriptor. This value overrides the account&apos;s default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).For a card charge, this value is ignored unless you don&apos;t specify a `statement_descriptor_suffix`, in which case this value is used as the suffix.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StatementDescriptor { get; set; }
#nullable restore
#else
        public string StatementDescriptor { get; set; }
#endif
        /// <summary>Provides information about a card charge. Concatenated to the account&apos;s [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer&apos;s statement. If the account has no prefix value, the suffix is concatenated to the account&apos;s statement descriptor.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StatementDescriptorSuffix { get; set; }
#nullable restore
#else
        public string StatementDescriptorSuffix { get; set; }
#endif
        /// <summary>An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Charges.Item.Capture.CapturePostRequestBody_transfer_data? TransferData { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Charges.Item.Capture.CapturePostRequestBody_transfer_data TransferData { get; set; }
#endif
        /// <summary>A string that identifies this transaction as part of a group. `transfer_group` may only be provided if it has not been set. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options) for details.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TransferGroup { get; set; }
#nullable restore
#else
        public string TransferGroup { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Charges.Item.Capture.CapturePostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.V1.Charges.Item.Capture.CapturePostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.V1.Charges.Item.Capture.CapturePostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount", n => { Amount = n.GetIntValue(); } },
                { "application_fee", n => { ApplicationFee = n.GetIntValue(); } },
                { "application_fee_amount", n => { ApplicationFeeAmount = n.GetIntValue(); } },
                { "expand", n => { Expand = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "receipt_email", n => { ReceiptEmail = n.GetStringValue(); } },
                { "statement_descriptor", n => { StatementDescriptor = n.GetStringValue(); } },
                { "statement_descriptor_suffix", n => { StatementDescriptorSuffix = n.GetStringValue(); } },
                { "transfer_data", n => { TransferData = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Charges.Item.Capture.CapturePostRequestBody_transfer_data>(global::Soenneker.Stripe.OpenApiClient.V1.Charges.Item.Capture.CapturePostRequestBody_transfer_data.CreateFromDiscriminatorValue); } },
                { "transfer_group", n => { TransferGroup = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("amount", Amount);
            writer.WriteIntValue("application_fee", ApplicationFee);
            writer.WriteIntValue("application_fee_amount", ApplicationFeeAmount);
            writer.WriteCollectionOfPrimitiveValues<string>("expand", Expand);
            writer.WriteStringValue("receipt_email", ReceiptEmail);
            writer.WriteStringValue("statement_descriptor", StatementDescriptor);
            writer.WriteStringValue("statement_descriptor_suffix", StatementDescriptorSuffix);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Charges.Item.Capture.CapturePostRequestBody_transfer_data>("transfer_data", TransferData);
            writer.WriteStringValue("transfer_group", TransferGroup);
        }
    }
}
#pragma warning restore CS0618
