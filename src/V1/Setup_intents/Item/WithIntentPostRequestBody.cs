// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.V1.Setup_intents.Item
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WithIntentPostRequestBody : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>If present, the SetupIntent&apos;s payment method will be attached to the in-context Stripe Account.It can only be used for this Stripe Accountâ€™s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer.</summary>
        public bool? AttachToSelf { get; set; }
        /// <summary>ID of the Customer this SetupIntent belongs to, if one exists.If present, the SetupIntent&apos;s payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Customer { get; set; }
#nullable restore
#else
        public string Customer { get; set; }
#endif
        /// <summary>An arbitrary string attached to the object. Often useful for displaying to users.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Specifies which fields in the response should be expanded.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Expand { get; set; }
#nullable restore
#else
        public List<string> Expand { get; set; }
#endif
        /// <summary>Indicates the directions of money movement for which this payment method is intended to be used.Include `inbound` if you intend to use the payment method as the origin to pull funds from. Include `outbound` if you intend to use the payment method as the destination to send funds to. You can include both if you intend to use the payment method for both purposes.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.V1.Setup_intents.Item.WithIntentPostRequestBody_flow_directions?>? FlowDirections { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.V1.Setup_intents.Item.WithIntentPostRequestBody_flow_directions?> FlowDirections { get; set; }
#endif
        /// <summary>Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Metadata { get; set; }
#nullable restore
#else
        public string Metadata { get; set; }
#endif
        /// <summary>ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent. To unset this field to null, pass in an empty string.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PaymentMethod { get; set; }
#nullable restore
#else
        public string PaymentMethod { get; set; }
#endif
        /// <summary>The ID of the [payment method configuration](https://stripe.com/docs/api/payment_method_configurations) to use with this SetupIntent.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PaymentMethodConfiguration { get; set; }
#nullable restore
#else
        public string PaymentMethodConfiguration { get; set; }
#endif
        /// <summary>When included, this hash creates a PaymentMethod that is set as the [`payment_method`](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-payment_method)value in the SetupIntent.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Setup_intents.Item.WithIntentPostRequestBody_payment_method_data? PaymentMethodData { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Setup_intents.Item.WithIntentPostRequestBody_payment_method_data PaymentMethodData { get; set; }
#endif
        /// <summary>Payment method-specific configuration for this SetupIntent.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Setup_intents.Item.WithIntentPostRequestBody_payment_method_options? PaymentMethodOptions { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Setup_intents.Item.WithIntentPostRequestBody_payment_method_options PaymentMethodOptions { get; set; }
#endif
        /// <summary>The list of payment method types (for example, card) that this SetupIntent can set up. If you don&apos;t provide this, Stripe will dynamically show relevant payment methods from your [payment method settings](https://dashboard.stripe.com/settings/payment_methods). A list of valid payment method types can be found [here](https://docs.stripe.com/api/payment_methods/object#payment_method_object-type).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? PaymentMethodTypes { get; set; }
#nullable restore
#else
        public List<string> PaymentMethodTypes { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Setup_intents.Item.WithIntentPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.V1.Setup_intents.Item.WithIntentPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.V1.Setup_intents.Item.WithIntentPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "attach_to_self", n => { AttachToSelf = n.GetBoolValue(); } },
                { "customer", n => { Customer = n.GetStringValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "expand", n => { Expand = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "flow_directions", n => { FlowDirections = n.GetCollectionOfEnumValues<global::Soenneker.Stripe.OpenApiClient.V1.Setup_intents.Item.WithIntentPostRequestBody_flow_directions>()?.AsList(); } },
                { "metadata", n => { Metadata = n.GetStringValue(); } },
                { "payment_method", n => { PaymentMethod = n.GetStringValue(); } },
                { "payment_method_configuration", n => { PaymentMethodConfiguration = n.GetStringValue(); } },
                { "payment_method_data", n => { PaymentMethodData = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Setup_intents.Item.WithIntentPostRequestBody_payment_method_data>(global::Soenneker.Stripe.OpenApiClient.V1.Setup_intents.Item.WithIntentPostRequestBody_payment_method_data.CreateFromDiscriminatorValue); } },
                { "payment_method_options", n => { PaymentMethodOptions = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Setup_intents.Item.WithIntentPostRequestBody_payment_method_options>(global::Soenneker.Stripe.OpenApiClient.V1.Setup_intents.Item.WithIntentPostRequestBody_payment_method_options.CreateFromDiscriminatorValue); } },
                { "payment_method_types", n => { PaymentMethodTypes = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("attach_to_self", AttachToSelf);
            writer.WriteStringValue("customer", Customer);
            writer.WriteStringValue("description", Description);
            writer.WriteCollectionOfPrimitiveValues<string>("expand", Expand);
            writer.WriteCollectionOfEnumValues<global::Soenneker.Stripe.OpenApiClient.V1.Setup_intents.Item.WithIntentPostRequestBody_flow_directions>("flow_directions", FlowDirections);
            writer.WriteStringValue("metadata", Metadata);
            writer.WriteStringValue("payment_method", PaymentMethod);
            writer.WriteStringValue("payment_method_configuration", PaymentMethodConfiguration);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Setup_intents.Item.WithIntentPostRequestBody_payment_method_data>("payment_method_data", PaymentMethodData);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Setup_intents.Item.WithIntentPostRequestBody_payment_method_options>("payment_method_options", PaymentMethodOptions);
            writer.WriteCollectionOfPrimitiveValues<string>("payment_method_types", PaymentMethodTypes);
        }
    }
}
#pragma warning restore CS0618
