// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.V1.Coupons
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CouponsPostRequestBody : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>A positive integer representing the amount to subtract from an invoice total (required if `percent_off` is not passed).</summary>
        public int? AmountOff { get; set; }
        /// <summary>A hash containing directions for what this Coupon will apply discounts to.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Coupons.CouponsPostRequestBody_applies_to? AppliesTo { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Coupons.CouponsPostRequestBody_applies_to AppliesTo { get; set; }
#endif
        /// <summary>Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the `amount_off` parameter (required if `amount_off` is passed).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>Coupons defined in each available currency option (only supported if `amount_off` is passed). Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Coupons.CouponsPostRequestBody_currency_options? CurrencyOptions { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Coupons.CouponsPostRequestBody_currency_options CurrencyOptions { get; set; }
#endif
        /// <summary>Specifies how long the discount will be in effect if used on a subscription. Defaults to `once`.</summary>
        public global::Soenneker.Stripe.OpenApiClient.V1.Coupons.CouponsPostRequestBody_duration? Duration { get; set; }
        /// <summary>Required only if `duration` is `repeating`, in which case it must be a positive integer that specifies the number of months the discount will be in effect.</summary>
        public int? DurationInMonths { get; set; }
        /// <summary>Specifies which fields in the response should be expanded.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Expand { get; set; }
#nullable restore
#else
        public List<string> Expand { get; set; }
#endif
        /// <summary>Unique string of your choice that will be used to identify this coupon when applying it to a customer. If you don&apos;t want to specify a particular code, you can leave the ID blank and we&apos;ll generate a random code for you.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>A positive integer specifying the number of times the coupon can be redeemed before it&apos;s no longer valid. For example, you might have a 50% off coupon that the first 20 readers of your blog can use.</summary>
        public int? MaxRedemptions { get; set; }
        /// <summary>Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Metadata { get; set; }
#nullable restore
#else
        public string Metadata { get; set; }
#endif
        /// <summary>Name of the coupon displayed to customers on, for instance invoices, or receipts. By default the `id` is shown if `name` is not set.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>A positive float larger than 0, and smaller or equal to 100, that represents the discount the coupon will apply (required if `amount_off` is not passed).</summary>
        public double? PercentOff { get; set; }
        /// <summary>Unix timestamp specifying the last time at which the coupon can be redeemed. After the redeem_by date, the coupon can no longer be applied to new customers.</summary>
        public int? RedeemBy { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Coupons.CouponsPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.V1.Coupons.CouponsPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.V1.Coupons.CouponsPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount_off", n => { AmountOff = n.GetIntValue(); } },
                { "applies_to", n => { AppliesTo = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Coupons.CouponsPostRequestBody_applies_to>(global::Soenneker.Stripe.OpenApiClient.V1.Coupons.CouponsPostRequestBody_applies_to.CreateFromDiscriminatorValue); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "currency_options", n => { CurrencyOptions = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Coupons.CouponsPostRequestBody_currency_options>(global::Soenneker.Stripe.OpenApiClient.V1.Coupons.CouponsPostRequestBody_currency_options.CreateFromDiscriminatorValue); } },
                { "duration", n => { Duration = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Coupons.CouponsPostRequestBody_duration>(); } },
                { "duration_in_months", n => { DurationInMonths = n.GetIntValue(); } },
                { "expand", n => { Expand = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "max_redemptions", n => { MaxRedemptions = n.GetIntValue(); } },
                { "metadata", n => { Metadata = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "percent_off", n => { PercentOff = n.GetDoubleValue(); } },
                { "redeem_by", n => { RedeemBy = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("amount_off", AmountOff);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Coupons.CouponsPostRequestBody_applies_to>("applies_to", AppliesTo);
            writer.WriteStringValue("currency", Currency);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Coupons.CouponsPostRequestBody_currency_options>("currency_options", CurrencyOptions);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Coupons.CouponsPostRequestBody_duration>("duration", Duration);
            writer.WriteIntValue("duration_in_months", DurationInMonths);
            writer.WriteCollectionOfPrimitiveValues<string>("expand", Expand);
            writer.WriteStringValue("id", Id);
            writer.WriteIntValue("max_redemptions", MaxRedemptions);
            writer.WriteStringValue("metadata", Metadata);
            writer.WriteStringValue("name", Name);
            writer.WriteDoubleValue("percent_off", PercentOff);
            writer.WriteIntValue("redeem_by", RedeemBy);
        }
    }
}
#pragma warning restore CS0618
