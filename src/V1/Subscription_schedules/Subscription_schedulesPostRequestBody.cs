// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.V1.Subscription_schedules
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Subscription_schedulesPostRequestBody : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Controls how prorations and invoices for subscriptions are calculated and orchestrated.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Subscription_schedules.Subscription_schedulesPostRequestBody_billing_mode? BillingMode { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Subscription_schedules.Subscription_schedulesPostRequestBody_billing_mode BillingMode { get; set; }
#endif
        /// <summary>The identifier of the customer to create the subscription schedule for.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Customer { get; set; }
#nullable restore
#else
        public string Customer { get; set; }
#endif
        /// <summary>Object representing the subscription schedule&apos;s default settings.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Subscription_schedules.Subscription_schedulesPostRequestBody_default_settings? DefaultSettings { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Subscription_schedules.Subscription_schedulesPostRequestBody_default_settings DefaultSettings { get; set; }
#endif
        /// <summary>Behavior of the subscription schedule and underlying subscription when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running. `cancel` will end the subscription schedule and cancel the underlying subscription.</summary>
        public global::Soenneker.Stripe.OpenApiClient.V1.Subscription_schedules.Subscription_schedulesPostRequestBody_end_behavior? EndBehavior { get; set; }
        /// <summary>Specifies which fields in the response should be expanded.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Expand { get; set; }
#nullable restore
#else
        public List<string> Expand { get; set; }
#endif
        /// <summary>Migrate an existing subscription to be managed by a subscription schedule. If this parameter is set, a subscription schedule will be created using the subscription&apos;s item(s), set to auto-renew using the subscription&apos;s interval. When using this parameter, other parameters (such as phase values) cannot be set. To create a subscription schedule with other modifications, we recommend making two separate API calls.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FromSubscription { get; set; }
#nullable restore
#else
        public string FromSubscription { get; set; }
#endif
        /// <summary>Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Metadata { get; set; }
#nullable restore
#else
        public string Metadata { get; set; }
#endif
        /// <summary>List representing phases of the subscription schedule. Each phase can be customized to have different durations, plans, and coupons. If there are multiple phases, the `end_date` of one phase will always equal the `start_date` of the next phase.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.V1.Subscription_schedules.Subscription_schedulesPostRequestBody_phases>? Phases { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.V1.Subscription_schedules.Subscription_schedulesPostRequestBody_phases> Phases { get; set; }
#endif
        /// <summary>When the subscription schedule starts. We recommend using `now` so that it starts the subscription immediately. You can also use a Unix timestamp to backdate the subscription so that it starts on a past date, or set a future date for the subscription to start on.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Subscription_schedules.Subscription_schedulesPostRequestBody.Subscription_schedulesPostRequestBody_start_date? StartDate { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Subscription_schedules.Subscription_schedulesPostRequestBody.Subscription_schedulesPostRequestBody_start_date StartDate { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Subscription_schedules.Subscription_schedulesPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.V1.Subscription_schedules.Subscription_schedulesPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.V1.Subscription_schedules.Subscription_schedulesPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "billing_mode", n => { BillingMode = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Subscription_schedules.Subscription_schedulesPostRequestBody_billing_mode>(global::Soenneker.Stripe.OpenApiClient.V1.Subscription_schedules.Subscription_schedulesPostRequestBody_billing_mode.CreateFromDiscriminatorValue); } },
                { "customer", n => { Customer = n.GetStringValue(); } },
                { "default_settings", n => { DefaultSettings = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Subscription_schedules.Subscription_schedulesPostRequestBody_default_settings>(global::Soenneker.Stripe.OpenApiClient.V1.Subscription_schedules.Subscription_schedulesPostRequestBody_default_settings.CreateFromDiscriminatorValue); } },
                { "end_behavior", n => { EndBehavior = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Subscription_schedules.Subscription_schedulesPostRequestBody_end_behavior>(); } },
                { "expand", n => { Expand = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "from_subscription", n => { FromSubscription = n.GetStringValue(); } },
                { "metadata", n => { Metadata = n.GetStringValue(); } },
                { "phases", n => { Phases = n.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.V1.Subscription_schedules.Subscription_schedulesPostRequestBody_phases>(global::Soenneker.Stripe.OpenApiClient.V1.Subscription_schedules.Subscription_schedulesPostRequestBody_phases.CreateFromDiscriminatorValue)?.AsList(); } },
                { "start_date", n => { StartDate = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Subscription_schedules.Subscription_schedulesPostRequestBody.Subscription_schedulesPostRequestBody_start_date>(global::Soenneker.Stripe.OpenApiClient.V1.Subscription_schedules.Subscription_schedulesPostRequestBody.Subscription_schedulesPostRequestBody_start_date.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Subscription_schedules.Subscription_schedulesPostRequestBody_billing_mode>("billing_mode", BillingMode);
            writer.WriteStringValue("customer", Customer);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Subscription_schedules.Subscription_schedulesPostRequestBody_default_settings>("default_settings", DefaultSettings);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Subscription_schedules.Subscription_schedulesPostRequestBody_end_behavior>("end_behavior", EndBehavior);
            writer.WriteCollectionOfPrimitiveValues<string>("expand", Expand);
            writer.WriteStringValue("from_subscription", FromSubscription);
            writer.WriteStringValue("metadata", Metadata);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.V1.Subscription_schedules.Subscription_schedulesPostRequestBody_phases>("phases", Phases);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Subscription_schedules.Subscription_schedulesPostRequestBody.Subscription_schedulesPostRequestBody_start_date>("start_date", StartDate);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="int"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Subscription_schedulesPostRequestBody_start_date : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="int"/></summary>
            public int? Integer { get; set; }
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Subscription_schedules.Subscription_schedulesPostRequestBody.Subscription_schedulesPostRequestBody_start_date"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.V1.Subscription_schedules.Subscription_schedulesPostRequestBody.Subscription_schedulesPostRequestBody_start_date CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.V1.Subscription_schedules.Subscription_schedulesPostRequestBody.Subscription_schedulesPostRequestBody_start_date();
                if(parseNode.GetIntValue() is int integerValue)
                {
                    result.Integer = integerValue;
                }
                else if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(Integer != null)
                {
                    writer.WriteIntValue(null, Integer);
                }
                else if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
            }
        }
    }
}
#pragma warning restore CS0618
