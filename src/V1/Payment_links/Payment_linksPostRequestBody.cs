// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.V1.Payment_links
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Payment_linksPostRequestBody : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Behavior after the purchase is complete.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_after_completion? AfterCompletion { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_after_completion AfterCompletion { get; set; }
#endif
        /// <summary>Enables user redeemable promotion codes.</summary>
        public bool? AllowPromotionCodes { get; set; }
        /// <summary>The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner&apos;s Stripe account. Can only be applied when there are no line items with recurring prices.</summary>
        public int? ApplicationFeeAmount { get; set; }
        /// <summary>A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner&apos;s Stripe account. There must be at least 1 line item with a recurring price to use this field.</summary>
        public double? ApplicationFeePercent { get; set; }
        /// <summary>Configuration for automatic tax collection.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_automatic_tax? AutomaticTax { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_automatic_tax AutomaticTax { get; set; }
#endif
        /// <summary>Configuration for collecting the customer&apos;s billing address. Defaults to `auto`.</summary>
        public global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_billing_address_collection? BillingAddressCollection { get; set; }
        /// <summary>Configure fields to gather active consent from customers.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_consent_collection? ConsentCollection { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_consent_collection ConsentCollection { get; set; }
#endif
        /// <summary>Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies) and supported by each line item&apos;s price.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>Configures whether [checkout sessions](https://stripe.com/docs/api/checkout/sessions) created by this payment link create a [Customer](https://stripe.com/docs/api/customers).</summary>
        public global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_customer_creation? CustomerCreation { get; set; }
        /// <summary>Collect additional information from your customer using custom fields. Up to 3 fields are supported.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_custom_fields>? CustomFields { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_custom_fields> CustomFields { get; set; }
#endif
        /// <summary>Display additional text for your customers using custom text.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_custom_text? CustomText { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_custom_text CustomText { get; set; }
#endif
        /// <summary>Specifies which fields in the response should be expanded.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Expand { get; set; }
#nullable restore
#else
        public List<string> Expand { get; set; }
#endif
        /// <summary>The custom message to be displayed to a customer when a payment link is no longer active.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InactiveMessage { get; set; }
#nullable restore
#else
        public string InactiveMessage { get; set; }
#endif
        /// <summary>Generate a post-purchase Invoice for one-time payments.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_invoice_creation? InvoiceCreation { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_invoice_creation InvoiceCreation { get; set; }
#endif
        /// <summary>The line items representing what is being sold. Each line item represents an item being sold. Up to 20 line items are supported.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_line_items>? LineItems { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_line_items> LineItems { get; set; }
#endif
        /// <summary>Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. Metadata associated with this Payment Link will automatically be copied to [checkout sessions](https://stripe.com/docs/api/checkout/sessions) created by this payment link.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_metadata? Metadata { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_metadata Metadata { get; set; }
#endif
        /// <summary>The account on behalf of which to charge.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OnBehalfOf { get; set; }
#nullable restore
#else
        public string OnBehalfOf { get; set; }
#endif
        /// <summary>A list of optional items the customer can add to their order at checkout. Use this parameter to pass one-time or recurring [Prices](https://stripe.com/docs/api/prices).There is a maximum of 10 optional items allowed on a payment link, and the existing limits on the number of line items allowed on a payment link apply to the combined number of line items and optional items.There is a maximum of 20 combined line items and optional items.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_optional_items>? OptionalItems { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_optional_items> OptionalItems { get; set; }
#endif
        /// <summary>A subset of parameters to be passed to PaymentIntent creation for Checkout Sessions in `payment` mode.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_payment_intent_data? PaymentIntentData { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_payment_intent_data PaymentIntentData { get; set; }
#endif
        /// <summary>Specify whether Checkout should collect a payment method. When set to `if_required`, Checkout will not collect a payment method when the total due for the session is 0.This may occur if the Checkout Session includes a free trial or a discount.Can only be set in `subscription` mode. Defaults to `always`.If you&apos;d like information on how to collect a payment method outside of Checkout, read the guide on [configuring subscriptions with a free trial](https://stripe.com/docs/payments/checkout/free-trials).</summary>
        public global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_payment_method_collection? PaymentMethodCollection { get; set; }
        /// <summary>The list of payment method types that customers can use. If no value is passed, Stripe will dynamically show relevant payment methods from your [payment method settings](https://dashboard.stripe.com/settings/payment_methods) (20+ payment methods [supported](https://stripe.com/docs/payments/payment-methods/integration-options#payment-method-product-support)).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_payment_method_types?>? PaymentMethodTypes { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_payment_method_types?> PaymentMethodTypes { get; set; }
#endif
        /// <summary>Controls phone number collection settings during checkout.We recommend that you review your privacy policy and check with your legal contacts.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_phone_number_collection? PhoneNumberCollection { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_phone_number_collection PhoneNumberCollection { get; set; }
#endif
        /// <summary>Settings that restrict the usage of a payment link.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_restrictions? Restrictions { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_restrictions Restrictions { get; set; }
#endif
        /// <summary>Configuration for collecting the customer&apos;s shipping address.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_shipping_address_collection? ShippingAddressCollection { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_shipping_address_collection ShippingAddressCollection { get; set; }
#endif
        /// <summary>The shipping rate options to apply to [checkout sessions](https://stripe.com/docs/api/checkout/sessions) created by this payment link.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_shipping_options>? ShippingOptions { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_shipping_options> ShippingOptions { get; set; }
#endif
        /// <summary>Describes the type of transaction being performed in order to customize relevant text on the page, such as the submit button. Changing this value will also affect the hostname in the [url](https://stripe.com/docs/api/payment_links/payment_links/object#url) property (example: `donate.stripe.com`).</summary>
        public global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_submit_type? SubmitType { get; set; }
        /// <summary>When creating a subscription, the specified configuration data will be used. There must be at least one line item with a recurring price to use `subscription_data`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_subscription_data? SubscriptionData { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_subscription_data SubscriptionData { get; set; }
#endif
        /// <summary>Controls tax ID collection during checkout.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_tax_id_collection? TaxIdCollection { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_tax_id_collection TaxIdCollection { get; set; }
#endif
        /// <summary>The account (if any) the payments will be attributed to for tax reporting, and where funds from each payment will be transferred to.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_transfer_data? TransferData { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_transfer_data TransferData { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "after_completion", n => { AfterCompletion = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_after_completion>(global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_after_completion.CreateFromDiscriminatorValue); } },
                { "allow_promotion_codes", n => { AllowPromotionCodes = n.GetBoolValue(); } },
                { "application_fee_amount", n => { ApplicationFeeAmount = n.GetIntValue(); } },
                { "application_fee_percent", n => { ApplicationFeePercent = n.GetDoubleValue(); } },
                { "automatic_tax", n => { AutomaticTax = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_automatic_tax>(global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_automatic_tax.CreateFromDiscriminatorValue); } },
                { "billing_address_collection", n => { BillingAddressCollection = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_billing_address_collection>(); } },
                { "consent_collection", n => { ConsentCollection = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_consent_collection>(global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_consent_collection.CreateFromDiscriminatorValue); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "custom_fields", n => { CustomFields = n.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_custom_fields>(global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_custom_fields.CreateFromDiscriminatorValue)?.AsList(); } },
                { "custom_text", n => { CustomText = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_custom_text>(global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_custom_text.CreateFromDiscriminatorValue); } },
                { "customer_creation", n => { CustomerCreation = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_customer_creation>(); } },
                { "expand", n => { Expand = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "inactive_message", n => { InactiveMessage = n.GetStringValue(); } },
                { "invoice_creation", n => { InvoiceCreation = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_invoice_creation>(global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_invoice_creation.CreateFromDiscriminatorValue); } },
                { "line_items", n => { LineItems = n.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_line_items>(global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_line_items.CreateFromDiscriminatorValue)?.AsList(); } },
                { "metadata", n => { Metadata = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_metadata>(global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_metadata.CreateFromDiscriminatorValue); } },
                { "on_behalf_of", n => { OnBehalfOf = n.GetStringValue(); } },
                { "optional_items", n => { OptionalItems = n.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_optional_items>(global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_optional_items.CreateFromDiscriminatorValue)?.AsList(); } },
                { "payment_intent_data", n => { PaymentIntentData = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_payment_intent_data>(global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_payment_intent_data.CreateFromDiscriminatorValue); } },
                { "payment_method_collection", n => { PaymentMethodCollection = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_payment_method_collection>(); } },
                { "payment_method_types", n => { PaymentMethodTypes = n.GetCollectionOfEnumValues<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_payment_method_types>()?.AsList(); } },
                { "phone_number_collection", n => { PhoneNumberCollection = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_phone_number_collection>(global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_phone_number_collection.CreateFromDiscriminatorValue); } },
                { "restrictions", n => { Restrictions = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_restrictions>(global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_restrictions.CreateFromDiscriminatorValue); } },
                { "shipping_address_collection", n => { ShippingAddressCollection = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_shipping_address_collection>(global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_shipping_address_collection.CreateFromDiscriminatorValue); } },
                { "shipping_options", n => { ShippingOptions = n.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_shipping_options>(global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_shipping_options.CreateFromDiscriminatorValue)?.AsList(); } },
                { "submit_type", n => { SubmitType = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_submit_type>(); } },
                { "subscription_data", n => { SubscriptionData = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_subscription_data>(global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_subscription_data.CreateFromDiscriminatorValue); } },
                { "tax_id_collection", n => { TaxIdCollection = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_tax_id_collection>(global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_tax_id_collection.CreateFromDiscriminatorValue); } },
                { "transfer_data", n => { TransferData = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_transfer_data>(global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_transfer_data.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_after_completion>("after_completion", AfterCompletion);
            writer.WriteBoolValue("allow_promotion_codes", AllowPromotionCodes);
            writer.WriteIntValue("application_fee_amount", ApplicationFeeAmount);
            writer.WriteDoubleValue("application_fee_percent", ApplicationFeePercent);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_automatic_tax>("automatic_tax", AutomaticTax);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_billing_address_collection>("billing_address_collection", BillingAddressCollection);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_consent_collection>("consent_collection", ConsentCollection);
            writer.WriteStringValue("currency", Currency);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_customer_creation>("customer_creation", CustomerCreation);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_custom_fields>("custom_fields", CustomFields);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_custom_text>("custom_text", CustomText);
            writer.WriteCollectionOfPrimitiveValues<string>("expand", Expand);
            writer.WriteStringValue("inactive_message", InactiveMessage);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_invoice_creation>("invoice_creation", InvoiceCreation);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_line_items>("line_items", LineItems);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_metadata>("metadata", Metadata);
            writer.WriteStringValue("on_behalf_of", OnBehalfOf);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_optional_items>("optional_items", OptionalItems);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_payment_intent_data>("payment_intent_data", PaymentIntentData);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_payment_method_collection>("payment_method_collection", PaymentMethodCollection);
            writer.WriteCollectionOfEnumValues<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_payment_method_types>("payment_method_types", PaymentMethodTypes);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_phone_number_collection>("phone_number_collection", PhoneNumberCollection);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_restrictions>("restrictions", Restrictions);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_shipping_address_collection>("shipping_address_collection", ShippingAddressCollection);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_shipping_options>("shipping_options", ShippingOptions);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_submit_type>("submit_type", SubmitType);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_subscription_data>("subscription_data", SubscriptionData);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_tax_id_collection>("tax_id_collection", TaxIdCollection);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Payment_links.Payment_linksPostRequestBody_transfer_data>("transfer_data", TransferData);
        }
    }
}
#pragma warning restore CS0618
