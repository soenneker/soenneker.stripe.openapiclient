// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.V1.Transfers
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TransfersPostRequestBody : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>A positive integer in cents (or local equivalent) representing how much to transfer.</summary>
        public int? Amount { get; set; }
        /// <summary>Three-letter [ISO code for currency](https://www.iso.org/iso-4217-currency-codes.html) in lowercase. Must be a [supported currency](https://docs.stripe.com/currencies).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>An arbitrary string attached to the object. Often useful for displaying to users.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The ID of a connected Stripe account. &lt;a href=&quot;/docs/connect/separate-charges-and-transfers&quot;&gt;See the Connect documentation&lt;/a&gt; for details.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Destination { get; set; }
#nullable restore
#else
        public string Destination { get; set; }
#endif
        /// <summary>Specifies which fields in the response should be expanded.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Expand { get; set; }
#nullable restore
#else
        public List<string> Expand { get; set; }
#endif
        /// <summary>Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Transfers.TransfersPostRequestBody_metadata? Metadata { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Transfers.TransfersPostRequestBody_metadata Metadata { get; set; }
#endif
        /// <summary>You can use this parameter to transfer funds from a charge before they are added to your available balance. A pending balance will transfer immediately but the funds will not become available until the original charge becomes available. [See the Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-availability) for details.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SourceTransaction { get; set; }
#nullable restore
#else
        public string SourceTransaction { get; set; }
#endif
        /// <summary>The source balance to use for this transfer. One of `bank_account`, `card`, or `fpx`. For most users, this will default to `card`.</summary>
        public global::Soenneker.Stripe.OpenApiClient.V1.Transfers.TransfersPostRequestBody_source_type? SourceType { get; set; }
        /// <summary>A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options) for details.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TransferGroup { get; set; }
#nullable restore
#else
        public string TransferGroup { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Transfers.TransfersPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.V1.Transfers.TransfersPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.V1.Transfers.TransfersPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount", n => { Amount = n.GetIntValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "destination", n => { Destination = n.GetStringValue(); } },
                { "expand", n => { Expand = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "metadata", n => { Metadata = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Transfers.TransfersPostRequestBody_metadata>(global::Soenneker.Stripe.OpenApiClient.V1.Transfers.TransfersPostRequestBody_metadata.CreateFromDiscriminatorValue); } },
                { "source_transaction", n => { SourceTransaction = n.GetStringValue(); } },
                { "source_type", n => { SourceType = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Transfers.TransfersPostRequestBody_source_type>(); } },
                { "transfer_group", n => { TransferGroup = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("amount", Amount);
            writer.WriteStringValue("currency", Currency);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("destination", Destination);
            writer.WriteCollectionOfPrimitiveValues<string>("expand", Expand);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Transfers.TransfersPostRequestBody_metadata>("metadata", Metadata);
            writer.WriteStringValue("source_transaction", SourceTransaction);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Transfers.TransfersPostRequestBody_source_type>("source_type", SourceType);
            writer.WriteStringValue("transfer_group", TransferGroup);
        }
    }
}
#pragma warning restore CS0618
