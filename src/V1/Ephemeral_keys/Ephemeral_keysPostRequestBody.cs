// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.V1.Ephemeral_keys
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Ephemeral_keysPostRequestBody : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The ID of the Customer you&apos;d like to modify using the resulting ephemeral key.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Customer { get; set; }
#nullable restore
#else
        public string Customer { get; set; }
#endif
        /// <summary>Specifies which fields in the response should be expanded.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Expand { get; set; }
#nullable restore
#else
        public List<string> Expand { get; set; }
#endif
        /// <summary>The ID of the Issuing Card you&apos;d like to access using the resulting ephemeral key.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IssuingCard { get; set; }
#nullable restore
#else
        public string IssuingCard { get; set; }
#endif
        /// <summary>A single-use token, created by Stripe.js, used for creating ephemeral keys for Issuing Cards without exchanging sensitive information.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Nonce { get; set; }
#nullable restore
#else
        public string Nonce { get; set; }
#endif
        /// <summary>The ID of the Identity VerificationSession you&apos;d like to access using the resulting ephemeral key</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VerificationSession { get; set; }
#nullable restore
#else
        public string VerificationSession { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Ephemeral_keys.Ephemeral_keysPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.V1.Ephemeral_keys.Ephemeral_keysPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.V1.Ephemeral_keys.Ephemeral_keysPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "customer", n => { Customer = n.GetStringValue(); } },
                { "expand", n => { Expand = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "issuing_card", n => { IssuingCard = n.GetStringValue(); } },
                { "nonce", n => { Nonce = n.GetStringValue(); } },
                { "verification_session", n => { VerificationSession = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("customer", Customer);
            writer.WriteCollectionOfPrimitiveValues<string>("expand", Expand);
            writer.WriteStringValue("issuing_card", IssuingCard);
            writer.WriteStringValue("nonce", Nonce);
            writer.WriteStringValue("verification_session", VerificationSession);
        }
    }
}
#pragma warning restore CS0618
