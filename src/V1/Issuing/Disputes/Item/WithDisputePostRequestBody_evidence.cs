// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item
{
    /// <summary>
    /// Evidence provided for the dispute.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithDisputePostRequestBody_evidence : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The canceled property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_canceled? Canceled { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_canceled Canceled { get; set; }
#endif
        /// <summary>The duplicate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_duplicate? Duplicate { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_duplicate Duplicate { get; set; }
#endif
        /// <summary>The fraudulent property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_fraudulent? Fraudulent { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_fraudulent Fraudulent { get; set; }
#endif
        /// <summary>The merchandise_not_as_described property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_merchandise_not_as_described? MerchandiseNotAsDescribed { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_merchandise_not_as_described MerchandiseNotAsDescribed { get; set; }
#endif
        /// <summary>The not_received property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_not_received? NotReceived { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_not_received NotReceived { get; set; }
#endif
        /// <summary>The no_valid_authorization property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_no_valid_authorization? NoValidAuthorization { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_no_valid_authorization NoValidAuthorization { get; set; }
#endif
        /// <summary>The other property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_other? Other { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_other Other { get; set; }
#endif
        /// <summary>The reason property</summary>
        public global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_reason? Reason { get; set; }
        /// <summary>The service_not_as_described property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_service_not_as_described? ServiceNotAsDescribed { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_service_not_as_described ServiceNotAsDescribed { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence"/> and sets the default values.
        /// </summary>
        public WithDisputePostRequestBody_evidence()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "canceled", n => { Canceled = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_canceled>(global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_canceled.CreateFromDiscriminatorValue); } },
                { "duplicate", n => { Duplicate = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_duplicate>(global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_duplicate.CreateFromDiscriminatorValue); } },
                { "fraudulent", n => { Fraudulent = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_fraudulent>(global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_fraudulent.CreateFromDiscriminatorValue); } },
                { "merchandise_not_as_described", n => { MerchandiseNotAsDescribed = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_merchandise_not_as_described>(global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_merchandise_not_as_described.CreateFromDiscriminatorValue); } },
                { "no_valid_authorization", n => { NoValidAuthorization = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_no_valid_authorization>(global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_no_valid_authorization.CreateFromDiscriminatorValue); } },
                { "not_received", n => { NotReceived = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_not_received>(global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_not_received.CreateFromDiscriminatorValue); } },
                { "other", n => { Other = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_other>(global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_other.CreateFromDiscriminatorValue); } },
                { "reason", n => { Reason = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_reason>(); } },
                { "service_not_as_described", n => { ServiceNotAsDescribed = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_service_not_as_described>(global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_service_not_as_described.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_canceled>("canceled", Canceled);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_duplicate>("duplicate", Duplicate);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_fraudulent>("fraudulent", Fraudulent);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_merchandise_not_as_described>("merchandise_not_as_described", MerchandiseNotAsDescribed);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_not_received>("not_received", NotReceived);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_no_valid_authorization>("no_valid_authorization", NoValidAuthorization);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_other>("other", Other);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_reason>("reason", Reason);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_service_not_as_described>("service_not_as_described", ServiceNotAsDescribed);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_canceledMember1"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithDisputePostRequestBody_evidence_canceled : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_canceledMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_canceledMember1? WithDisputePostRequestBodyEvidenceCanceledMember1 { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_canceledMember1 WithDisputePostRequestBodyEvidenceCanceledMember1 { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_canceled"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_canceled CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_canceled();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.WithDisputePostRequestBodyEvidenceCanceledMember1 = new global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_canceledMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(WithDisputePostRequestBodyEvidenceCanceledMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(WithDisputePostRequestBodyEvidenceCanceledMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_canceledMember1>(null, WithDisputePostRequestBodyEvidenceCanceledMember1);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_duplicateMember1"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithDisputePostRequestBody_evidence_duplicate : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_duplicateMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_duplicateMember1? WithDisputePostRequestBodyEvidenceDuplicateMember1 { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_duplicateMember1 WithDisputePostRequestBodyEvidenceDuplicateMember1 { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_duplicate"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_duplicate CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_duplicate();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.WithDisputePostRequestBodyEvidenceDuplicateMember1 = new global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_duplicateMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(WithDisputePostRequestBodyEvidenceDuplicateMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(WithDisputePostRequestBodyEvidenceDuplicateMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_duplicateMember1>(null, WithDisputePostRequestBodyEvidenceDuplicateMember1);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_fraudulentMember1"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithDisputePostRequestBody_evidence_fraudulent : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_fraudulentMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_fraudulentMember1? WithDisputePostRequestBodyEvidenceFraudulentMember1 { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_fraudulentMember1 WithDisputePostRequestBodyEvidenceFraudulentMember1 { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_fraudulent"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_fraudulent CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_fraudulent();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.WithDisputePostRequestBodyEvidenceFraudulentMember1 = new global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_fraudulentMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(WithDisputePostRequestBodyEvidenceFraudulentMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(WithDisputePostRequestBodyEvidenceFraudulentMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_fraudulentMember1>(null, WithDisputePostRequestBodyEvidenceFraudulentMember1);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_merchandise_not_as_describedMember1"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithDisputePostRequestBody_evidence_merchandise_not_as_described : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_merchandise_not_as_describedMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_merchandise_not_as_describedMember1? WithDisputePostRequestBodyEvidenceMerchandiseNotAsDescribedMember1 { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_merchandise_not_as_describedMember1 WithDisputePostRequestBodyEvidenceMerchandiseNotAsDescribedMember1 { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_merchandise_not_as_described"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_merchandise_not_as_described CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_merchandise_not_as_described();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.WithDisputePostRequestBodyEvidenceMerchandiseNotAsDescribedMember1 = new global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_merchandise_not_as_describedMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(WithDisputePostRequestBodyEvidenceMerchandiseNotAsDescribedMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(WithDisputePostRequestBodyEvidenceMerchandiseNotAsDescribedMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_merchandise_not_as_describedMember1>(null, WithDisputePostRequestBodyEvidenceMerchandiseNotAsDescribedMember1);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_no_valid_authorizationMember1"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithDisputePostRequestBody_evidence_no_valid_authorization : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_no_valid_authorizationMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_no_valid_authorizationMember1? WithDisputePostRequestBodyEvidenceNoValidAuthorizationMember1 { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_no_valid_authorizationMember1 WithDisputePostRequestBodyEvidenceNoValidAuthorizationMember1 { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_no_valid_authorization"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_no_valid_authorization CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_no_valid_authorization();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.WithDisputePostRequestBodyEvidenceNoValidAuthorizationMember1 = new global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_no_valid_authorizationMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(WithDisputePostRequestBodyEvidenceNoValidAuthorizationMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(WithDisputePostRequestBodyEvidenceNoValidAuthorizationMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_no_valid_authorizationMember1>(null, WithDisputePostRequestBodyEvidenceNoValidAuthorizationMember1);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_not_receivedMember1"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithDisputePostRequestBody_evidence_not_received : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_not_receivedMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_not_receivedMember1? WithDisputePostRequestBodyEvidenceNotReceivedMember1 { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_not_receivedMember1 WithDisputePostRequestBodyEvidenceNotReceivedMember1 { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_not_received"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_not_received CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_not_received();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.WithDisputePostRequestBodyEvidenceNotReceivedMember1 = new global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_not_receivedMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(WithDisputePostRequestBodyEvidenceNotReceivedMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(WithDisputePostRequestBodyEvidenceNotReceivedMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_not_receivedMember1>(null, WithDisputePostRequestBodyEvidenceNotReceivedMember1);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_otherMember1"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithDisputePostRequestBody_evidence_other : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_otherMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_otherMember1? WithDisputePostRequestBodyEvidenceOtherMember1 { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_otherMember1 WithDisputePostRequestBodyEvidenceOtherMember1 { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_other"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_other CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_other();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.WithDisputePostRequestBodyEvidenceOtherMember1 = new global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_otherMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(WithDisputePostRequestBodyEvidenceOtherMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(WithDisputePostRequestBodyEvidenceOtherMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_otherMember1>(null, WithDisputePostRequestBodyEvidenceOtherMember1);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_service_not_as_describedMember1"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithDisputePostRequestBody_evidence_service_not_as_described : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_service_not_as_describedMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_service_not_as_describedMember1? WithDisputePostRequestBodyEvidenceServiceNotAsDescribedMember1 { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_service_not_as_describedMember1 WithDisputePostRequestBodyEvidenceServiceNotAsDescribedMember1 { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_service_not_as_described"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_service_not_as_described CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence.WithDisputePostRequestBody_evidence_service_not_as_described();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.WithDisputePostRequestBodyEvidenceServiceNotAsDescribedMember1 = new global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_service_not_as_describedMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(WithDisputePostRequestBodyEvidenceServiceNotAsDescribedMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(WithDisputePostRequestBodyEvidenceServiceNotAsDescribedMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Issuing.Disputes.Item.WithDisputePostRequestBody_evidence_service_not_as_describedMember1>(null, WithDisputePostRequestBodyEvidenceServiceNotAsDescribedMember1);
                }
            }
        }
    }
}
#pragma warning restore CS0618
