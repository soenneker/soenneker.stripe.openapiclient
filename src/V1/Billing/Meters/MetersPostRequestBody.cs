// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.V1.Billing.Meters
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class MetersPostRequestBody : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Fields that specify how to map a meter event to a customer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Billing.Meters.MetersPostRequestBody_customer_mapping? CustomerMapping { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Billing.Meters.MetersPostRequestBody_customer_mapping CustomerMapping { get; set; }
#endif
        /// <summary>The default settings to aggregate a meter&apos;s events with.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Billing.Meters.MetersPostRequestBody_default_aggregation? DefaultAggregation { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Billing.Meters.MetersPostRequestBody_default_aggregation DefaultAggregation { get; set; }
#endif
        /// <summary>The meterâ€™s name. Not visible to the customer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>The name of the meter event to record usage for. Corresponds with the `event_name` field on meter events.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EventName { get; set; }
#nullable restore
#else
        public string EventName { get; set; }
#endif
        /// <summary>The time window which meter events have been pre-aggregated for, if any.</summary>
        public global::Soenneker.Stripe.OpenApiClient.V1.Billing.Meters.MetersPostRequestBody_event_time_window? EventTimeWindow { get; set; }
        /// <summary>Specifies which fields in the response should be expanded.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Expand { get; set; }
#nullable restore
#else
        public List<string> Expand { get; set; }
#endif
        /// <summary>Fields that specify how to calculate a meter event&apos;s value.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Billing.Meters.MetersPostRequestBody_value_settings? ValueSettings { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Billing.Meters.MetersPostRequestBody_value_settings ValueSettings { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Billing.Meters.MetersPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.V1.Billing.Meters.MetersPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.V1.Billing.Meters.MetersPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "customer_mapping", n => { CustomerMapping = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Billing.Meters.MetersPostRequestBody_customer_mapping>(global::Soenneker.Stripe.OpenApiClient.V1.Billing.Meters.MetersPostRequestBody_customer_mapping.CreateFromDiscriminatorValue); } },
                { "default_aggregation", n => { DefaultAggregation = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Billing.Meters.MetersPostRequestBody_default_aggregation>(global::Soenneker.Stripe.OpenApiClient.V1.Billing.Meters.MetersPostRequestBody_default_aggregation.CreateFromDiscriminatorValue); } },
                { "display_name", n => { DisplayName = n.GetStringValue(); } },
                { "event_name", n => { EventName = n.GetStringValue(); } },
                { "event_time_window", n => { EventTimeWindow = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Billing.Meters.MetersPostRequestBody_event_time_window>(); } },
                { "expand", n => { Expand = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "value_settings", n => { ValueSettings = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Billing.Meters.MetersPostRequestBody_value_settings>(global::Soenneker.Stripe.OpenApiClient.V1.Billing.Meters.MetersPostRequestBody_value_settings.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Billing.Meters.MetersPostRequestBody_customer_mapping>("customer_mapping", CustomerMapping);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Billing.Meters.MetersPostRequestBody_default_aggregation>("default_aggregation", DefaultAggregation);
            writer.WriteStringValue("display_name", DisplayName);
            writer.WriteStringValue("event_name", EventName);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Billing.Meters.MetersPostRequestBody_event_time_window>("event_time_window", EventTimeWindow);
            writer.WriteCollectionOfPrimitiveValues<string>("expand", Expand);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Billing.Meters.MetersPostRequestBody_value_settings>("value_settings", ValueSettings);
        }
    }
}
#pragma warning restore CS0618
