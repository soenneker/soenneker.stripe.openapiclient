// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.V1.Plans
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PlansPostRequestBody : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Whether the plan is currently available for new subscriptions. Defaults to `true`.</summary>
        public bool? Active { get; set; }
        /// <summary>A positive integer in cents (or local equivalent) (or 0 for a free plan) representing how much to charge on a recurring basis.</summary>
        public int? Amount { get; set; }
        /// <summary>Same as `amount`, but accepts a decimal value with at most 12 decimal places. Only one of `amount` and `amount_decimal` can be set.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AmountDecimal { get; set; }
#nullable restore
#else
        public string AmountDecimal { get; set; }
#endif
        /// <summary>Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.</summary>
        public global::Soenneker.Stripe.OpenApiClient.V1.Plans.PlansPostRequestBody_billing_scheme? BillingScheme { get; set; }
        /// <summary>Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>Specifies which fields in the response should be expanded.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Expand { get; set; }
#nullable restore
#else
        public List<string> Expand { get; set; }
#endif
        /// <summary>An identifier randomly generated by Stripe. Used to identify this plan when subscribing a customer. You can optionally override this ID, but the ID must be unique across all plans in your Stripe account. You can, however, use the same plan ID in both live and test modes.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Specifies billing frequency. Either `day`, `week`, `month` or `year`.</summary>
        public global::Soenneker.Stripe.OpenApiClient.V1.Plans.PlansPostRequestBody_interval? Interval { get; set; }
        /// <summary>The number of intervals between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of three years interval allowed (3 years, 36 months, or 156 weeks).</summary>
        public int? IntervalCount { get; set; }
        /// <summary>Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Metadata { get; set; }
#nullable restore
#else
        public string Metadata { get; set; }
#endif
        /// <summary>The meter tracking the usage of a metered price</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Meter { get; set; }
#nullable restore
#else
        public string Meter { get; set; }
#endif
        /// <summary>A brief description of the plan, hidden from customers.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Nickname { get; set; }
#nullable restore
#else
        public string Nickname { get; set; }
#endif
        /// <summary>The product property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Plans.PlansPostRequestBody.PlansPostRequestBody_product? Product { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Plans.PlansPostRequestBody.PlansPostRequestBody_product Product { get; set; }
#endif
        /// <summary>Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.V1.Plans.PlansPostRequestBody_tiers>? Tiers { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.V1.Plans.PlansPostRequestBody_tiers> Tiers { get; set; }
#endif
        /// <summary>Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price, in `graduated` tiering pricing can successively change as the quantity grows.</summary>
        public global::Soenneker.Stripe.OpenApiClient.V1.Plans.PlansPostRequestBody_tiers_mode? TiersMode { get; set; }
        /// <summary>Apply a transformation to the reported usage or set quantity before computing the billed price. Cannot be combined with `tiers`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Plans.PlansPostRequestBody_transform_usage? TransformUsage { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Plans.PlansPostRequestBody_transform_usage TransformUsage { get; set; }
#endif
        /// <summary>Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan).</summary>
        public int? TrialPeriodDays { get; set; }
        /// <summary>Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`.</summary>
        public global::Soenneker.Stripe.OpenApiClient.V1.Plans.PlansPostRequestBody_usage_type? UsageType { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Plans.PlansPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.V1.Plans.PlansPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.V1.Plans.PlansPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "active", n => { Active = n.GetBoolValue(); } },
                { "amount", n => { Amount = n.GetIntValue(); } },
                { "amount_decimal", n => { AmountDecimal = n.GetStringValue(); } },
                { "billing_scheme", n => { BillingScheme = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Plans.PlansPostRequestBody_billing_scheme>(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "expand", n => { Expand = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "interval", n => { Interval = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Plans.PlansPostRequestBody_interval>(); } },
                { "interval_count", n => { IntervalCount = n.GetIntValue(); } },
                { "metadata", n => { Metadata = n.GetStringValue(); } },
                { "meter", n => { Meter = n.GetStringValue(); } },
                { "nickname", n => { Nickname = n.GetStringValue(); } },
                { "product", n => { Product = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Plans.PlansPostRequestBody.PlansPostRequestBody_product>(global::Soenneker.Stripe.OpenApiClient.V1.Plans.PlansPostRequestBody.PlansPostRequestBody_product.CreateFromDiscriminatorValue); } },
                { "tiers", n => { Tiers = n.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.V1.Plans.PlansPostRequestBody_tiers>(global::Soenneker.Stripe.OpenApiClient.V1.Plans.PlansPostRequestBody_tiers.CreateFromDiscriminatorValue)?.AsList(); } },
                { "tiers_mode", n => { TiersMode = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Plans.PlansPostRequestBody_tiers_mode>(); } },
                { "transform_usage", n => { TransformUsage = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Plans.PlansPostRequestBody_transform_usage>(global::Soenneker.Stripe.OpenApiClient.V1.Plans.PlansPostRequestBody_transform_usage.CreateFromDiscriminatorValue); } },
                { "trial_period_days", n => { TrialPeriodDays = n.GetIntValue(); } },
                { "usage_type", n => { UsageType = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Plans.PlansPostRequestBody_usage_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("active", Active);
            writer.WriteIntValue("amount", Amount);
            writer.WriteStringValue("amount_decimal", AmountDecimal);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Plans.PlansPostRequestBody_billing_scheme>("billing_scheme", BillingScheme);
            writer.WriteStringValue("currency", Currency);
            writer.WriteCollectionOfPrimitiveValues<string>("expand", Expand);
            writer.WriteStringValue("id", Id);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Plans.PlansPostRequestBody_interval>("interval", Interval);
            writer.WriteIntValue("interval_count", IntervalCount);
            writer.WriteStringValue("metadata", Metadata);
            writer.WriteStringValue("meter", Meter);
            writer.WriteStringValue("nickname", Nickname);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Plans.PlansPostRequestBody.PlansPostRequestBody_product>("product", Product);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.V1.Plans.PlansPostRequestBody_tiers>("tiers", Tiers);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Plans.PlansPostRequestBody_tiers_mode>("tiers_mode", TiersMode);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Plans.PlansPostRequestBody_transform_usage>("transform_usage", TransformUsage);
            writer.WriteIntValue("trial_period_days", TrialPeriodDays);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Plans.PlansPostRequestBody_usage_type>("usage_type", UsageType);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Plans.PlansPostRequestBody_productMember1"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class PlansPostRequestBody_product : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Plans.PlansPostRequestBody_productMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Soenneker.Stripe.OpenApiClient.V1.Plans.PlansPostRequestBody_productMember1? PlansPostRequestBodyProductMember1 { get; set; }
#nullable restore
#else
            public global::Soenneker.Stripe.OpenApiClient.V1.Plans.PlansPostRequestBody_productMember1 PlansPostRequestBodyProductMember1 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Plans.PlansPostRequestBody.PlansPostRequestBody_product"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Soenneker.Stripe.OpenApiClient.V1.Plans.PlansPostRequestBody.PlansPostRequestBody_product CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Soenneker.Stripe.OpenApiClient.V1.Plans.PlansPostRequestBody.PlansPostRequestBody_product();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.PlansPostRequestBodyProductMember1 = new global::Soenneker.Stripe.OpenApiClient.V1.Plans.PlansPostRequestBody_productMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(PlansPostRequestBodyProductMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(PlansPostRequestBodyProductMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Plans.PlansPostRequestBody_productMember1>(null, PlansPostRequestBodyProductMember1);
                }
            }
        }
    }
}
#pragma warning restore CS0618
