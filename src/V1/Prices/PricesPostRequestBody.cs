// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.V1.Prices
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PricesPostRequestBody : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Whether the price can be used for new purchases. Defaults to `true`.</summary>
        public bool? Active { get; set; }
        /// <summary>Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.</summary>
        public global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_billing_scheme? BillingScheme { get; set; }
        /// <summary>Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>Prices defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_currency_options? CurrencyOptions { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_currency_options CurrencyOptions { get; set; }
#endif
        /// <summary>When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_custom_unit_amount? CustomUnitAmount { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_custom_unit_amount CustomUnitAmount { get; set; }
#endif
        /// <summary>Specifies which fields in the response should be expanded.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Expand { get; set; }
#nullable restore
#else
        public List<string> Expand { get; set; }
#endif
        /// <summary>A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LookupKey { get; set; }
#nullable restore
#else
        public string LookupKey { get; set; }
#endif
        /// <summary>Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_metadata? Metadata { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_metadata Metadata { get; set; }
#endif
        /// <summary>A brief description of the price, hidden from customers.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Nickname { get; set; }
#nullable restore
#else
        public string Nickname { get; set; }
#endif
        /// <summary>The ID of the [Product](https://docs.stripe.com/api/products) that this [Price](https://docs.stripe.com/api/prices) will belong to.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Product { get; set; }
#nullable restore
#else
        public string Product { get; set; }
#endif
        /// <summary>These fields can be used to create a new product that this price will belong to.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_product_data? ProductData { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_product_data ProductData { get; set; }
#endif
        /// <summary>The recurring components of a price such as `interval` and `usage_type`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_recurring? Recurring { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_recurring Recurring { get; set; }
#endif
        /// <summary>Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.</summary>
        public global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_tax_behavior? TaxBehavior { get; set; }
        /// <summary>Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_tiers>? Tiers { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_tiers> Tiers { get; set; }
#endif
        /// <summary>Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price, in `graduated` tiering pricing can successively change as the quantity grows.</summary>
        public global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_tiers_mode? TiersMode { get; set; }
        /// <summary>If set to true, will atomically remove the lookup key from the existing price, and assign it to this price.</summary>
        public bool? TransferLookupKey { get; set; }
        /// <summary>Apply a transformation to the reported usage or set quantity before computing the billed price. Cannot be combined with `tiers`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_transform_quantity? TransformQuantity { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_transform_quantity TransformQuantity { get; set; }
#endif
        /// <summary>A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge. One of `unit_amount`, `unit_amount_decimal`, or `custom_unit_amount` is required, unless `billing_scheme=tiered`.</summary>
        public int? UnitAmount { get; set; }
        /// <summary>Same as `unit_amount`, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UnitAmountDecimal { get; set; }
#nullable restore
#else
        public string UnitAmountDecimal { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "active", n => { Active = n.GetBoolValue(); } },
                { "billing_scheme", n => { BillingScheme = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_billing_scheme>(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "currency_options", n => { CurrencyOptions = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_currency_options>(global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_currency_options.CreateFromDiscriminatorValue); } },
                { "custom_unit_amount", n => { CustomUnitAmount = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_custom_unit_amount>(global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_custom_unit_amount.CreateFromDiscriminatorValue); } },
                { "expand", n => { Expand = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "lookup_key", n => { LookupKey = n.GetStringValue(); } },
                { "metadata", n => { Metadata = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_metadata>(global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_metadata.CreateFromDiscriminatorValue); } },
                { "nickname", n => { Nickname = n.GetStringValue(); } },
                { "product", n => { Product = n.GetStringValue(); } },
                { "product_data", n => { ProductData = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_product_data>(global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_product_data.CreateFromDiscriminatorValue); } },
                { "recurring", n => { Recurring = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_recurring>(global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_recurring.CreateFromDiscriminatorValue); } },
                { "tax_behavior", n => { TaxBehavior = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_tax_behavior>(); } },
                { "tiers", n => { Tiers = n.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_tiers>(global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_tiers.CreateFromDiscriminatorValue)?.AsList(); } },
                { "tiers_mode", n => { TiersMode = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_tiers_mode>(); } },
                { "transfer_lookup_key", n => { TransferLookupKey = n.GetBoolValue(); } },
                { "transform_quantity", n => { TransformQuantity = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_transform_quantity>(global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_transform_quantity.CreateFromDiscriminatorValue); } },
                { "unit_amount", n => { UnitAmount = n.GetIntValue(); } },
                { "unit_amount_decimal", n => { UnitAmountDecimal = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("active", Active);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_billing_scheme>("billing_scheme", BillingScheme);
            writer.WriteStringValue("currency", Currency);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_currency_options>("currency_options", CurrencyOptions);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_custom_unit_amount>("custom_unit_amount", CustomUnitAmount);
            writer.WriteCollectionOfPrimitiveValues<string>("expand", Expand);
            writer.WriteStringValue("lookup_key", LookupKey);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_metadata>("metadata", Metadata);
            writer.WriteStringValue("nickname", Nickname);
            writer.WriteStringValue("product", Product);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_product_data>("product_data", ProductData);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_recurring>("recurring", Recurring);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_tax_behavior>("tax_behavior", TaxBehavior);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_tiers>("tiers", Tiers);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_tiers_mode>("tiers_mode", TiersMode);
            writer.WriteBoolValue("transfer_lookup_key", TransferLookupKey);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Prices.PricesPostRequestBody_transform_quantity>("transform_quantity", TransformQuantity);
            writer.WriteIntValue("unit_amount", UnitAmount);
            writer.WriteStringValue("unit_amount_decimal", UnitAmountDecimal);
        }
    }
}
#pragma warning restore CS0618
