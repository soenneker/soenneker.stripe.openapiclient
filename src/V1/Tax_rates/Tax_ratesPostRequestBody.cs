// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.V1.Tax_rates
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Tax_ratesPostRequestBody : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.</summary>
        public bool? Active { get; set; }
        /// <summary>Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Country { get; set; }
#nullable restore
#else
        public string Country { get; set; }
#endif
        /// <summary>An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The display name of the tax rate, which will be shown to users.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>Specifies which fields in the response should be expanded.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Expand { get; set; }
#nullable restore
#else
        public List<string> Expand { get; set; }
#endif
        /// <summary>This specifies if the tax rate is inclusive or exclusive.</summary>
        public bool? Inclusive { get; set; }
        /// <summary>The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customerâ€™s invoice.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Jurisdiction { get; set; }
#nullable restore
#else
        public string Jurisdiction { get; set; }
#endif
        /// <summary>Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Tax_rates.Tax_ratesPostRequestBody_metadata? Metadata { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Tax_rates.Tax_ratesPostRequestBody_metadata Metadata { get; set; }
#endif
        /// <summary>This represents the tax rate percent out of 100.</summary>
        public double? Percentage { get; set; }
        /// <summary>[ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2), without country prefix. For example, &quot;NY&quot; for New York, United States.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? State { get; set; }
#nullable restore
#else
        public string State { get; set; }
#endif
        /// <summary>The high-level tax type, such as `vat` or `sales_tax`.</summary>
        public global::Soenneker.Stripe.OpenApiClient.V1.Tax_rates.Tax_ratesPostRequestBody_tax_type? TaxType { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Tax_rates.Tax_ratesPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.V1.Tax_rates.Tax_ratesPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.V1.Tax_rates.Tax_ratesPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "active", n => { Active = n.GetBoolValue(); } },
                { "country", n => { Country = n.GetStringValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "display_name", n => { DisplayName = n.GetStringValue(); } },
                { "expand", n => { Expand = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "inclusive", n => { Inclusive = n.GetBoolValue(); } },
                { "jurisdiction", n => { Jurisdiction = n.GetStringValue(); } },
                { "metadata", n => { Metadata = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Tax_rates.Tax_ratesPostRequestBody_metadata>(global::Soenneker.Stripe.OpenApiClient.V1.Tax_rates.Tax_ratesPostRequestBody_metadata.CreateFromDiscriminatorValue); } },
                { "percentage", n => { Percentage = n.GetDoubleValue(); } },
                { "state", n => { State = n.GetStringValue(); } },
                { "tax_type", n => { TaxType = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Tax_rates.Tax_ratesPostRequestBody_tax_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("active", Active);
            writer.WriteStringValue("country", Country);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("display_name", DisplayName);
            writer.WriteCollectionOfPrimitiveValues<string>("expand", Expand);
            writer.WriteBoolValue("inclusive", Inclusive);
            writer.WriteStringValue("jurisdiction", Jurisdiction);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Tax_rates.Tax_ratesPostRequestBody_metadata>("metadata", Metadata);
            writer.WriteDoubleValue("percentage", Percentage);
            writer.WriteStringValue("state", State);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Tax_rates.Tax_ratesPostRequestBody_tax_type>("tax_type", TaxType);
        }
    }
}
#pragma warning restore CS0618
