// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.V1.Tax.Calculations
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CalculationsPostRequestBody : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>The ID of an existing customer to use for this calculation. If provided, the customer&apos;s address and tax IDs are copied to `customer_details`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Customer { get; set; }
#nullable restore
#else
        public string Customer { get; set; }
#endif
        /// <summary>Details about the customer, including address and tax IDs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Tax.Calculations.CalculationsPostRequestBody_customer_details? CustomerDetails { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Tax.Calculations.CalculationsPostRequestBody_customer_details CustomerDetails { get; set; }
#endif
        /// <summary>Specifies which fields in the response should be expanded.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Expand { get; set; }
#nullable restore
#else
        public List<string> Expand { get; set; }
#endif
        /// <summary>A list of items the customer is purchasing.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Soenneker.Stripe.OpenApiClient.V1.Tax.Calculations.CalculationsPostRequestBody_line_items>? LineItems { get; set; }
#nullable restore
#else
        public List<global::Soenneker.Stripe.OpenApiClient.V1.Tax.Calculations.CalculationsPostRequestBody_line_items> LineItems { get; set; }
#endif
        /// <summary>Details about the address from which the goods are being shipped.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Tax.Calculations.CalculationsPostRequestBody_ship_from_details? ShipFromDetails { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Tax.Calculations.CalculationsPostRequestBody_ship_from_details ShipFromDetails { get; set; }
#endif
        /// <summary>Shipping cost details to be used for the calculation.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Tax.Calculations.CalculationsPostRequestBody_shipping_cost? ShippingCost { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Tax.Calculations.CalculationsPostRequestBody_shipping_cost ShippingCost { get; set; }
#endif
        /// <summary>Timestamp of date at which the tax rules and rates in effect applies for the calculation. Measured in seconds since the Unix epoch. Can be up to 48 hours in the past, and up to 48 hours in the future.</summary>
        public int? TaxDate { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Tax.Calculations.CalculationsPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.V1.Tax.Calculations.CalculationsPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.V1.Tax.Calculations.CalculationsPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "customer", n => { Customer = n.GetStringValue(); } },
                { "customer_details", n => { CustomerDetails = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Tax.Calculations.CalculationsPostRequestBody_customer_details>(global::Soenneker.Stripe.OpenApiClient.V1.Tax.Calculations.CalculationsPostRequestBody_customer_details.CreateFromDiscriminatorValue); } },
                { "expand", n => { Expand = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "line_items", n => { LineItems = n.GetCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.V1.Tax.Calculations.CalculationsPostRequestBody_line_items>(global::Soenneker.Stripe.OpenApiClient.V1.Tax.Calculations.CalculationsPostRequestBody_line_items.CreateFromDiscriminatorValue)?.AsList(); } },
                { "ship_from_details", n => { ShipFromDetails = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Tax.Calculations.CalculationsPostRequestBody_ship_from_details>(global::Soenneker.Stripe.OpenApiClient.V1.Tax.Calculations.CalculationsPostRequestBody_ship_from_details.CreateFromDiscriminatorValue); } },
                { "shipping_cost", n => { ShippingCost = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Tax.Calculations.CalculationsPostRequestBody_shipping_cost>(global::Soenneker.Stripe.OpenApiClient.V1.Tax.Calculations.CalculationsPostRequestBody_shipping_cost.CreateFromDiscriminatorValue); } },
                { "tax_date", n => { TaxDate = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("currency", Currency);
            writer.WriteStringValue("customer", Customer);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Tax.Calculations.CalculationsPostRequestBody_customer_details>("customer_details", CustomerDetails);
            writer.WriteCollectionOfPrimitiveValues<string>("expand", Expand);
            writer.WriteCollectionOfObjectValues<global::Soenneker.Stripe.OpenApiClient.V1.Tax.Calculations.CalculationsPostRequestBody_line_items>("line_items", LineItems);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Tax.Calculations.CalculationsPostRequestBody_ship_from_details>("ship_from_details", ShipFromDetails);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Tax.Calculations.CalculationsPostRequestBody_shipping_cost>("shipping_cost", ShippingCost);
            writer.WriteIntValue("tax_date", TaxDate);
        }
    }
}
#pragma warning restore CS0618
