// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Soenneker.Stripe.OpenApiClient.V1.Billing_portal.Sessions
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SessionsPostRequestBody : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The ID of an existing [configuration](https://stripe.com/docs/api/customer_portal/configuration) to use for this session, describing its functionality and features. If not specified, the session uses the default configuration.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Configuration { get; set; }
#nullable restore
#else
        public string Configuration { get; set; }
#endif
        /// <summary>The ID of an existing customer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Customer { get; set; }
#nullable restore
#else
        public string Customer { get; set; }
#endif
        /// <summary>Specifies which fields in the response should be expanded.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Expand { get; set; }
#nullable restore
#else
        public List<string> Expand { get; set; }
#endif
        /// <summary>Information about a specific flow for the customer to go through. See the [docs](https://stripe.com/docs/customer-management/portal-deep-links) to learn more about using customer portal deep links and flows.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Soenneker.Stripe.OpenApiClient.V1.Billing_portal.Sessions.SessionsPostRequestBody_flow_data? FlowData { get; set; }
#nullable restore
#else
        public global::Soenneker.Stripe.OpenApiClient.V1.Billing_portal.Sessions.SessionsPostRequestBody_flow_data FlowData { get; set; }
#endif
        /// <summary>The IETF language tag of the locale customer portal is displayed in. If blank or auto, the customer’s `preferred_locales` or browser’s locale is used.</summary>
        public global::Soenneker.Stripe.OpenApiClient.V1.Billing_portal.Sessions.SessionsPostRequestBody_locale? Locale { get; set; }
        /// <summary>The `on_behalf_of` account to use for this session. When specified, only subscriptions and invoices with this `on_behalf_of` account appear in the portal. For more information, see the [docs](https://stripe.com/docs/connect/separate-charges-and-transfers#settlement-merchant). Use the [Accounts API](https://stripe.com/docs/api/accounts/object#account_object-settings-branding) to modify the `on_behalf_of` account&apos;s branding settings, which the portal displays.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OnBehalfOf { get; set; }
#nullable restore
#else
        public string OnBehalfOf { get; set; }
#endif
        /// <summary>The default URL to redirect customers to when they click on the portal&apos;s link to return to your website.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReturnUrl { get; set; }
#nullable restore
#else
        public string ReturnUrl { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Soenneker.Stripe.OpenApiClient.V1.Billing_portal.Sessions.SessionsPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Soenneker.Stripe.OpenApiClient.V1.Billing_portal.Sessions.SessionsPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Soenneker.Stripe.OpenApiClient.V1.Billing_portal.Sessions.SessionsPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "configuration", n => { Configuration = n.GetStringValue(); } },
                { "customer", n => { Customer = n.GetStringValue(); } },
                { "expand", n => { Expand = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "flow_data", n => { FlowData = n.GetObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Billing_portal.Sessions.SessionsPostRequestBody_flow_data>(global::Soenneker.Stripe.OpenApiClient.V1.Billing_portal.Sessions.SessionsPostRequestBody_flow_data.CreateFromDiscriminatorValue); } },
                { "locale", n => { Locale = n.GetEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Billing_portal.Sessions.SessionsPostRequestBody_locale>(); } },
                { "on_behalf_of", n => { OnBehalfOf = n.GetStringValue(); } },
                { "return_url", n => { ReturnUrl = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("configuration", Configuration);
            writer.WriteStringValue("customer", Customer);
            writer.WriteCollectionOfPrimitiveValues<string>("expand", Expand);
            writer.WriteObjectValue<global::Soenneker.Stripe.OpenApiClient.V1.Billing_portal.Sessions.SessionsPostRequestBody_flow_data>("flow_data", FlowData);
            writer.WriteEnumValue<global::Soenneker.Stripe.OpenApiClient.V1.Billing_portal.Sessions.SessionsPostRequestBody_locale>("locale", Locale);
            writer.WriteStringValue("on_behalf_of", OnBehalfOf);
            writer.WriteStringValue("return_url", ReturnUrl);
        }
    }
}
#pragma warning restore CS0618
